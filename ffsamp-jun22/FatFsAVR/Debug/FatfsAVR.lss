
FatfsAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002b9e  00002c32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000053a  00800128  00800128  00002c5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e4f  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000930  00000000  00000000  00006d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002812  00000000  00000000  0000766f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b50  00000000  00000000  00009e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007de  00000000  00000000  0000a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066af  00000000  00000000  0000b1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00011861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      38:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__vector_14>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__vector_18>
      4c:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__vector_19>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	87 12       	cpse	r8, r23
      6a:	8f 12       	cpse	r8, r31
      6c:	e5 13       	cpse	r30, r21
      6e:	01 13       	cpse	r16, r17
      70:	e5 13       	cpse	r30, r21
      72:	e5 13       	cpse	r30, r21
      74:	e5 13       	cpse	r30, r21
      76:	e5 13       	cpse	r30, r21
      78:	e5 13       	cpse	r30, r21
      7a:	e5 13       	cpse	r30, r21
      7c:	8d 13       	cpse	r24, r29
      7e:	93 13       	cpse	r25, r19
      80:	a6 13       	cpse	r26, r22
      82:	b9 13       	cpse	r27, r25
      84:	d0 13       	cpse	r29, r16

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	ee e9       	ldi	r30, 0x9E	; 158
      9a:	fb e2       	ldi	r31, 0x2B	; 43
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a8 32       	cpi	r26, 0x28	; 40
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	26 e0       	ldi	r18, 0x06	; 6
      aa:	a8 e2       	ldi	r26, 0x28	; 40
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	a2 36       	cpi	r26, 0x62	; 98
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 28 15 	call	0x2a50	; 0x2a50 <main>
      bc:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <mem_cpy>:
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	42 30       	cpi	r20, 0x02	; 2
      ca:	51 05       	cpc	r21, r1
      cc:	c0 f0       	brcs	.+48     	; 0xfe <mem_cpy+0x3a>
      ce:	db 01       	movw	r26, r22
      d0:	fc 01       	movw	r30, r24
      d2:	9a 01       	movw	r18, r20
      d4:	cd 91       	ld	r28, X+
      d6:	dd 91       	ld	r29, X+
      d8:	c1 93       	st	Z+, r28
      da:	d1 93       	st	Z+, r29
      dc:	22 50       	subi	r18, 0x02	; 2
      de:	31 09       	sbc	r19, r1
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	b8 f7       	brcc	.-18     	; 0xd4 <mem_cpy+0x10>
      e6:	9a 01       	movw	r18, r20
      e8:	22 50       	subi	r18, 0x02	; 2
      ea:	31 09       	sbc	r19, r1
      ec:	2e 7f       	andi	r18, 0xFE	; 254
      ee:	2e 5f       	subi	r18, 0xFE	; 254
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	82 0f       	add	r24, r18
      f4:	93 1f       	adc	r25, r19
      f6:	62 0f       	add	r22, r18
      f8:	73 1f       	adc	r23, r19
      fa:	41 70       	andi	r20, 0x01	; 1
      fc:	55 27       	eor	r21, r21
      fe:	41 15       	cp	r20, r1
     100:	51 05       	cpc	r21, r1
     102:	49 f0       	breq	.+18     	; 0x116 <mem_cpy+0x52>
     104:	db 01       	movw	r26, r22
     106:	fc 01       	movw	r30, r24
     108:	48 0f       	add	r20, r24
     10a:	59 1f       	adc	r21, r25
     10c:	9d 91       	ld	r25, X+
     10e:	91 93       	st	Z+, r25
     110:	e4 17       	cp	r30, r20
     112:	f5 07       	cpc	r31, r21
     114:	d9 f7       	brne	.-10     	; 0x10c <mem_cpy+0x48>
     116:	df 91       	pop	r29
     118:	cf 91       	pop	r28
     11a:	08 95       	ret

0000011c <ld_clust>:
     11c:	0f 93       	push	r16
     11e:	1f 93       	push	r17
     120:	dc 01       	movw	r26, r24
     122:	fb 01       	movw	r30, r22
     124:	62 8d       	ldd	r22, Z+26	; 0x1a
     126:	73 8d       	ldd	r23, Z+27	; 0x1b
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	2c 91       	ld	r18, X
     12e:	23 30       	cpi	r18, 0x03	; 3
     130:	59 f4       	brne	.+22     	; 0x148 <ld_clust+0x2c>
     132:	04 89       	ldd	r16, Z+20	; 0x14
     134:	15 89       	ldd	r17, Z+21	; 0x15
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	98 01       	movw	r18, r16
     13c:	11 27       	eor	r17, r17
     13e:	00 27       	eor	r16, r16
     140:	60 2b       	or	r22, r16
     142:	71 2b       	or	r23, r17
     144:	82 2b       	or	r24, r18
     146:	93 2b       	or	r25, r19
     148:	1f 91       	pop	r17
     14a:	0f 91       	pop	r16
     14c:	08 95       	ret

0000014e <check_fs>:
     14e:	0f 93       	push	r16
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	ec 01       	movw	r28, r24
     156:	9a 01       	movw	r18, r20
     158:	ab 01       	movw	r20, r22
     15a:	bc 01       	movw	r22, r24
     15c:	6a 5c       	subi	r22, 0xCA	; 202
     15e:	7f 4f       	sbci	r23, 0xFF	; 255
     160:	01 e0       	ldi	r16, 0x01	; 1
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	0e 94 96 11 	call	0x232c	; 0x232c <disk_read>
     168:	81 11       	cpse	r24, r1
     16a:	23 c0       	rjmp	.+70     	; 0x1b2 <check_fs+0x64>
     16c:	fe 01       	movw	r30, r28
     16e:	ec 5c       	subi	r30, 0xCC	; 204
     170:	fd 4f       	sbci	r31, 0xFD	; 253
     172:	80 81       	ld	r24, Z
     174:	91 81       	ldd	r25, Z+1	; 0x01
     176:	85 35       	cpi	r24, 0x55	; 85
     178:	9a 4a       	sbci	r25, 0xAA	; 170
     17a:	e9 f4       	brne	.+58     	; 0x1b6 <check_fs+0x68>
     17c:	e8 5c       	subi	r30, 0xC8	; 200
     17e:	f1 40       	sbci	r31, 0x01	; 1
     180:	80 81       	ld	r24, Z
     182:	91 81       	ldd	r25, Z+1	; 0x01
     184:	a2 81       	ldd	r26, Z+2	; 0x02
     186:	b3 81       	ldd	r27, Z+3	; 0x03
     188:	bb 27       	eor	r27, r27
     18a:	86 34       	cpi	r24, 0x46	; 70
     18c:	91 44       	sbci	r25, 0x41	; 65
     18e:	a4 45       	sbci	r26, 0x54	; 84
     190:	b1 05       	cpc	r27, r1
     192:	99 f0       	breq	.+38     	; 0x1ba <check_fs+0x6c>
     194:	c8 57       	subi	r28, 0x78	; 120
     196:	df 4f       	sbci	r29, 0xFF	; 255
     198:	48 81       	ld	r20, Y
     19a:	59 81       	ldd	r21, Y+1	; 0x01
     19c:	6a 81       	ldd	r22, Y+2	; 0x02
     19e:	7b 81       	ldd	r23, Y+3	; 0x03
     1a0:	77 27       	eor	r23, r23
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	46 34       	cpi	r20, 0x46	; 70
     1a6:	51 44       	sbci	r21, 0x41	; 65
     1a8:	64 45       	sbci	r22, 0x54	; 84
     1aa:	71 05       	cpc	r23, r1
     1ac:	39 f4       	brne	.+14     	; 0x1bc <check_fs+0x6e>
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	05 c0       	rjmp	.+10     	; 0x1bc <check_fs+0x6e>
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	03 c0       	rjmp	.+6      	; 0x1bc <check_fs+0x6e>
     1b6:	82 e0       	ldi	r24, 0x02	; 2
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <check_fs+0x6e>
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	0f 91       	pop	r16
     1c2:	08 95       	ret

000001c4 <sync_window>:
     1c4:	8f 92       	push	r8
     1c6:	9f 92       	push	r9
     1c8:	af 92       	push	r10
     1ca:	bf 92       	push	r11
     1cc:	cf 92       	push	r12
     1ce:	df 92       	push	r13
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	fc 01       	movw	r30, r24
     1dc:	24 81       	ldd	r18, Z+4	; 0x04
     1de:	22 23       	and	r18, r18
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <sync_window+0x20>
     1e2:	47 c0       	rjmp	.+142    	; 0x272 <sync_window+0xae>
     1e4:	ec 01       	movw	r28, r24
     1e6:	c2 a8       	ldd	r12, Z+50	; 0x32
     1e8:	d3 a8       	ldd	r13, Z+51	; 0x33
     1ea:	e4 a8       	ldd	r14, Z+52	; 0x34
     1ec:	f5 a8       	ldd	r15, Z+53	; 0x35
     1ee:	4c 01       	movw	r8, r24
     1f0:	f6 e3       	ldi	r31, 0x36	; 54
     1f2:	8f 0e       	add	r8, r31
     1f4:	91 1c       	adc	r9, r1
     1f6:	01 e0       	ldi	r16, 0x01	; 1
     1f8:	a7 01       	movw	r20, r14
     1fa:	96 01       	movw	r18, r12
     1fc:	b4 01       	movw	r22, r8
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <disk_write>
     204:	81 11       	cpse	r24, r1
     206:	37 c0       	rjmp	.+110    	; 0x276 <sync_window+0xb2>
     208:	1c 82       	std	Y+4, r1	; 0x04
     20a:	8e a1       	ldd	r24, Y+38	; 0x26
     20c:	9f a1       	ldd	r25, Y+39	; 0x27
     20e:	a8 a5       	ldd	r26, Y+40	; 0x28
     210:	b9 a5       	ldd	r27, Y+41	; 0x29
     212:	c8 16       	cp	r12, r24
     214:	d9 06       	cpc	r13, r25
     216:	ea 06       	cpc	r14, r26
     218:	fb 06       	cpc	r15, r27
     21a:	78 f1       	brcs	.+94     	; 0x27a <sync_window+0xb6>
     21c:	4e 8d       	ldd	r20, Y+30	; 0x1e
     21e:	5f 8d       	ldd	r21, Y+31	; 0x1f
     220:	68 a1       	ldd	r22, Y+32	; 0x20
     222:	79 a1       	ldd	r23, Y+33	; 0x21
     224:	84 0f       	add	r24, r20
     226:	95 1f       	adc	r25, r21
     228:	a6 1f       	adc	r26, r22
     22a:	b7 1f       	adc	r27, r23
     22c:	c8 16       	cp	r12, r24
     22e:	d9 06       	cpc	r13, r25
     230:	ea 06       	cpc	r14, r26
     232:	fb 06       	cpc	r15, r27
     234:	20 f5       	brcc	.+72     	; 0x27e <sync_window+0xba>
     236:	ab 80       	ldd	r10, Y+3	; 0x03
     238:	b1 2c       	mov	r11, r1
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	a8 16       	cp	r10, r24
     23e:	b1 04       	cpc	r11, r1
     240:	00 f1       	brcs	.+64     	; 0x282 <sync_window+0xbe>
     242:	8e 8d       	ldd	r24, Y+30	; 0x1e
     244:	9f 8d       	ldd	r25, Y+31	; 0x1f
     246:	a8 a1       	ldd	r26, Y+32	; 0x20
     248:	b9 a1       	ldd	r27, Y+33	; 0x21
     24a:	c8 0e       	add	r12, r24
     24c:	d9 1e       	adc	r13, r25
     24e:	ea 1e       	adc	r14, r26
     250:	fb 1e       	adc	r15, r27
     252:	01 e0       	ldi	r16, 0x01	; 1
     254:	a7 01       	movw	r20, r14
     256:	96 01       	movw	r18, r12
     258:	b4 01       	movw	r22, r8
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <disk_write>
     260:	e1 e0       	ldi	r30, 0x01	; 1
     262:	ae 1a       	sub	r10, r30
     264:	b1 08       	sbc	r11, r1
     266:	f1 e0       	ldi	r31, 0x01	; 1
     268:	af 16       	cp	r10, r31
     26a:	b1 04       	cpc	r11, r1
     26c:	51 f7       	brne	.-44     	; 0x242 <sync_window+0x7e>
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	09 c0       	rjmp	.+18     	; 0x284 <sync_window+0xc0>
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	07 c0       	rjmp	.+14     	; 0x284 <sync_window+0xc0>
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	05 c0       	rjmp	.+10     	; 0x284 <sync_window+0xc0>
     27a:	80 e0       	ldi	r24, 0x00	; 0
     27c:	03 c0       	rjmp	.+6      	; 0x284 <sync_window+0xc0>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	01 c0       	rjmp	.+2      	; 0x284 <sync_window+0xc0>
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	0f 91       	pop	r16
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	df 90       	pop	r13
     290:	cf 90       	pop	r12
     292:	bf 90       	pop	r11
     294:	af 90       	pop	r10
     296:	9f 90       	pop	r9
     298:	8f 90       	pop	r8
     29a:	08 95       	ret

0000029c <move_window>:
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	fc 01       	movw	r30, r24
     2ae:	c2 a8       	ldd	r12, Z+50	; 0x32
     2b0:	d3 a8       	ldd	r13, Z+51	; 0x33
     2b2:	e4 a8       	ldd	r14, Z+52	; 0x34
     2b4:	f5 a8       	ldd	r15, Z+53	; 0x35
     2b6:	c4 16       	cp	r12, r20
     2b8:	d5 06       	cpc	r13, r21
     2ba:	e6 06       	cpc	r14, r22
     2bc:	f7 06       	cpc	r15, r23
     2be:	c1 f0       	breq	.+48     	; 0x2f0 <move_window+0x54>
     2c0:	6a 01       	movw	r12, r20
     2c2:	7b 01       	movw	r14, r22
     2c4:	ec 01       	movw	r28, r24
     2c6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sync_window>
     2ca:	18 2f       	mov	r17, r24
     2cc:	81 11       	cpse	r24, r1
     2ce:	12 c0       	rjmp	.+36     	; 0x2f4 <move_window+0x58>
     2d0:	01 e0       	ldi	r16, 0x01	; 1
     2d2:	a7 01       	movw	r20, r14
     2d4:	96 01       	movw	r18, r12
     2d6:	be 01       	movw	r22, r28
     2d8:	6a 5c       	subi	r22, 0xCA	; 202
     2da:	7f 4f       	sbci	r23, 0xFF	; 255
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	0e 94 96 11 	call	0x232c	; 0x232c <disk_read>
     2e2:	81 11       	cpse	r24, r1
     2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <move_window+0x5c>
     2e6:	ca aa       	std	Y+50, r12	; 0x32
     2e8:	db aa       	std	Y+51, r13	; 0x33
     2ea:	ec aa       	std	Y+52, r14	; 0x34
     2ec:	fd aa       	std	Y+53, r15	; 0x35
     2ee:	05 c0       	rjmp	.+10     	; 0x2fa <move_window+0x5e>
     2f0:	10 e0       	ldi	r17, 0x00	; 0
     2f2:	03 c0       	rjmp	.+6      	; 0x2fa <move_window+0x5e>
     2f4:	11 e0       	ldi	r17, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <move_window+0x5e>
     2f8:	11 e0       	ldi	r17, 0x01	; 1
     2fa:	81 2f       	mov	r24, r17
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	08 95       	ret

0000030e <validate>:
     30e:	00 97       	sbiw	r24, 0x00	; 0
     310:	c9 f0       	breq	.+50     	; 0x344 <validate+0x36>
     312:	dc 01       	movw	r26, r24
     314:	ed 91       	ld	r30, X+
     316:	fc 91       	ld	r31, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	30 97       	sbiw	r30, 0x00	; 0
     31c:	a9 f0       	breq	.+42     	; 0x348 <validate+0x3a>
     31e:	20 81       	ld	r18, Z
     320:	22 23       	and	r18, r18
     322:	a1 f0       	breq	.+40     	; 0x34c <validate+0x3e>
     324:	26 81       	ldd	r18, Z+6	; 0x06
     326:	37 81       	ldd	r19, Z+7	; 0x07
     328:	12 96       	adiw	r26, 0x02	; 2
     32a:	8d 91       	ld	r24, X+
     32c:	9c 91       	ld	r25, X
     32e:	13 97       	sbiw	r26, 0x03	; 3
     330:	28 17       	cp	r18, r24
     332:	39 07       	cpc	r19, r25
     334:	69 f4       	brne	.+26     	; 0x350 <validate+0x42>
     336:	81 81       	ldd	r24, Z+1	; 0x01
     338:	0e 94 8f 11 	call	0x231e	; 0x231e <disk_status>
     33c:	80 fd       	sbrc	r24, 0
     33e:	0a c0       	rjmp	.+20     	; 0x354 <validate+0x46>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	08 95       	ret
     344:	89 e0       	ldi	r24, 0x09	; 9
     346:	08 95       	ret
     348:	89 e0       	ldi	r24, 0x09	; 9
     34a:	08 95       	ret
     34c:	89 e0       	ldi	r24, 0x09	; 9
     34e:	08 95       	ret
     350:	89 e0       	ldi	r24, 0x09	; 9
     352:	08 95       	ret
     354:	83 e0       	ldi	r24, 0x03	; 3
     356:	08 95       	ret

00000358 <chk_mounted>:
     358:	2f 92       	push	r2
     35a:	3f 92       	push	r3
     35c:	4f 92       	push	r4
     35e:	5f 92       	push	r5
     360:	6f 92       	push	r6
     362:	7f 92       	push	r7
     364:	8f 92       	push	r8
     366:	9f 92       	push	r9
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	2e 97       	sbiw	r28, 0x0e	; 14
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	dc 01       	movw	r26, r24
     38e:	ed 91       	ld	r30, X+
     390:	fc 91       	ld	r31, X
     392:	11 97       	sbiw	r26, 0x01	; 1
     394:	20 81       	ld	r18, Z
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	20 53       	subi	r18, 0x30	; 48
     39a:	31 09       	sbc	r19, r1
     39c:	2a 30       	cpi	r18, 0x0A	; 10
     39e:	31 05       	cpc	r19, r1
     3a0:	38 f4       	brcc	.+14     	; 0x3b0 <chk_mounted+0x58>
     3a2:	51 81       	ldd	r21, Z+1	; 0x01
     3a4:	5a 33       	cpi	r21, 0x3A	; 58
     3a6:	21 f4       	brne	.+8      	; 0x3b0 <chk_mounted+0x58>
     3a8:	32 96       	adiw	r30, 0x02	; 2
     3aa:	ed 93       	st	X+, r30
     3ac:	fc 93       	st	X, r31
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <chk_mounted+0x5e>
     3b0:	20 91 28 01 	lds	r18, 0x0128
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	fb 01       	movw	r30, r22
     3b8:	11 82       	std	Z+1, r1	; 0x01
     3ba:	10 82       	st	Z, r1
     3bc:	23 2b       	or	r18, r19
     3be:	09 f0       	breq	.+2      	; 0x3c2 <chk_mounted+0x6a>
     3c0:	0a c2       	rjmp	.+1044   	; 0x7d6 <__FUSE_REGION_LENGTH__+0x3d6>
     3c2:	20 91 2b 01 	lds	r18, 0x012B
     3c6:	30 91 2c 01 	lds	r19, 0x012C
     3ca:	3e 87       	std	Y+14, r19	; 0x0e
     3cc:	2d 87       	std	Y+13, r18	; 0x0d
     3ce:	21 15       	cp	r18, r1
     3d0:	31 05       	cpc	r19, r1
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <chk_mounted+0x7e>
     3d4:	02 c2       	rjmp	.+1028   	; 0x7da <__FUSE_REGION_LENGTH__+0x3da>
     3d6:	14 2f       	mov	r17, r20
     3d8:	31 83       	std	Z+1, r19	; 0x01
     3da:	20 83       	st	Z, r18
     3dc:	d9 01       	movw	r26, r18
     3de:	8c 91       	ld	r24, X
     3e0:	88 23       	and	r24, r24
     3e2:	69 f0       	breq	.+26     	; 0x3fe <chk_mounted+0xa6>
     3e4:	11 96       	adiw	r26, 0x01	; 1
     3e6:	8c 91       	ld	r24, X
     3e8:	0e 94 8f 11 	call	0x231e	; 0x231e <disk_status>
     3ec:	80 fd       	sbrc	r24, 0
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <chk_mounted+0xa6>
     3f0:	11 23       	and	r17, r17
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <chk_mounted+0x9e>
     3f4:	f4 c1       	rjmp	.+1000   	; 0x7de <__FUSE_REGION_LENGTH__+0x3de>
     3f6:	82 ff       	sbrs	r24, 2
     3f8:	f4 c1       	rjmp	.+1000   	; 0x7e2 <__FUSE_REGION_LENGTH__+0x3e2>
     3fa:	8a e0       	ldi	r24, 0x0A	; 10
     3fc:	8e c2       	rjmp	.+1308   	; 0x91a <__stack+0x1b>
     3fe:	ed 85       	ldd	r30, Y+13	; 0x0d
     400:	fe 85       	ldd	r31, Y+14	; 0x0e
     402:	10 82       	st	Z, r1
     404:	11 82       	std	Z+1, r1	; 0x01
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 bb 10 	call	0x2176	; 0x2176 <disk_initialize>
     40c:	80 fd       	sbrc	r24, 0
     40e:	eb c1       	rjmp	.+982    	; 0x7e6 <__FUSE_REGION_LENGTH__+0x3e6>
     410:	11 23       	and	r17, r17
     412:	11 f0       	breq	.+4      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     414:	82 fd       	sbrc	r24, 2
     416:	e9 c1       	rjmp	.+978    	; 0x7ea <__FUSE_REGION_LENGTH__+0x3ea>
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	ba 01       	movw	r22, r20
     41e:	8d 85       	ldd	r24, Y+13	; 0x0d
     420:	9e 85       	ldd	r25, Y+14	; 0x0e
     422:	0e 94 a7 00 	call	0x14e	; 0x14e <check_fs>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	b9 f4       	brne	.+46     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     42a:	ed 85       	ldd	r30, Y+13	; 0x0d
     42c:	fe 85       	ldd	r31, Y+14	; 0x0e
     42e:	e8 50       	subi	r30, 0x08	; 8
     430:	fe 4f       	sbci	r31, 0xFE	; 254
     432:	80 81       	ld	r24, Z
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
     438:	da c1       	rjmp	.+948    	; 0x7ee <__FUSE_REGION_LENGTH__+0x3ee>
     43a:	ed 85       	ldd	r30, Y+13	; 0x0d
     43c:	fe 85       	ldd	r31, Y+14	; 0x0e
     43e:	e4 50       	subi	r30, 0x04	; 4
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	c0 80       	ld	r12, Z
     444:	d1 80       	ldd	r13, Z+1	; 0x01
     446:	e2 80       	ldd	r14, Z+2	; 0x02
     448:	f3 80       	ldd	r15, Z+3	; 0x03
     44a:	b7 01       	movw	r22, r14
     44c:	a6 01       	movw	r20, r12
     44e:	8d 85       	ldd	r24, Y+13	; 0x0d
     450:	9e 85       	ldd	r25, Y+14	; 0x0e
     452:	0e 94 a7 00 	call	0x14e	; 0x14e <check_fs>
     456:	03 c0       	rjmp	.+6      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
     458:	c1 2c       	mov	r12, r1
     45a:	d1 2c       	mov	r13, r1
     45c:	76 01       	movw	r14, r12
     45e:	83 30       	cpi	r24, 0x03	; 3
     460:	09 f4       	brne	.+2      	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
     462:	c7 c1       	rjmp	.+910    	; 0x7f2 <__FUSE_REGION_LENGTH__+0x3f2>
     464:	81 11       	cpse	r24, r1
     466:	c7 c1       	rjmp	.+910    	; 0x7f6 <__FUSE_REGION_LENGTH__+0x3f6>
     468:	ed 85       	ldd	r30, Y+13	; 0x0d
     46a:	fe 85       	ldd	r31, Y+14	; 0x0e
     46c:	ef 5b       	subi	r30, 0xBF	; 191
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	80 81       	ld	r24, Z
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	81 15       	cp	r24, r1
     476:	92 40       	sbci	r25, 0x02	; 2
     478:	09 f0       	breq	.+2      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     47a:	bf c1       	rjmp	.+894    	; 0x7fa <__FUSE_REGION_LENGTH__+0x3fa>
     47c:	ed 85       	ldd	r30, Y+13	; 0x0d
     47e:	fe 85       	ldd	r31, Y+14	; 0x0e
     480:	e4 5b       	subi	r30, 0xB4	; 180
     482:	ff 4f       	sbci	r31, 0xFF	; 255
     484:	40 80       	ld	r4, Z
     486:	51 80       	ldd	r5, Z+1	; 0x01
     488:	61 2c       	mov	r6, r1
     48a:	71 2c       	mov	r7, r1
     48c:	41 14       	cp	r4, r1
     48e:	51 04       	cpc	r5, r1
     490:	61 04       	cpc	r6, r1
     492:	71 04       	cpc	r7, r1
     494:	41 f4       	brne	.+16     	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
     496:	ed 85       	ldd	r30, Y+13	; 0x0d
     498:	fe 85       	ldd	r31, Y+14	; 0x0e
     49a:	e6 5a       	subi	r30, 0xA6	; 166
     49c:	ff 4f       	sbci	r31, 0xFF	; 255
     49e:	40 80       	ld	r4, Z
     4a0:	51 80       	ldd	r5, Z+1	; 0x01
     4a2:	62 80       	ldd	r6, Z+2	; 0x02
     4a4:	73 80       	ldd	r7, Z+3	; 0x03
     4a6:	ad 85       	ldd	r26, Y+13	; 0x0d
     4a8:	be 85       	ldd	r27, Y+14	; 0x0e
     4aa:	5e 96       	adiw	r26, 0x1e	; 30
     4ac:	4d 92       	st	X+, r4
     4ae:	5d 92       	st	X+, r5
     4b0:	6d 92       	st	X+, r6
     4b2:	7c 92       	st	X, r7
     4b4:	91 97       	sbiw	r26, 0x21	; 33
     4b6:	fd 01       	movw	r30, r26
     4b8:	ea 5b       	subi	r30, 0xBA	; 186
     4ba:	ff 4f       	sbci	r31, 0xFF	; 255
     4bc:	a0 81       	ld	r26, Z
     4be:	ed 85       	ldd	r30, Y+13	; 0x0d
     4c0:	fe 85       	ldd	r31, Y+14	; 0x0e
     4c2:	a3 83       	std	Z+3, r26	; 0x03
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	8a 0f       	add	r24, r26
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	08 f0       	brcs	.+2      	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
     4cc:	98 c1       	rjmp	.+816    	; 0x7fe <__FUSE_REGION_LENGTH__+0x3fe>
     4ce:	ed 5b       	subi	r30, 0xBD	; 189
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	10 81       	ld	r17, Z
     4d4:	ed 85       	ldd	r30, Y+13	; 0x0d
     4d6:	fe 85       	ldd	r31, Y+14	; 0x0e
     4d8:	12 83       	std	Z+2, r17	; 0x02
     4da:	11 23       	and	r17, r17
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
     4de:	91 c1       	rjmp	.+802    	; 0x802 <__FUSE_REGION_LENGTH__+0x402>
     4e0:	81 2f       	mov	r24, r17
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	9c 01       	movw	r18, r24
     4e6:	21 50       	subi	r18, 0x01	; 1
     4e8:	31 09       	sbc	r19, r1
     4ea:	82 23       	and	r24, r18
     4ec:	93 23       	and	r25, r19
     4ee:	89 2b       	or	r24, r25
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
     4f2:	89 c1       	rjmp	.+786    	; 0x806 <__FUSE_REGION_LENGTH__+0x406>
     4f4:	e9 5b       	subi	r30, 0xB9	; 185
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	20 80       	ld	r2, Z
     4fa:	31 80       	ldd	r3, Z+1	; 0x01
     4fc:	ed 85       	ldd	r30, Y+13	; 0x0d
     4fe:	fe 85       	ldd	r31, Y+14	; 0x0e
     500:	31 86       	std	Z+9, r3	; 0x09
     502:	20 86       	std	Z+8, r2	; 0x08
     504:	c1 01       	movw	r24, r2
     506:	8f 70       	andi	r24, 0x0F	; 15
     508:	99 27       	eor	r25, r25
     50a:	89 2b       	or	r24, r25
     50c:	09 f0       	breq	.+2      	; 0x510 <__FUSE_REGION_LENGTH__+0x110>
     50e:	7d c1       	rjmp	.+762    	; 0x80a <__FUSE_REGION_LENGTH__+0x40a>
     510:	e7 5b       	subi	r30, 0xB7	; 183
     512:	ff 4f       	sbci	r31, 0xFF	; 255
     514:	80 80       	ld	r8, Z
     516:	91 80       	ldd	r9, Z+1	; 0x01
     518:	a1 2c       	mov	r10, r1
     51a:	b1 2c       	mov	r11, r1
     51c:	81 14       	cp	r8, r1
     51e:	91 04       	cpc	r9, r1
     520:	a1 04       	cpc	r10, r1
     522:	b1 04       	cpc	r11, r1
     524:	41 f4       	brne	.+16     	; 0x536 <__FUSE_REGION_LENGTH__+0x136>
     526:	ed 85       	ldd	r30, Y+13	; 0x0d
     528:	fe 85       	ldd	r31, Y+14	; 0x0e
     52a:	ea 5a       	subi	r30, 0xAA	; 170
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 80       	ld	r8, Z
     530:	91 80       	ldd	r9, Z+1	; 0x01
     532:	a2 80       	ldd	r10, Z+2	; 0x02
     534:	b3 80       	ldd	r11, Z+3	; 0x03
     536:	ed 85       	ldd	r30, Y+13	; 0x0d
     538:	fe 85       	ldd	r31, Y+14	; 0x0e
     53a:	ec 5b       	subi	r30, 0xBC	; 188
     53c:	ff 4f       	sbci	r31, 0xFF	; 255
     53e:	20 81       	ld	r18, Z
     540:	31 81       	ldd	r19, Z+1	; 0x01
     542:	3a 83       	std	Y+2, r19	; 0x02
     544:	29 83       	std	Y+1, r18	; 0x01
     546:	23 2b       	or	r18, r19
     548:	09 f4       	brne	.+2      	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
     54a:	61 c1       	rjmp	.+706    	; 0x80e <__FUSE_REGION_LENGTH__+0x40e>
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	a3 01       	movw	r20, r6
     550:	92 01       	movw	r18, r4
     552:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__muluhisi3>
     556:	69 87       	std	Y+9, r22	; 0x09
     558:	7a 87       	std	Y+10, r23	; 0x0a
     55a:	8b 87       	std	Y+11, r24	; 0x0b
     55c:	9c 87       	std	Y+12, r25	; 0x0c
     55e:	a9 81       	ldd	r26, Y+1	; 0x01
     560:	ba 81       	ldd	r27, Y+2	; 0x02
     562:	cd 01       	movw	r24, r26
     564:	a0 e0       	ldi	r26, 0x00	; 0
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	8d 83       	std	Y+5, r24	; 0x05
     56a:	9e 83       	std	Y+6, r25	; 0x06
     56c:	af 83       	std	Y+7, r26	; 0x07
     56e:	b8 87       	std	Y+8, r27	; 0x08
     570:	c1 01       	movw	r24, r2
     572:	92 95       	swap	r25
     574:	82 95       	swap	r24
     576:	8f 70       	andi	r24, 0x0F	; 15
     578:	89 27       	eor	r24, r25
     57a:	9f 70       	andi	r25, 0x0F	; 15
     57c:	89 27       	eor	r24, r25
     57e:	4d 81       	ldd	r20, Y+5	; 0x05
     580:	5e 81       	ldd	r21, Y+6	; 0x06
     582:	6f 81       	ldd	r22, Y+7	; 0x07
     584:	78 85       	ldd	r23, Y+8	; 0x08
     586:	48 0f       	add	r20, r24
     588:	59 1f       	adc	r21, r25
     58a:	61 1d       	adc	r22, r1
     58c:	71 1d       	adc	r23, r1
     58e:	89 85       	ldd	r24, Y+9	; 0x09
     590:	9a 85       	ldd	r25, Y+10	; 0x0a
     592:	ab 85       	ldd	r26, Y+11	; 0x0b
     594:	bc 85       	ldd	r27, Y+12	; 0x0c
     596:	84 0f       	add	r24, r20
     598:	95 1f       	adc	r25, r21
     59a:	a6 1f       	adc	r26, r22
     59c:	b7 1f       	adc	r27, r23
     59e:	89 83       	std	Y+1, r24	; 0x01
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	ab 83       	std	Y+3, r26	; 0x03
     5a4:	bc 83       	std	Y+4, r27	; 0x04
     5a6:	88 16       	cp	r8, r24
     5a8:	99 06       	cpc	r9, r25
     5aa:	aa 06       	cpc	r10, r26
     5ac:	bb 06       	cpc	r11, r27
     5ae:	08 f4       	brcc	.+2      	; 0x5b2 <__FUSE_REGION_LENGTH__+0x1b2>
     5b0:	30 c1       	rjmp	.+608    	; 0x812 <__FUSE_REGION_LENGTH__+0x412>
     5b2:	c5 01       	movw	r24, r10
     5b4:	b4 01       	movw	r22, r8
     5b6:	29 81       	ldd	r18, Y+1	; 0x01
     5b8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ba:	4b 81       	ldd	r20, Y+3	; 0x03
     5bc:	5c 81       	ldd	r21, Y+4	; 0x04
     5be:	62 1b       	sub	r22, r18
     5c0:	73 0b       	sbc	r23, r19
     5c2:	84 0b       	sbc	r24, r20
     5c4:	95 0b       	sbc	r25, r21
     5c6:	21 2f       	mov	r18, r17
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__udivmodsi4>
     5d2:	da 01       	movw	r26, r20
     5d4:	c9 01       	movw	r24, r18
     5d6:	21 15       	cp	r18, r1
     5d8:	31 05       	cpc	r19, r1
     5da:	41 05       	cpc	r20, r1
     5dc:	51 05       	cpc	r21, r1
     5de:	09 f4       	brne	.+2      	; 0x5e2 <__FUSE_REGION_LENGTH__+0x1e2>
     5e0:	1a c1       	rjmp	.+564    	; 0x816 <__FUSE_REGION_LENGTH__+0x416>
     5e2:	26 3f       	cpi	r18, 0xF6	; 246
     5e4:	6f e0       	ldi	r22, 0x0F	; 15
     5e6:	36 07       	cpc	r19, r22
     5e8:	41 05       	cpc	r20, r1
     5ea:	51 05       	cpc	r21, r1
     5ec:	10 f0       	brcs	.+4      	; 0x5f2 <__FUSE_REGION_LENGTH__+0x1f2>
     5ee:	12 e0       	ldi	r17, 0x02	; 2
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <__FUSE_REGION_LENGTH__+0x1f4>
     5f2:	11 e0       	ldi	r17, 0x01	; 1
     5f4:	86 3f       	cpi	r24, 0xF6	; 246
     5f6:	9f 4f       	sbci	r25, 0xFF	; 255
     5f8:	a1 05       	cpc	r26, r1
     5fa:	b1 05       	cpc	r27, r1
     5fc:	08 f0       	brcs	.+2      	; 0x600 <__FUSE_REGION_LENGTH__+0x200>
     5fe:	15 c1       	rjmp	.+554    	; 0x82a <__FUSE_REGION_LENGTH__+0x42a>
     600:	49 01       	movw	r8, r18
     602:	5a 01       	movw	r10, r20
     604:	f2 e0       	ldi	r31, 0x02	; 2
     606:	8f 0e       	add	r8, r31
     608:	91 1c       	adc	r9, r1
     60a:	a1 1c       	adc	r10, r1
     60c:	b1 1c       	adc	r11, r1
     60e:	ad 85       	ldd	r26, Y+13	; 0x0d
     610:	be 85       	ldd	r27, Y+14	; 0x0e
     612:	5a 96       	adiw	r26, 0x1a	; 26
     614:	8d 92       	st	X+, r8
     616:	9d 92       	st	X+, r9
     618:	ad 92       	st	X+, r10
     61a:	bc 92       	st	X, r11
     61c:	5d 97       	sbiw	r26, 0x1d	; 29
     61e:	fd 01       	movw	r30, r26
     620:	c2 a2       	std	Z+34, r12	; 0x22
     622:	d3 a2       	std	Z+35, r13	; 0x23
     624:	e4 a2       	std	Z+36, r14	; 0x24
     626:	f5 a2       	std	Z+37, r15	; 0x25
     628:	8d 81       	ldd	r24, Y+5	; 0x05
     62a:	9e 81       	ldd	r25, Y+6	; 0x06
     62c:	af 81       	ldd	r26, Y+7	; 0x07
     62e:	b8 85       	ldd	r27, Y+8	; 0x08
     630:	8c 0d       	add	r24, r12
     632:	9d 1d       	adc	r25, r13
     634:	ae 1d       	adc	r26, r14
     636:	bf 1d       	adc	r27, r15
     638:	86 a3       	std	Z+38, r24	; 0x26
     63a:	97 a3       	std	Z+39, r25	; 0x27
     63c:	a0 a7       	std	Z+40, r26	; 0x28
     63e:	b1 a7       	std	Z+41, r27	; 0x29
     640:	49 81       	ldd	r20, Y+1	; 0x01
     642:	5a 81       	ldd	r21, Y+2	; 0x02
     644:	6b 81       	ldd	r22, Y+3	; 0x03
     646:	7c 81       	ldd	r23, Y+4	; 0x04
     648:	4c 0d       	add	r20, r12
     64a:	5d 1d       	adc	r21, r13
     64c:	6e 1d       	adc	r22, r14
     64e:	7f 1d       	adc	r23, r15
     650:	46 a7       	std	Z+46, r20	; 0x2e
     652:	57 a7       	std	Z+47, r21	; 0x2f
     654:	60 ab       	std	Z+48, r22	; 0x30
     656:	71 ab       	std	Z+49, r23	; 0x31
     658:	13 30       	cpi	r17, 0x03	; 3
     65a:	79 f5       	brne	.+94     	; 0x6ba <__FUSE_REGION_LENGTH__+0x2ba>
     65c:	23 28       	or	r2, r3
     65e:	09 f0       	breq	.+2      	; 0x662 <__FUSE_REGION_LENGTH__+0x262>
     660:	dc c0       	rjmp	.+440    	; 0x81a <__FUSE_REGION_LENGTH__+0x41a>
     662:	ed 85       	ldd	r30, Y+13	; 0x0d
     664:	fe 85       	ldd	r31, Y+14	; 0x0e
     666:	ee 59       	subi	r30, 0x9E	; 158
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	80 81       	ld	r24, Z
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	a2 81       	ldd	r26, Z+2	; 0x02
     670:	b3 81       	ldd	r27, Z+3	; 0x03
     672:	ed 85       	ldd	r30, Y+13	; 0x0d
     674:	fe 85       	ldd	r31, Y+14	; 0x0e
     676:	82 a7       	std	Z+42, r24	; 0x2a
     678:	93 a7       	std	Z+43, r25	; 0x2b
     67a:	a4 a7       	std	Z+44, r26	; 0x2c
     67c:	b5 a7       	std	Z+45, r27	; 0x2d
     67e:	88 0c       	add	r8, r8
     680:	99 1c       	adc	r9, r9
     682:	aa 1c       	adc	r10, r10
     684:	bb 1c       	adc	r11, r11
     686:	88 0c       	add	r8, r8
     688:	99 1c       	adc	r9, r9
     68a:	aa 1c       	adc	r10, r10
     68c:	bb 1c       	adc	r11, r11
     68e:	ff ef       	ldi	r31, 0xFF	; 255
     690:	8f 0e       	add	r8, r31
     692:	f1 e0       	ldi	r31, 0x01	; 1
     694:	9f 1e       	adc	r9, r31
     696:	a1 1c       	adc	r10, r1
     698:	b1 1c       	adc	r11, r1
     69a:	07 2e       	mov	r0, r23
     69c:	79 e0       	ldi	r23, 0x09	; 9
     69e:	b6 94       	lsr	r11
     6a0:	a7 94       	ror	r10
     6a2:	97 94       	ror	r9
     6a4:	87 94       	ror	r8
     6a6:	7a 95       	dec	r23
     6a8:	d1 f7       	brne	.-12     	; 0x69e <__FUSE_REGION_LENGTH__+0x29e>
     6aa:	70 2d       	mov	r23, r0
     6ac:	48 14       	cp	r4, r8
     6ae:	59 04       	cpc	r5, r9
     6b0:	6a 04       	cpc	r6, r10
     6b2:	7b 04       	cpc	r7, r11
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <__FUSE_REGION_LENGTH__+0x2b8>
     6b6:	b3 c0       	rjmp	.+358    	; 0x81e <__FUSE_REGION_LENGTH__+0x41e>
     6b8:	06 c1       	rjmp	.+524    	; 0x8c6 <__FUSE_REGION_LENGTH__+0x4c6>
     6ba:	23 28       	or	r2, r3
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <__FUSE_REGION_LENGTH__+0x2c0>
     6be:	b1 c0       	rjmp	.+354    	; 0x822 <__FUSE_REGION_LENGTH__+0x422>
     6c0:	29 85       	ldd	r18, Y+9	; 0x09
     6c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6c4:	4b 85       	ldd	r20, Y+11	; 0x0b
     6c6:	5c 85       	ldd	r21, Y+12	; 0x0c
     6c8:	82 0f       	add	r24, r18
     6ca:	93 1f       	adc	r25, r19
     6cc:	a4 1f       	adc	r26, r20
     6ce:	b5 1f       	adc	r27, r21
     6d0:	ed 85       	ldd	r30, Y+13	; 0x0d
     6d2:	fe 85       	ldd	r31, Y+14	; 0x0e
     6d4:	82 a7       	std	Z+42, r24	; 0x2a
     6d6:	93 a7       	std	Z+43, r25	; 0x2b
     6d8:	a4 a7       	std	Z+44, r26	; 0x2c
     6da:	b5 a7       	std	Z+45, r27	; 0x2d
     6dc:	12 30       	cpi	r17, 0x02	; 2
     6de:	29 f4       	brne	.+10     	; 0x6ea <__FUSE_REGION_LENGTH__+0x2ea>
     6e0:	88 0c       	add	r8, r8
     6e2:	99 1c       	adc	r9, r9
     6e4:	aa 1c       	adc	r10, r10
     6e6:	bb 1c       	adc	r11, r11
     6e8:	d8 c0       	rjmp	.+432    	; 0x89a <__FUSE_REGION_LENGTH__+0x49a>
     6ea:	a3 e0       	ldi	r26, 0x03	; 3
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	a5 01       	movw	r20, r10
     6f0:	94 01       	movw	r18, r8
     6f2:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__muluhisi3>
     6f6:	dc 01       	movw	r26, r24
     6f8:	cb 01       	movw	r24, r22
     6fa:	b6 95       	lsr	r27
     6fc:	a7 95       	ror	r26
     6fe:	97 95       	ror	r25
     700:	87 95       	ror	r24
     702:	f1 e0       	ldi	r31, 0x01	; 1
     704:	8f 22       	and	r8, r31
     706:	99 24       	eor	r9, r9
     708:	aa 24       	eor	r10, r10
     70a:	bb 24       	eor	r11, r11
     70c:	88 0e       	add	r8, r24
     70e:	99 1e       	adc	r9, r25
     710:	aa 1e       	adc	r10, r26
     712:	bb 1e       	adc	r11, r27
     714:	c2 c0       	rjmp	.+388    	; 0x89a <__FUSE_REGION_LENGTH__+0x49a>
     716:	ed 85       	ldd	r30, Y+13	; 0x0d
     718:	fe 85       	ldd	r31, Y+14	; 0x0e
     71a:	ec 5c       	subi	r30, 0xCC	; 204
     71c:	fd 4f       	sbci	r31, 0xFD	; 253
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	85 35       	cpi	r24, 0x55	; 85
     724:	9a 4a       	sbci	r25, 0xAA	; 170
     726:	a1 f5       	brne	.+104    	; 0x790 <__FUSE_REGION_LENGTH__+0x390>
     728:	ed 85       	ldd	r30, Y+13	; 0x0d
     72a:	fe 85       	ldd	r31, Y+14	; 0x0e
     72c:	86 a9       	ldd	r24, Z+54	; 0x36
     72e:	97 a9       	ldd	r25, Z+55	; 0x37
     730:	a0 ad       	ldd	r26, Z+56	; 0x38
     732:	b1 ad       	ldd	r27, Z+57	; 0x39
     734:	82 35       	cpi	r24, 0x52	; 82
     736:	92 45       	sbci	r25, 0x52	; 82
     738:	a1 46       	sbci	r26, 0x61	; 97
     73a:	b1 44       	sbci	r27, 0x41	; 65
     73c:	59 f5       	brne	.+86     	; 0x794 <__FUSE_REGION_LENGTH__+0x394>
     73e:	ed 85       	ldd	r30, Y+13	; 0x0d
     740:	fe 85       	ldd	r31, Y+14	; 0x0e
     742:	e6 5e       	subi	r30, 0xE6	; 230
     744:	fd 4f       	sbci	r31, 0xFD	; 253
     746:	80 81       	ld	r24, Z
     748:	91 81       	ldd	r25, Z+1	; 0x01
     74a:	a2 81       	ldd	r26, Z+2	; 0x02
     74c:	b3 81       	ldd	r27, Z+3	; 0x03
     74e:	82 37       	cpi	r24, 0x72	; 114
     750:	92 47       	sbci	r25, 0x72	; 114
     752:	a1 44       	sbci	r26, 0x41	; 65
     754:	b1 46       	sbci	r27, 0x61	; 97
     756:	01 f5       	brne	.+64     	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
     758:	ed 85       	ldd	r30, Y+13	; 0x0d
     75a:	fe 85       	ldd	r31, Y+14	; 0x0e
     75c:	ee 5d       	subi	r30, 0xDE	; 222
     75e:	fd 4f       	sbci	r31, 0xFD	; 253
     760:	80 81       	ld	r24, Z
     762:	91 81       	ldd	r25, Z+1	; 0x01
     764:	a2 81       	ldd	r26, Z+2	; 0x02
     766:	b3 81       	ldd	r27, Z+3	; 0x03
     768:	ed 85       	ldd	r30, Y+13	; 0x0d
     76a:	fe 85       	ldd	r31, Y+14	; 0x0e
     76c:	82 87       	std	Z+10, r24	; 0x0a
     76e:	93 87       	std	Z+11, r25	; 0x0b
     770:	a4 87       	std	Z+12, r26	; 0x0c
     772:	b5 87       	std	Z+13, r27	; 0x0d
     774:	e2 5e       	subi	r30, 0xE2	; 226
     776:	fd 4f       	sbci	r31, 0xFD	; 253
     778:	80 81       	ld	r24, Z
     77a:	91 81       	ldd	r25, Z+1	; 0x01
     77c:	a2 81       	ldd	r26, Z+2	; 0x02
     77e:	b3 81       	ldd	r27, Z+3	; 0x03
     780:	ed 85       	ldd	r30, Y+13	; 0x0d
     782:	fe 85       	ldd	r31, Y+14	; 0x0e
     784:	86 87       	std	Z+14, r24	; 0x0e
     786:	97 87       	std	Z+15, r25	; 0x0f
     788:	a0 8b       	std	Z+16, r26	; 0x10
     78a:	b1 8b       	std	Z+17, r27	; 0x11
     78c:	13 e0       	ldi	r17, 0x03	; 3
     78e:	05 c0       	rjmp	.+10     	; 0x79a <__FUSE_REGION_LENGTH__+0x39a>
     790:	13 e0       	ldi	r17, 0x03	; 3
     792:	03 c0       	rjmp	.+6      	; 0x79a <__FUSE_REGION_LENGTH__+0x39a>
     794:	13 e0       	ldi	r17, 0x03	; 3
     796:	01 c0       	rjmp	.+2      	; 0x79a <__FUSE_REGION_LENGTH__+0x39a>
     798:	13 e0       	ldi	r17, 0x03	; 3
     79a:	ad 85       	ldd	r26, Y+13	; 0x0d
     79c:	be 85       	ldd	r27, Y+14	; 0x0e
     79e:	1c 93       	st	X, r17
     7a0:	80 91 29 01 	lds	r24, 0x0129
     7a4:	90 91 2a 01 	lds	r25, 0x012A
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	90 93 2a 01 	sts	0x012A, r25
     7ae:	80 93 29 01 	sts	0x0129, r24
     7b2:	17 96       	adiw	r26, 0x07	; 7
     7b4:	9c 93       	st	X, r25
     7b6:	8e 93       	st	-X, r24
     7b8:	16 97       	sbiw	r26, 0x06	; 6
     7ba:	fd 01       	movw	r30, r26
     7bc:	12 aa       	std	Z+50, r1	; 0x32
     7be:	13 aa       	std	Z+51, r1	; 0x33
     7c0:	14 aa       	std	Z+52, r1	; 0x34
     7c2:	15 aa       	std	Z+53, r1	; 0x35
     7c4:	14 82       	std	Z+4, r1	; 0x04
     7c6:	56 96       	adiw	r26, 0x16	; 22
     7c8:	1d 92       	st	X+, r1
     7ca:	1d 92       	st	X+, r1
     7cc:	1d 92       	st	X+, r1
     7ce:	1c 92       	st	X, r1
     7d0:	59 97       	sbiw	r26, 0x19	; 25
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	a2 c0       	rjmp	.+324    	; 0x91a <__stack+0x1b>
     7d6:	8b e0       	ldi	r24, 0x0B	; 11
     7d8:	a0 c0       	rjmp	.+320    	; 0x91a <__stack+0x1b>
     7da:	8c e0       	ldi	r24, 0x0C	; 12
     7dc:	9e c0       	rjmp	.+316    	; 0x91a <__stack+0x1b>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	9c c0       	rjmp	.+312    	; 0x91a <__stack+0x1b>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	9a c0       	rjmp	.+308    	; 0x91a <__stack+0x1b>
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	98 c0       	rjmp	.+304    	; 0x91a <__stack+0x1b>
     7ea:	8a e0       	ldi	r24, 0x0A	; 10
     7ec:	96 c0       	rjmp	.+300    	; 0x91a <__stack+0x1b>
     7ee:	8d e0       	ldi	r24, 0x0D	; 13
     7f0:	94 c0       	rjmp	.+296    	; 0x91a <__stack+0x1b>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	92 c0       	rjmp	.+292    	; 0x91a <__stack+0x1b>
     7f6:	8d e0       	ldi	r24, 0x0D	; 13
     7f8:	90 c0       	rjmp	.+288    	; 0x91a <__stack+0x1b>
     7fa:	8d e0       	ldi	r24, 0x0D	; 13
     7fc:	8e c0       	rjmp	.+284    	; 0x91a <__stack+0x1b>
     7fe:	8d e0       	ldi	r24, 0x0D	; 13
     800:	8c c0       	rjmp	.+280    	; 0x91a <__stack+0x1b>
     802:	8d e0       	ldi	r24, 0x0D	; 13
     804:	8a c0       	rjmp	.+276    	; 0x91a <__stack+0x1b>
     806:	8d e0       	ldi	r24, 0x0D	; 13
     808:	88 c0       	rjmp	.+272    	; 0x91a <__stack+0x1b>
     80a:	8d e0       	ldi	r24, 0x0D	; 13
     80c:	86 c0       	rjmp	.+268    	; 0x91a <__stack+0x1b>
     80e:	8d e0       	ldi	r24, 0x0D	; 13
     810:	84 c0       	rjmp	.+264    	; 0x91a <__stack+0x1b>
     812:	8d e0       	ldi	r24, 0x0D	; 13
     814:	82 c0       	rjmp	.+260    	; 0x91a <__stack+0x1b>
     816:	8d e0       	ldi	r24, 0x0D	; 13
     818:	80 c0       	rjmp	.+256    	; 0x91a <__stack+0x1b>
     81a:	8d e0       	ldi	r24, 0x0D	; 13
     81c:	7e c0       	rjmp	.+252    	; 0x91a <__stack+0x1b>
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	7c c0       	rjmp	.+248    	; 0x91a <__stack+0x1b>
     822:	8d e0       	ldi	r24, 0x0D	; 13
     824:	7a c0       	rjmp	.+244    	; 0x91a <__stack+0x1b>
     826:	8d e0       	ldi	r24, 0x0D	; 13
     828:	78 c0       	rjmp	.+240    	; 0x91a <__stack+0x1b>
     82a:	49 01       	movw	r8, r18
     82c:	5a 01       	movw	r10, r20
     82e:	b2 e0       	ldi	r27, 0x02	; 2
     830:	8b 0e       	add	r8, r27
     832:	91 1c       	adc	r9, r1
     834:	a1 1c       	adc	r10, r1
     836:	b1 1c       	adc	r11, r1
     838:	ed 85       	ldd	r30, Y+13	; 0x0d
     83a:	fe 85       	ldd	r31, Y+14	; 0x0e
     83c:	82 8e       	std	Z+26, r8	; 0x1a
     83e:	93 8e       	std	Z+27, r9	; 0x1b
     840:	a4 8e       	std	Z+28, r10	; 0x1c
     842:	b5 8e       	std	Z+29, r11	; 0x1d
     844:	c2 a2       	std	Z+34, r12	; 0x22
     846:	d3 a2       	std	Z+35, r13	; 0x23
     848:	e4 a2       	std	Z+36, r14	; 0x24
     84a:	f5 a2       	std	Z+37, r15	; 0x25
     84c:	8d 81       	ldd	r24, Y+5	; 0x05
     84e:	9e 81       	ldd	r25, Y+6	; 0x06
     850:	af 81       	ldd	r26, Y+7	; 0x07
     852:	b8 85       	ldd	r27, Y+8	; 0x08
     854:	8c 0d       	add	r24, r12
     856:	9d 1d       	adc	r25, r13
     858:	ae 1d       	adc	r26, r14
     85a:	bf 1d       	adc	r27, r15
     85c:	86 a3       	std	Z+38, r24	; 0x26
     85e:	97 a3       	std	Z+39, r25	; 0x27
     860:	a0 a7       	std	Z+40, r26	; 0x28
     862:	b1 a7       	std	Z+41, r27	; 0x29
     864:	49 81       	ldd	r20, Y+1	; 0x01
     866:	5a 81       	ldd	r21, Y+2	; 0x02
     868:	6b 81       	ldd	r22, Y+3	; 0x03
     86a:	7c 81       	ldd	r23, Y+4	; 0x04
     86c:	4c 0d       	add	r20, r12
     86e:	5d 1d       	adc	r21, r13
     870:	6e 1d       	adc	r22, r14
     872:	7f 1d       	adc	r23, r15
     874:	46 a7       	std	Z+46, r20	; 0x2e
     876:	57 a7       	std	Z+47, r21	; 0x2f
     878:	60 ab       	std	Z+48, r22	; 0x30
     87a:	71 ab       	std	Z+49, r23	; 0x31
     87c:	ef ce       	rjmp	.-546    	; 0x65c <__FUSE_REGION_LENGTH__+0x25c>
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	9f ef       	ldi	r25, 0xFF	; 255
     882:	dc 01       	movw	r26, r24
     884:	ed 85       	ldd	r30, Y+13	; 0x0d
     886:	fe 85       	ldd	r31, Y+14	; 0x0e
     888:	86 87       	std	Z+14, r24	; 0x0e
     88a:	97 87       	std	Z+15, r25	; 0x0f
     88c:	a0 8b       	std	Z+16, r26	; 0x10
     88e:	b1 8b       	std	Z+17, r27	; 0x11
     890:	12 86       	std	Z+10, r1	; 0x0a
     892:	13 86       	std	Z+11, r1	; 0x0b
     894:	14 86       	std	Z+12, r1	; 0x0c
     896:	15 86       	std	Z+13, r1	; 0x0d
     898:	80 cf       	rjmp	.-256    	; 0x79a <__FUSE_REGION_LENGTH__+0x39a>
     89a:	bf ef       	ldi	r27, 0xFF	; 255
     89c:	8b 0e       	add	r8, r27
     89e:	b1 e0       	ldi	r27, 0x01	; 1
     8a0:	9b 1e       	adc	r9, r27
     8a2:	a1 1c       	adc	r10, r1
     8a4:	b1 1c       	adc	r11, r1
     8a6:	07 2e       	mov	r0, r23
     8a8:	79 e0       	ldi	r23, 0x09	; 9
     8aa:	b6 94       	lsr	r11
     8ac:	a7 94       	ror	r10
     8ae:	97 94       	ror	r9
     8b0:	87 94       	ror	r8
     8b2:	7a 95       	dec	r23
     8b4:	d1 f7       	brne	.-12     	; 0x8aa <__FUSE_REGION_LENGTH__+0x4aa>
     8b6:	70 2d       	mov	r23, r0
     8b8:	48 14       	cp	r4, r8
     8ba:	59 04       	cpc	r5, r9
     8bc:	6a 04       	cpc	r6, r10
     8be:	7b 04       	cpc	r7, r11
     8c0:	08 f4       	brcc	.+2      	; 0x8c4 <__FUSE_REGION_LENGTH__+0x4c4>
     8c2:	b1 cf       	rjmp	.-158    	; 0x826 <__FUSE_REGION_LENGTH__+0x426>
     8c4:	dc cf       	rjmp	.-72     	; 0x87e <__FUSE_REGION_LENGTH__+0x47e>
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	9f ef       	ldi	r25, 0xFF	; 255
     8ca:	dc 01       	movw	r26, r24
     8cc:	ed 85       	ldd	r30, Y+13	; 0x0d
     8ce:	fe 85       	ldd	r31, Y+14	; 0x0e
     8d0:	86 87       	std	Z+14, r24	; 0x0e
     8d2:	97 87       	std	Z+15, r25	; 0x0f
     8d4:	a0 8b       	std	Z+16, r26	; 0x10
     8d6:	b1 8b       	std	Z+17, r27	; 0x11
     8d8:	df 01       	movw	r26, r30
     8da:	12 86       	std	Z+10, r1	; 0x0a
     8dc:	13 86       	std	Z+11, r1	; 0x0b
     8de:	14 86       	std	Z+12, r1	; 0x0c
     8e0:	15 86       	std	Z+13, r1	; 0x0d
     8e2:	15 82       	std	Z+5, r1	; 0x05
     8e4:	ea 59       	subi	r30, 0x9A	; 154
     8e6:	ff 4f       	sbci	r31, 0xFF	; 255
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	a7 01       	movw	r20, r14
     8ee:	96 01       	movw	r18, r12
     8f0:	28 0f       	add	r18, r24
     8f2:	39 1f       	adc	r19, r25
     8f4:	41 1d       	adc	r20, r1
     8f6:	51 1d       	adc	r21, r1
     8f8:	fd 01       	movw	r30, r26
     8fa:	22 8b       	std	Z+18, r18	; 0x12
     8fc:	33 8b       	std	Z+19, r19	; 0x13
     8fe:	44 8b       	std	Z+20, r20	; 0x14
     900:	55 8b       	std	Z+21, r21	; 0x15
     902:	01 e0       	ldi	r16, 0x01	; 1
     904:	bd 01       	movw	r22, r26
     906:	6a 5c       	subi	r22, 0xCA	; 202
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	81 81       	ldd	r24, Z+1	; 0x01
     90c:	0e 94 96 11 	call	0x232c	; 0x232c <disk_read>
     910:	88 23       	and	r24, r24
     912:	09 f4       	brne	.+2      	; 0x916 <__stack+0x17>
     914:	00 cf       	rjmp	.-512    	; 0x716 <__FUSE_REGION_LENGTH__+0x316>
     916:	13 e0       	ldi	r17, 0x03	; 3
     918:	40 cf       	rjmp	.-384    	; 0x79a <__FUSE_REGION_LENGTH__+0x39a>
     91a:	2e 96       	adiw	r28, 0x0e	; 14
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	9f 90       	pop	r9
     93c:	8f 90       	pop	r8
     93e:	7f 90       	pop	r7
     940:	6f 90       	pop	r6
     942:	5f 90       	pop	r5
     944:	4f 90       	pop	r4
     946:	3f 90       	pop	r3
     948:	2f 90       	pop	r2
     94a:	08 95       	ret

0000094c <clust2sect>:
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	fc 01       	movw	r30, r24
     956:	9a 01       	movw	r18, r20
     958:	ab 01       	movw	r20, r22
     95a:	22 50       	subi	r18, 0x02	; 2
     95c:	31 09       	sbc	r19, r1
     95e:	41 09       	sbc	r20, r1
     960:	51 09       	sbc	r21, r1
     962:	c2 8c       	ldd	r12, Z+26	; 0x1a
     964:	d3 8c       	ldd	r13, Z+27	; 0x1b
     966:	e4 8c       	ldd	r14, Z+28	; 0x1c
     968:	f5 8c       	ldd	r15, Z+29	; 0x1d
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	c8 1a       	sub	r12, r24
     96e:	d1 08       	sbc	r13, r1
     970:	e1 08       	sbc	r14, r1
     972:	f1 08       	sbc	r15, r1
     974:	2c 15       	cp	r18, r12
     976:	3d 05       	cpc	r19, r13
     978:	4e 05       	cpc	r20, r14
     97a:	5f 05       	cpc	r21, r15
     97c:	68 f4       	brcc	.+26     	; 0x998 <clust2sect+0x4c>
     97e:	a2 81       	ldd	r26, Z+2	; 0x02
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__muluhisi3>
     986:	c6 a4       	ldd	r12, Z+46	; 0x2e
     988:	d7 a4       	ldd	r13, Z+47	; 0x2f
     98a:	e0 a8       	ldd	r14, Z+48	; 0x30
     98c:	f1 a8       	ldd	r15, Z+49	; 0x31
     98e:	6c 0d       	add	r22, r12
     990:	7d 1d       	adc	r23, r13
     992:	8e 1d       	adc	r24, r14
     994:	9f 1d       	adc	r25, r15
     996:	03 c0       	rjmp	.+6      	; 0x99e <clust2sect+0x52>
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	cb 01       	movw	r24, r22
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	08 95       	ret

000009a8 <get_fat>:
     9a8:	af 92       	push	r10
     9aa:	bf 92       	push	r11
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	ec 01       	movw	r28, r24
     9bc:	6a 01       	movw	r12, r20
     9be:	7b 01       	movw	r14, r22
     9c0:	42 30       	cpi	r20, 0x02	; 2
     9c2:	51 05       	cpc	r21, r1
     9c4:	61 05       	cpc	r22, r1
     9c6:	71 05       	cpc	r23, r1
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <get_fat+0x24>
     9ca:	aa c0       	rjmp	.+340    	; 0xb20 <get_fat+0x178>
     9cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9ce:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9d0:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9d2:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9d4:	48 17       	cp	r20, r24
     9d6:	59 07       	cpc	r21, r25
     9d8:	6a 07       	cpc	r22, r26
     9da:	7b 07       	cpc	r23, r27
     9dc:	08 f0       	brcs	.+2      	; 0x9e0 <get_fat+0x38>
     9de:	a5 c0       	rjmp	.+330    	; 0xb2a <get_fat+0x182>
     9e0:	88 81       	ld	r24, Y
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <get_fat+0x40>
     9e6:	4c c0       	rjmp	.+152    	; 0xa80 <get_fat+0xd8>
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	09 f4       	brne	.+2      	; 0x9ee <get_fat+0x46>
     9ec:	6b c0       	rjmp	.+214    	; 0xac4 <get_fat+0x11c>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <get_fat+0x4c>
     9f2:	a0 c0       	rjmp	.+320    	; 0xb34 <get_fat+0x18c>
     9f4:	5a 01       	movw	r10, r20
     9f6:	b6 94       	lsr	r11
     9f8:	a7 94       	ror	r10
     9fa:	a4 0e       	add	r10, r20
     9fc:	b5 1e       	adc	r11, r21
     9fe:	c5 01       	movw	r24, r10
     a00:	89 2f       	mov	r24, r25
     a02:	99 27       	eor	r25, r25
     a04:	86 95       	lsr	r24
     a06:	4e a1       	ldd	r20, Y+38	; 0x26
     a08:	5f a1       	ldd	r21, Y+39	; 0x27
     a0a:	68 a5       	ldd	r22, Y+40	; 0x28
     a0c:	79 a5       	ldd	r23, Y+41	; 0x29
     a0e:	48 0f       	add	r20, r24
     a10:	59 1f       	adc	r21, r25
     a12:	61 1d       	adc	r22, r1
     a14:	71 1d       	adc	r23, r1
     a16:	ce 01       	movw	r24, r28
     a18:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     a1c:	81 11       	cpse	r24, r1
     a1e:	8e c0       	rjmp	.+284    	; 0xb3c <get_fat+0x194>
     a20:	f5 01       	movw	r30, r10
     a22:	f1 70       	andi	r31, 0x01	; 1
     a24:	ec 0f       	add	r30, r28
     a26:	fd 1f       	adc	r31, r29
     a28:	16 a9       	ldd	r17, Z+54	; 0x36
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	a8 1a       	sub	r10, r24
     a2e:	b8 0a       	sbc	r11, r24
     a30:	c5 01       	movw	r24, r10
     a32:	89 2f       	mov	r24, r25
     a34:	99 27       	eor	r25, r25
     a36:	86 95       	lsr	r24
     a38:	4e a1       	ldd	r20, Y+38	; 0x26
     a3a:	5f a1       	ldd	r21, Y+39	; 0x27
     a3c:	68 a5       	ldd	r22, Y+40	; 0x28
     a3e:	79 a5       	ldd	r23, Y+41	; 0x29
     a40:	48 0f       	add	r20, r24
     a42:	59 1f       	adc	r21, r25
     a44:	61 1d       	adc	r22, r1
     a46:	71 1d       	adc	r23, r1
     a48:	ce 01       	movw	r24, r28
     a4a:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     a4e:	81 11       	cpse	r24, r1
     a50:	79 c0       	rjmp	.+242    	; 0xb44 <get_fat+0x19c>
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	b8 22       	and	r11, r24
     a56:	ca 0d       	add	r28, r10
     a58:	db 1d       	adc	r29, r11
     a5a:	8e a9       	ldd	r24, Y+54	; 0x36
     a5c:	61 2f       	mov	r22, r17
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	78 2b       	or	r23, r24
     a62:	c0 fe       	sbrs	r12, 0
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <get_fat+0xd0>
     a66:	72 95       	swap	r23
     a68:	62 95       	swap	r22
     a6a:	6f 70       	andi	r22, 0x0F	; 15
     a6c:	67 27       	eor	r22, r23
     a6e:	7f 70       	andi	r23, 0x0F	; 15
     a70:	67 27       	eor	r22, r23
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	71 c0       	rjmp	.+226    	; 0xb5a <get_fat+0x1b2>
     a78:	7f 70       	andi	r23, 0x0F	; 15
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	6d c0       	rjmp	.+218    	; 0xb5a <get_fat+0x1b2>
     a80:	45 2f       	mov	r20, r21
     a82:	56 2f       	mov	r21, r22
     a84:	67 2f       	mov	r22, r23
     a86:	77 27       	eor	r23, r23
     a88:	8e a1       	ldd	r24, Y+38	; 0x26
     a8a:	9f a1       	ldd	r25, Y+39	; 0x27
     a8c:	a8 a5       	ldd	r26, Y+40	; 0x28
     a8e:	b9 a5       	ldd	r27, Y+41	; 0x29
     a90:	48 0f       	add	r20, r24
     a92:	59 1f       	adc	r21, r25
     a94:	6a 1f       	adc	r22, r26
     a96:	7b 1f       	adc	r23, r27
     a98:	ce 01       	movw	r24, r28
     a9a:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     a9e:	81 11       	cpse	r24, r1
     aa0:	55 c0       	rjmp	.+170    	; 0xb4c <get_fat+0x1a4>
     aa2:	cc 0c       	add	r12, r12
     aa4:	dd 1c       	adc	r13, r13
     aa6:	ee 1c       	adc	r14, r14
     aa8:	ff 1c       	adc	r15, r15
     aaa:	e8 94       	clt
     aac:	c0 f8       	bld	r12, 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	d8 22       	and	r13, r24
     ab2:	ee 24       	eor	r14, r14
     ab4:	ff 24       	eor	r15, r15
     ab6:	cc 0d       	add	r28, r12
     ab8:	dd 1d       	adc	r29, r13
     aba:	6e a9       	ldd	r22, Y+54	; 0x36
     abc:	7f a9       	ldd	r23, Y+55	; 0x37
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	4b c0       	rjmp	.+150    	; 0xb5a <get_fat+0x1b2>
     ac4:	8e a1       	ldd	r24, Y+38	; 0x26
     ac6:	9f a1       	ldd	r25, Y+39	; 0x27
     ac8:	a8 a5       	ldd	r26, Y+40	; 0x28
     aca:	b9 a5       	ldd	r27, Y+41	; 0x29
     acc:	68 94       	set
     ace:	16 f8       	bld	r1, 6
     ad0:	76 95       	lsr	r23
     ad2:	67 95       	ror	r22
     ad4:	57 95       	ror	r21
     ad6:	47 95       	ror	r20
     ad8:	16 94       	lsr	r1
     ada:	d1 f7       	brne	.-12     	; 0xad0 <get_fat+0x128>
     adc:	48 0f       	add	r20, r24
     ade:	59 1f       	adc	r21, r25
     ae0:	6a 1f       	adc	r22, r26
     ae2:	7b 1f       	adc	r23, r27
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     aea:	81 11       	cpse	r24, r1
     aec:	33 c0       	rjmp	.+102    	; 0xb54 <get_fat+0x1ac>
     aee:	cc 0c       	add	r12, r12
     af0:	dd 1c       	adc	r13, r13
     af2:	ee 1c       	adc	r14, r14
     af4:	ff 1c       	adc	r15, r15
     af6:	cc 0c       	add	r12, r12
     af8:	dd 1c       	adc	r13, r13
     afa:	ee 1c       	adc	r14, r14
     afc:	ff 1c       	adc	r15, r15
     afe:	8c ef       	ldi	r24, 0xFC	; 252
     b00:	c8 22       	and	r12, r24
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	d8 22       	and	r13, r24
     b06:	ee 24       	eor	r14, r14
     b08:	ff 24       	eor	r15, r15
     b0a:	fe 01       	movw	r30, r28
     b0c:	ec 0d       	add	r30, r12
     b0e:	fd 1d       	adc	r31, r13
     b10:	86 a9       	ldd	r24, Z+54	; 0x36
     b12:	97 a9       	ldd	r25, Z+55	; 0x37
     b14:	a0 ad       	ldd	r26, Z+56	; 0x38
     b16:	b1 ad       	ldd	r27, Z+57	; 0x39
     b18:	bc 01       	movw	r22, r24
     b1a:	cd 01       	movw	r24, r26
     b1c:	9f 70       	andi	r25, 0x0F	; 15
     b1e:	1d c0       	rjmp	.+58     	; 0xb5a <get_fat+0x1b2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	18 c0       	rjmp	.+48     	; 0xb5a <get_fat+0x1b2>
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	13 c0       	rjmp	.+38     	; 0xb5a <get_fat+0x1b2>
     b34:	6f ef       	ldi	r22, 0xFF	; 255
     b36:	7f ef       	ldi	r23, 0xFF	; 255
     b38:	cb 01       	movw	r24, r22
     b3a:	0f c0       	rjmp	.+30     	; 0xb5a <get_fat+0x1b2>
     b3c:	6f ef       	ldi	r22, 0xFF	; 255
     b3e:	7f ef       	ldi	r23, 0xFF	; 255
     b40:	cb 01       	movw	r24, r22
     b42:	0b c0       	rjmp	.+22     	; 0xb5a <get_fat+0x1b2>
     b44:	6f ef       	ldi	r22, 0xFF	; 255
     b46:	7f ef       	ldi	r23, 0xFF	; 255
     b48:	cb 01       	movw	r24, r22
     b4a:	07 c0       	rjmp	.+14     	; 0xb5a <get_fat+0x1b2>
     b4c:	6f ef       	ldi	r22, 0xFF	; 255
     b4e:	7f ef       	ldi	r23, 0xFF	; 255
     b50:	cb 01       	movw	r24, r22
     b52:	03 c0       	rjmp	.+6      	; 0xb5a <get_fat+0x1b2>
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	7f ef       	ldi	r23, 0xFF	; 255
     b58:	cb 01       	movw	r24, r22
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	1f 91       	pop	r17
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	df 90       	pop	r13
     b66:	cf 90       	pop	r12
     b68:	bf 90       	pop	r11
     b6a:	af 90       	pop	r10
     b6c:	08 95       	ret

00000b6e <dir_sdi>:
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	ec 01       	movw	r28, r24
     b7c:	8b 01       	movw	r16, r22
     b7e:	7d 83       	std	Y+5, r23	; 0x05
     b80:	6c 83       	std	Y+4, r22	; 0x04
     b82:	4e 81       	ldd	r20, Y+6	; 0x06
     b84:	5f 81       	ldd	r21, Y+7	; 0x07
     b86:	68 85       	ldd	r22, Y+8	; 0x08
     b88:	79 85       	ldd	r23, Y+9	; 0x09
     b8a:	41 30       	cpi	r20, 0x01	; 1
     b8c:	51 05       	cpc	r21, r1
     b8e:	61 05       	cpc	r22, r1
     b90:	71 05       	cpc	r23, r1
     b92:	09 f4       	brne	.+2      	; 0xb96 <dir_sdi+0x28>
     b94:	93 c0       	rjmp	.+294    	; 0xcbc <dir_sdi+0x14e>
     b96:	e8 81       	ld	r30, Y
     b98:	f9 81       	ldd	r31, Y+1	; 0x01
     b9a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b9c:	93 8d       	ldd	r25, Z+27	; 0x1b
     b9e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     ba0:	b5 8d       	ldd	r27, Z+29	; 0x1d
     ba2:	48 17       	cp	r20, r24
     ba4:	59 07       	cpc	r21, r25
     ba6:	6a 07       	cpc	r22, r26
     ba8:	7b 07       	cpc	r23, r27
     baa:	08 f0       	brcs	.+2      	; 0xbae <dir_sdi+0x40>
     bac:	89 c0       	rjmp	.+274    	; 0xcc0 <dir_sdi+0x152>
     bae:	41 15       	cp	r20, r1
     bb0:	51 05       	cpc	r21, r1
     bb2:	61 05       	cpc	r22, r1
     bb4:	71 05       	cpc	r23, r1
     bb6:	51 f5       	brne	.+84     	; 0xc0c <dir_sdi+0x9e>
     bb8:	80 81       	ld	r24, Z
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	49 f4       	brne	.+18     	; 0xbd0 <dir_sdi+0x62>
     bbe:	42 a5       	ldd	r20, Z+42	; 0x2a
     bc0:	53 a5       	ldd	r21, Z+43	; 0x2b
     bc2:	64 a5       	ldd	r22, Z+44	; 0x2c
     bc4:	75 a5       	ldd	r23, Z+45	; 0x2d
     bc6:	41 15       	cp	r20, r1
     bc8:	51 05       	cpc	r21, r1
     bca:	61 05       	cpc	r22, r1
     bcc:	71 05       	cpc	r23, r1
     bce:	f1 f4       	brne	.+60     	; 0xc0c <dir_sdi+0x9e>
     bd0:	1a 86       	std	Y+10, r1	; 0x0a
     bd2:	1b 86       	std	Y+11, r1	; 0x0b
     bd4:	1c 86       	std	Y+12, r1	; 0x0c
     bd6:	1d 86       	std	Y+13, r1	; 0x0d
     bd8:	80 85       	ldd	r24, Z+8	; 0x08
     bda:	91 85       	ldd	r25, Z+9	; 0x09
     bdc:	08 17       	cp	r16, r24
     bde:	19 07       	cpc	r17, r25
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <dir_sdi+0x76>
     be2:	70 c0       	rjmp	.+224    	; 0xcc4 <dir_sdi+0x156>
     be4:	82 a5       	ldd	r24, Z+42	; 0x2a
     be6:	93 a5       	ldd	r25, Z+43	; 0x2b
     be8:	a4 a5       	ldd	r26, Z+44	; 0x2c
     bea:	b5 a5       	ldd	r27, Z+45	; 0x2d
     bec:	98 01       	movw	r18, r16
     bee:	32 95       	swap	r19
     bf0:	22 95       	swap	r18
     bf2:	2f 70       	andi	r18, 0x0F	; 15
     bf4:	23 27       	eor	r18, r19
     bf6:	3f 70       	andi	r19, 0x0F	; 15
     bf8:	23 27       	eor	r18, r19
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	a1 1d       	adc	r26, r1
     c00:	b1 1d       	adc	r27, r1
     c02:	8e 87       	std	Y+14, r24	; 0x0e
     c04:	9f 87       	std	Y+15, r25	; 0x0f
     c06:	a8 8b       	std	Y+16, r26	; 0x10
     c08:	b9 8b       	std	Y+17, r27	; 0x11
     c0a:	44 c0       	rjmp	.+136    	; 0xc94 <dir_sdi+0x126>
     c0c:	e2 80       	ldd	r14, Z+2	; 0x02
     c0e:	80 e1       	ldi	r24, 0x10	; 16
     c10:	e8 9e       	mul	r14, r24
     c12:	70 01       	movw	r14, r0
     c14:	11 24       	eor	r1, r1
     c16:	0e 15       	cp	r16, r14
     c18:	1f 05       	cpc	r17, r15
     c1a:	18 f1       	brcs	.+70     	; 0xc62 <dir_sdi+0xf4>
     c1c:	88 81       	ld	r24, Y
     c1e:	99 81       	ldd	r25, Y+1	; 0x01
     c20:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_fat>
     c24:	ab 01       	movw	r20, r22
     c26:	bc 01       	movw	r22, r24
     c28:	4f 3f       	cpi	r20, 0xFF	; 255
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	58 07       	cpc	r21, r24
     c2e:	68 07       	cpc	r22, r24
     c30:	78 07       	cpc	r23, r24
     c32:	09 f4       	brne	.+2      	; 0xc36 <dir_sdi+0xc8>
     c34:	49 c0       	rjmp	.+146    	; 0xcc8 <dir_sdi+0x15a>
     c36:	42 30       	cpi	r20, 0x02	; 2
     c38:	51 05       	cpc	r21, r1
     c3a:	61 05       	cpc	r22, r1
     c3c:	71 05       	cpc	r23, r1
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <dir_sdi+0xd4>
     c40:	45 c0       	rjmp	.+138    	; 0xccc <dir_sdi+0x15e>
     c42:	e8 81       	ld	r30, Y
     c44:	f9 81       	ldd	r31, Y+1	; 0x01
     c46:	82 8d       	ldd	r24, Z+26	; 0x1a
     c48:	93 8d       	ldd	r25, Z+27	; 0x1b
     c4a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     c4c:	b5 8d       	ldd	r27, Z+29	; 0x1d
     c4e:	48 17       	cp	r20, r24
     c50:	59 07       	cpc	r21, r25
     c52:	6a 07       	cpc	r22, r26
     c54:	7b 07       	cpc	r23, r27
     c56:	e0 f5       	brcc	.+120    	; 0xcd0 <dir_sdi+0x162>
     c58:	0e 19       	sub	r16, r14
     c5a:	1f 09       	sbc	r17, r15
     c5c:	0e 15       	cp	r16, r14
     c5e:	1f 05       	cpc	r17, r15
     c60:	e8 f6       	brcc	.-70     	; 0xc1c <dir_sdi+0xae>
     c62:	4a 87       	std	Y+10, r20	; 0x0a
     c64:	5b 87       	std	Y+11, r21	; 0x0b
     c66:	6c 87       	std	Y+12, r22	; 0x0c
     c68:	7d 87       	std	Y+13, r23	; 0x0d
     c6a:	88 81       	ld	r24, Y
     c6c:	99 81       	ldd	r25, Y+1	; 0x01
     c6e:	0e 94 a6 04 	call	0x94c	; 0x94c <clust2sect>
     c72:	98 01       	movw	r18, r16
     c74:	32 95       	swap	r19
     c76:	22 95       	swap	r18
     c78:	2f 70       	andi	r18, 0x0F	; 15
     c7a:	23 27       	eor	r18, r19
     c7c:	3f 70       	andi	r19, 0x0F	; 15
     c7e:	23 27       	eor	r18, r19
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	a1 1d       	adc	r26, r1
     c8a:	b1 1d       	adc	r27, r1
     c8c:	8e 87       	std	Y+14, r24	; 0x0e
     c8e:	9f 87       	std	Y+15, r25	; 0x0f
     c90:	a8 8b       	std	Y+16, r26	; 0x10
     c92:	b9 8b       	std	Y+17, r27	; 0x11
     c94:	0f 70       	andi	r16, 0x0F	; 15
     c96:	11 27       	eor	r17, r17
     c98:	00 0f       	add	r16, r16
     c9a:	11 1f       	adc	r17, r17
     c9c:	02 95       	swap	r16
     c9e:	12 95       	swap	r17
     ca0:	10 7f       	andi	r17, 0xF0	; 240
     ca2:	10 27       	eor	r17, r16
     ca4:	00 7f       	andi	r16, 0xF0	; 240
     ca6:	10 27       	eor	r17, r16
     ca8:	0a 5c       	subi	r16, 0xCA	; 202
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	88 81       	ld	r24, Y
     cae:	99 81       	ldd	r25, Y+1	; 0x01
     cb0:	08 0f       	add	r16, r24
     cb2:	19 1f       	adc	r17, r25
     cb4:	1b 8b       	std	Y+19, r17	; 0x13
     cb6:	0a 8b       	std	Y+18, r16	; 0x12
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	0b c0       	rjmp	.+22     	; 0xcd2 <dir_sdi+0x164>
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <dir_sdi+0x164>
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <dir_sdi+0x164>
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <dir_sdi+0x164>
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	03 c0       	rjmp	.+6      	; 0xcd2 <dir_sdi+0x164>
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <dir_sdi+0x164>
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	0f 91       	pop	r16
     cda:	ff 90       	pop	r15
     cdc:	ef 90       	pop	r14
     cde:	08 95       	ret

00000ce0 <put_fat>:
     ce0:	4f 92       	push	r4
     ce2:	5f 92       	push	r5
     ce4:	6f 92       	push	r6
     ce6:	7f 92       	push	r7
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
     cfe:	6a 01       	movw	r12, r20
     d00:	7b 01       	movw	r14, r22
     d02:	28 01       	movw	r4, r16
     d04:	39 01       	movw	r6, r18
     d06:	42 30       	cpi	r20, 0x02	; 2
     d08:	51 05       	cpc	r21, r1
     d0a:	61 05       	cpc	r22, r1
     d0c:	71 05       	cpc	r23, r1
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <put_fat+0x32>
     d10:	d9 c0       	rjmp	.+434    	; 0xec4 <put_fat+0x1e4>
     d12:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d14:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d16:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d18:	bd 8d       	ldd	r27, Y+29	; 0x1d
     d1a:	48 17       	cp	r20, r24
     d1c:	59 07       	cpc	r21, r25
     d1e:	6a 07       	cpc	r22, r26
     d20:	7b 07       	cpc	r23, r27
     d22:	08 f0       	brcs	.+2      	; 0xd26 <put_fat+0x46>
     d24:	d1 c0       	rjmp	.+418    	; 0xec8 <put_fat+0x1e8>
     d26:	88 81       	ld	r24, Y
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	09 f4       	brne	.+2      	; 0xd2e <put_fat+0x4e>
     d2c:	63 c0       	rjmp	.+198    	; 0xdf4 <put_fat+0x114>
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	09 f4       	brne	.+2      	; 0xd34 <put_fat+0x54>
     d32:	85 c0       	rjmp	.+266    	; 0xe3e <put_fat+0x15e>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	09 f0       	breq	.+2      	; 0xd3a <put_fat+0x5a>
     d38:	bd c0       	rjmp	.+378    	; 0xeb4 <put_fat+0x1d4>
     d3a:	5a 01       	movw	r10, r20
     d3c:	b6 94       	lsr	r11
     d3e:	a7 94       	ror	r10
     d40:	a4 0e       	add	r10, r20
     d42:	b5 1e       	adc	r11, r21
     d44:	c5 01       	movw	r24, r10
     d46:	89 2f       	mov	r24, r25
     d48:	99 27       	eor	r25, r25
     d4a:	86 95       	lsr	r24
     d4c:	4e a1       	ldd	r20, Y+38	; 0x26
     d4e:	5f a1       	ldd	r21, Y+39	; 0x27
     d50:	68 a5       	ldd	r22, Y+40	; 0x28
     d52:	79 a5       	ldd	r23, Y+41	; 0x29
     d54:	48 0f       	add	r20, r24
     d56:	59 1f       	adc	r21, r25
     d58:	61 1d       	adc	r22, r1
     d5a:	71 1d       	adc	r23, r1
     d5c:	ce 01       	movw	r24, r28
     d5e:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     d62:	18 2f       	mov	r17, r24
     d64:	81 11       	cpse	r24, r1
     d66:	ab c0       	rjmp	.+342    	; 0xebe <put_fat+0x1de>
     d68:	c5 01       	movw	r24, r10
     d6a:	91 70       	andi	r25, 0x01	; 1
     d6c:	c0 fe       	sbrs	r12, 0
     d6e:	23 c0       	rjmp	.+70     	; 0xdb6 <put_fat+0xd6>
     d70:	fe 01       	movw	r30, r28
     d72:	e8 0f       	add	r30, r24
     d74:	f9 1f       	adc	r31, r25
     d76:	86 a9       	ldd	r24, Z+54	; 0x36
     d78:	28 2f       	mov	r18, r24
     d7a:	2f 70       	andi	r18, 0x0F	; 15
     d7c:	30 e1       	ldi	r19, 0x10	; 16
     d7e:	43 9e       	mul	r4, r19
     d80:	c0 01       	movw	r24, r0
     d82:	11 24       	eor	r1, r1
     d84:	82 2b       	or	r24, r18
     d86:	86 ab       	std	Z+54, r24	; 0x36
     d88:	8f ef       	ldi	r24, 0xFF	; 255
     d8a:	a8 1a       	sub	r10, r24
     d8c:	b8 0a       	sbc	r11, r24
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	8c 83       	std	Y+4, r24	; 0x04
     d92:	c5 01       	movw	r24, r10
     d94:	89 2f       	mov	r24, r25
     d96:	99 27       	eor	r25, r25
     d98:	86 95       	lsr	r24
     d9a:	4e a1       	ldd	r20, Y+38	; 0x26
     d9c:	5f a1       	ldd	r21, Y+39	; 0x27
     d9e:	68 a5       	ldd	r22, Y+40	; 0x28
     da0:	79 a5       	ldd	r23, Y+41	; 0x29
     da2:	48 0f       	add	r20, r24
     da4:	59 1f       	adc	r21, r25
     da6:	61 1d       	adc	r22, r1
     da8:	71 1d       	adc	r23, r1
     daa:	ce 01       	movw	r24, r28
     dac:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     db0:	81 11       	cpse	r24, r1
     db2:	82 c0       	rjmp	.+260    	; 0xeb8 <put_fat+0x1d8>
     db4:	8b c0       	rjmp	.+278    	; 0xecc <put_fat+0x1ec>
     db6:	fe 01       	movw	r30, r28
     db8:	e8 0f       	add	r30, r24
     dba:	f9 1f       	adc	r31, r25
     dbc:	46 aa       	std	Z+54, r4	; 0x36
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	a3 1a       	sub	r10, r19
     dc2:	b3 0a       	sbc	r11, r19
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	8c 83       	std	Y+4, r24	; 0x04
     dc8:	c5 01       	movw	r24, r10
     dca:	89 2f       	mov	r24, r25
     dcc:	99 27       	eor	r25, r25
     dce:	86 95       	lsr	r24
     dd0:	4e a1       	ldd	r20, Y+38	; 0x26
     dd2:	5f a1       	ldd	r21, Y+39	; 0x27
     dd4:	68 a5       	ldd	r22, Y+40	; 0x28
     dd6:	79 a5       	ldd	r23, Y+41	; 0x29
     dd8:	48 0f       	add	r20, r24
     dda:	59 1f       	adc	r21, r25
     ddc:	61 1d       	adc	r22, r1
     dde:	71 1d       	adc	r23, r1
     de0:	ce 01       	movw	r24, r28
     de2:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     de6:	81 11       	cpse	r24, r1
     de8:	69 c0       	rjmp	.+210    	; 0xebc <put_fat+0x1dc>
     dea:	7b c0       	rjmp	.+246    	; 0xee2 <put_fat+0x202>
     dec:	ec 0f       	add	r30, r28
     dee:	fd 1f       	adc	r31, r29
     df0:	46 aa       	std	Z+54, r4	; 0x36
     df2:	65 c0       	rjmp	.+202    	; 0xebe <put_fat+0x1de>
     df4:	45 2f       	mov	r20, r21
     df6:	56 2f       	mov	r21, r22
     df8:	67 2f       	mov	r22, r23
     dfa:	77 27       	eor	r23, r23
     dfc:	8e a1       	ldd	r24, Y+38	; 0x26
     dfe:	9f a1       	ldd	r25, Y+39	; 0x27
     e00:	a8 a5       	ldd	r26, Y+40	; 0x28
     e02:	b9 a5       	ldd	r27, Y+41	; 0x29
     e04:	48 0f       	add	r20, r24
     e06:	59 1f       	adc	r21, r25
     e08:	6a 1f       	adc	r22, r26
     e0a:	7b 1f       	adc	r23, r27
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     e12:	18 2f       	mov	r17, r24
     e14:	81 11       	cpse	r24, r1
     e16:	53 c0       	rjmp	.+166    	; 0xebe <put_fat+0x1de>
     e18:	cc 0c       	add	r12, r12
     e1a:	dd 1c       	adc	r13, r13
     e1c:	ee 1c       	adc	r14, r14
     e1e:	ff 1c       	adc	r15, r15
     e20:	e8 94       	clt
     e22:	c0 f8       	bld	r12, 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	d8 22       	and	r13, r24
     e28:	ee 24       	eor	r14, r14
     e2a:	ff 24       	eor	r15, r15
     e2c:	36 e3       	ldi	r19, 0x36	; 54
     e2e:	c3 0e       	add	r12, r19
     e30:	d1 1c       	adc	r13, r1
     e32:	fe 01       	movw	r30, r28
     e34:	ec 0d       	add	r30, r12
     e36:	fd 1d       	adc	r31, r13
     e38:	51 82       	std	Z+1, r5	; 0x01
     e3a:	40 82       	st	Z, r4
     e3c:	40 c0       	rjmp	.+128    	; 0xebe <put_fat+0x1de>
     e3e:	8e a1       	ldd	r24, Y+38	; 0x26
     e40:	9f a1       	ldd	r25, Y+39	; 0x27
     e42:	a8 a5       	ldd	r26, Y+40	; 0x28
     e44:	b9 a5       	ldd	r27, Y+41	; 0x29
     e46:	68 94       	set
     e48:	16 f8       	bld	r1, 6
     e4a:	76 95       	lsr	r23
     e4c:	67 95       	ror	r22
     e4e:	57 95       	ror	r21
     e50:	47 95       	ror	r20
     e52:	16 94       	lsr	r1
     e54:	d1 f7       	brne	.-12     	; 0xe4a <put_fat+0x16a>
     e56:	48 0f       	add	r20, r24
     e58:	59 1f       	adc	r21, r25
     e5a:	6a 1f       	adc	r22, r26
     e5c:	7b 1f       	adc	r23, r27
     e5e:	ce 01       	movw	r24, r28
     e60:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
     e64:	18 2f       	mov	r17, r24
     e66:	81 11       	cpse	r24, r1
     e68:	2a c0       	rjmp	.+84     	; 0xebe <put_fat+0x1de>
     e6a:	cc 0c       	add	r12, r12
     e6c:	dd 1c       	adc	r13, r13
     e6e:	ee 1c       	adc	r14, r14
     e70:	ff 1c       	adc	r15, r15
     e72:	cc 0c       	add	r12, r12
     e74:	dd 1c       	adc	r13, r13
     e76:	ee 1c       	adc	r14, r14
     e78:	ff 1c       	adc	r15, r15
     e7a:	8c ef       	ldi	r24, 0xFC	; 252
     e7c:	c8 22       	and	r12, r24
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	d8 22       	and	r13, r24
     e82:	ee 24       	eor	r14, r14
     e84:	ff 24       	eor	r15, r15
     e86:	36 e3       	ldi	r19, 0x36	; 54
     e88:	c3 0e       	add	r12, r19
     e8a:	d1 1c       	adc	r13, r1
     e8c:	fe 01       	movw	r30, r28
     e8e:	ec 0d       	add	r30, r12
     e90:	fd 1d       	adc	r31, r13
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	a2 81       	ldd	r26, Z+2	; 0x02
     e98:	b3 81       	ldd	r27, Z+3	; 0x03
     e9a:	88 27       	eor	r24, r24
     e9c:	99 27       	eor	r25, r25
     e9e:	aa 27       	eor	r26, r26
     ea0:	b0 7f       	andi	r27, 0xF0	; 240
     ea2:	48 2a       	or	r4, r24
     ea4:	59 2a       	or	r5, r25
     ea6:	6a 2a       	or	r6, r26
     ea8:	7b 2a       	or	r7, r27
     eaa:	40 82       	st	Z, r4
     eac:	51 82       	std	Z+1, r5	; 0x01
     eae:	62 82       	std	Z+2, r6	; 0x02
     eb0:	73 82       	std	Z+3, r7	; 0x03
     eb2:	05 c0       	rjmp	.+10     	; 0xebe <put_fat+0x1de>
     eb4:	12 e0       	ldi	r17, 0x02	; 2
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <put_fat+0x1de>
     eb8:	18 2f       	mov	r17, r24
     eba:	01 c0       	rjmp	.+2      	; 0xebe <put_fat+0x1de>
     ebc:	18 2f       	mov	r17, r24
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	8c 83       	std	Y+4, r24	; 0x04
     ec2:	1c c0       	rjmp	.+56     	; 0xefc <put_fat+0x21c>
     ec4:	12 e0       	ldi	r17, 0x02	; 2
     ec6:	1a c0       	rjmp	.+52     	; 0xefc <put_fat+0x21c>
     ec8:	12 e0       	ldi	r17, 0x02	; 2
     eca:	18 c0       	rjmp	.+48     	; 0xefc <put_fat+0x21c>
     ecc:	f5 01       	movw	r30, r10
     ece:	f1 70       	andi	r31, 0x01	; 1
     ed0:	68 94       	set
     ed2:	13 f8       	bld	r1, 3
     ed4:	76 94       	lsr	r7
     ed6:	67 94       	ror	r6
     ed8:	57 94       	ror	r5
     eda:	47 94       	ror	r4
     edc:	16 94       	lsr	r1
     ede:	d1 f7       	brne	.-12     	; 0xed4 <put_fat+0x1f4>
     ee0:	85 cf       	rjmp	.-246    	; 0xdec <put_fat+0x10c>
     ee2:	f5 01       	movw	r30, r10
     ee4:	f1 70       	andi	r31, 0x01	; 1
     ee6:	de 01       	movw	r26, r28
     ee8:	ae 0f       	add	r26, r30
     eea:	bf 1f       	adc	r27, r31
     eec:	d6 96       	adiw	r26, 0x36	; 54
     eee:	9c 91       	ld	r25, X
     ef0:	90 7f       	andi	r25, 0xF0	; 240
     ef2:	85 2d       	mov	r24, r5
     ef4:	8f 70       	andi	r24, 0x0F	; 15
     ef6:	49 2e       	mov	r4, r25
     ef8:	48 2a       	or	r4, r24
     efa:	78 cf       	rjmp	.-272    	; 0xdec <put_fat+0x10c>
     efc:	81 2f       	mov	r24, r17
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	7f 90       	pop	r7
     f14:	6f 90       	pop	r6
     f16:	5f 90       	pop	r5
     f18:	4f 90       	pop	r4
     f1a:	08 95       	ret

00000f1c <create_chain>:
     f1c:	2f 92       	push	r2
     f1e:	3f 92       	push	r3
     f20:	4f 92       	push	r4
     f22:	5f 92       	push	r5
     f24:	6f 92       	push	r6
     f26:	7f 92       	push	r7
     f28:	8f 92       	push	r8
     f2a:	9f 92       	push	r9
     f2c:	af 92       	push	r10
     f2e:	bf 92       	push	r11
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ec 01       	movw	r28, r24
     f42:	2a 01       	movw	r4, r20
     f44:	3b 01       	movw	r6, r22
     f46:	41 15       	cp	r20, r1
     f48:	51 05       	cpc	r21, r1
     f4a:	61 05       	cpc	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	b9 f4       	brne	.+46     	; 0xf7e <create_chain+0x62>
     f50:	8a 84       	ldd	r8, Y+10	; 0x0a
     f52:	9b 84       	ldd	r9, Y+11	; 0x0b
     f54:	ac 84       	ldd	r10, Y+12	; 0x0c
     f56:	bd 84       	ldd	r11, Y+13	; 0x0d
     f58:	81 14       	cp	r8, r1
     f5a:	91 04       	cpc	r9, r1
     f5c:	a1 04       	cpc	r10, r1
     f5e:	b1 04       	cpc	r11, r1
     f60:	29 f1       	breq	.+74     	; 0xfac <create_chain+0x90>
     f62:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f64:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f66:	ac 8d       	ldd	r26, Y+28	; 0x1c
     f68:	bd 8d       	ldd	r27, Y+29	; 0x1d
     f6a:	88 16       	cp	r8, r24
     f6c:	99 06       	cpc	r9, r25
     f6e:	aa 06       	cpc	r10, r26
     f70:	bb 06       	cpc	r11, r27
     f72:	00 f1       	brcs	.+64     	; 0xfb4 <create_chain+0x98>
     f74:	81 2c       	mov	r8, r1
     f76:	91 2c       	mov	r9, r1
     f78:	54 01       	movw	r10, r8
     f7a:	83 94       	inc	r8
     f7c:	1b c0       	rjmp	.+54     	; 0xfb4 <create_chain+0x98>
     f7e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_fat>
     f82:	6b 01       	movw	r12, r22
     f84:	7c 01       	movw	r14, r24
     f86:	62 30       	cpi	r22, 0x02	; 2
     f88:	71 05       	cpc	r23, r1
     f8a:	81 05       	cpc	r24, r1
     f8c:	91 05       	cpc	r25, r1
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <create_chain+0x76>
     f90:	91 c0       	rjmp	.+290    	; 0x10b4 <create_chain+0x198>
     f92:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f94:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f96:	ac 8d       	ldd	r26, Y+28	; 0x1c
     f98:	bd 8d       	ldd	r27, Y+29	; 0x1d
     f9a:	c8 16       	cp	r12, r24
     f9c:	d9 06       	cpc	r13, r25
     f9e:	ea 06       	cpc	r14, r26
     fa0:	fb 06       	cpc	r15, r27
     fa2:	08 f4       	brcc	.+2      	; 0xfa6 <create_chain+0x8a>
     fa4:	8c c0       	rjmp	.+280    	; 0x10be <create_chain+0x1a2>
     fa6:	53 01       	movw	r10, r6
     fa8:	42 01       	movw	r8, r4
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <create_chain+0x98>
     fac:	81 2c       	mov	r8, r1
     fae:	91 2c       	mov	r9, r1
     fb0:	54 01       	movw	r10, r8
     fb2:	83 94       	inc	r8
     fb4:	75 01       	movw	r14, r10
     fb6:	64 01       	movw	r12, r8
     fb8:	68 94       	set
     fba:	22 24       	eor	r2, r2
     fbc:	21 f8       	bld	r2, 1
     fbe:	31 2c       	mov	r3, r1
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	c8 1a       	sub	r12, r24
     fc8:	d8 0a       	sbc	r13, r24
     fca:	e8 0a       	sbc	r14, r24
     fcc:	f8 0a       	sbc	r15, r24
     fce:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fd2:	ac 8d       	ldd	r26, Y+28	; 0x1c
     fd4:	bd 8d       	ldd	r27, Y+29	; 0x1d
     fd6:	c8 16       	cp	r12, r24
     fd8:	d9 06       	cpc	r13, r25
     fda:	ea 06       	cpc	r14, r26
     fdc:	fb 06       	cpc	r15, r27
     fde:	58 f0       	brcs	.+22     	; 0xff6 <create_chain+0xda>
     fe0:	22 e0       	ldi	r18, 0x02	; 2
     fe2:	82 16       	cp	r8, r18
     fe4:	91 04       	cpc	r9, r1
     fe6:	a1 04       	cpc	r10, r1
     fe8:	b1 04       	cpc	r11, r1
     fea:	08 f4       	brcc	.+2      	; 0xfee <create_chain+0xd2>
     fec:	6d c0       	rjmp	.+218    	; 0x10c8 <create_chain+0x1ac>
     fee:	c2 2c       	mov	r12, r2
     ff0:	d3 2c       	mov	r13, r3
     ff2:	e0 2e       	mov	r14, r16
     ff4:	f1 2e       	mov	r15, r17
     ff6:	b7 01       	movw	r22, r14
     ff8:	a6 01       	movw	r20, r12
     ffa:	ce 01       	movw	r24, r28
     ffc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_fat>
    1000:	61 15       	cp	r22, r1
    1002:	71 05       	cpc	r23, r1
    1004:	81 05       	cpc	r24, r1
    1006:	91 05       	cpc	r25, r1
    1008:	99 f0       	breq	.+38     	; 0x1030 <create_chain+0x114>
    100a:	6f 3f       	cpi	r22, 0xFF	; 255
    100c:	2f ef       	ldi	r18, 0xFF	; 255
    100e:	72 07       	cpc	r23, r18
    1010:	82 07       	cpc	r24, r18
    1012:	92 07       	cpc	r25, r18
    1014:	09 f4       	brne	.+2      	; 0x1018 <create_chain+0xfc>
    1016:	5d c0       	rjmp	.+186    	; 0x10d2 <create_chain+0x1b6>
    1018:	61 30       	cpi	r22, 0x01	; 1
    101a:	71 05       	cpc	r23, r1
    101c:	81 05       	cpc	r24, r1
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <create_chain+0x108>
    1022:	5c c0       	rjmp	.+184    	; 0x10dc <create_chain+0x1c0>
    1024:	c8 14       	cp	r12, r8
    1026:	d9 04       	cpc	r13, r9
    1028:	ea 04       	cpc	r14, r10
    102a:	fb 04       	cpc	r15, r11
    102c:	59 f6       	brne	.-106    	; 0xfc4 <create_chain+0xa8>
    102e:	5b c0       	rjmp	.+182    	; 0x10e6 <create_chain+0x1ca>
    1030:	8c 2c       	mov	r8, r12
    1032:	9d 2c       	mov	r9, r13
    1034:	ae 2c       	mov	r10, r14
    1036:	bf 2c       	mov	r11, r15
    1038:	0f ef       	ldi	r16, 0xFF	; 255
    103a:	1f ef       	ldi	r17, 0xFF	; 255
    103c:	2f ef       	ldi	r18, 0xFF	; 255
    103e:	3f e0       	ldi	r19, 0x0F	; 15
    1040:	b7 01       	movw	r22, r14
    1042:	a6 01       	movw	r20, r12
    1044:	ce 01       	movw	r24, r28
    1046:	0e 94 70 06 	call	0xce0	; 0xce0 <put_fat>
    104a:	81 11       	cpse	r24, r1
    104c:	2c c0       	rjmp	.+88     	; 0x10a6 <create_chain+0x18a>
    104e:	41 14       	cp	r4, r1
    1050:	51 04       	cpc	r5, r1
    1052:	61 04       	cpc	r6, r1
    1054:	71 04       	cpc	r7, r1
    1056:	59 f0       	breq	.+22     	; 0x106e <create_chain+0x152>
    1058:	0c 2d       	mov	r16, r12
    105a:	1d 2d       	mov	r17, r13
    105c:	2e 2d       	mov	r18, r14
    105e:	3f 2d       	mov	r19, r15
    1060:	b3 01       	movw	r22, r6
    1062:	a2 01       	movw	r20, r4
    1064:	ce 01       	movw	r24, r28
    1066:	0e 94 70 06 	call	0xce0	; 0xce0 <put_fat>
    106a:	81 11       	cpse	r24, r1
    106c:	1c c0       	rjmp	.+56     	; 0x10a6 <create_chain+0x18a>
    106e:	8a 86       	std	Y+10, r8	; 0x0a
    1070:	9b 86       	std	Y+11, r9	; 0x0b
    1072:	ac 86       	std	Y+12, r10	; 0x0c
    1074:	bd 86       	std	Y+13, r11	; 0x0d
    1076:	8e 85       	ldd	r24, Y+14	; 0x0e
    1078:	9f 85       	ldd	r25, Y+15	; 0x0f
    107a:	a8 89       	ldd	r26, Y+16	; 0x10
    107c:	b9 89       	ldd	r27, Y+17	; 0x11
    107e:	8f 3f       	cpi	r24, 0xFF	; 255
    1080:	2f ef       	ldi	r18, 0xFF	; 255
    1082:	92 07       	cpc	r25, r18
    1084:	a2 07       	cpc	r26, r18
    1086:	b2 07       	cpc	r27, r18
    1088:	99 f1       	breq	.+102    	; 0x10f0 <create_chain+0x1d4>
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	a1 09       	sbc	r26, r1
    108e:	b1 09       	sbc	r27, r1
    1090:	8e 87       	std	Y+14, r24	; 0x0e
    1092:	9f 87       	std	Y+15, r25	; 0x0f
    1094:	a8 8b       	std	Y+16, r26	; 0x10
    1096:	b9 8b       	std	Y+17, r27	; 0x11
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	8d 83       	std	Y+5, r24	; 0x05
    109c:	6c 2d       	mov	r22, r12
    109e:	7d 2d       	mov	r23, r13
    10a0:	8e 2d       	mov	r24, r14
    10a2:	9f 2d       	mov	r25, r15
    10a4:	2e c0       	rjmp	.+92     	; 0x1102 <create_chain+0x1e6>
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	41 f1       	breq	.+80     	; 0x10fa <create_chain+0x1de>
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	27 c0       	rjmp	.+78     	; 0x1102 <create_chain+0x1e6>
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	22 c0       	rjmp	.+68     	; 0x1102 <create_chain+0x1e6>
    10be:	6c 2d       	mov	r22, r12
    10c0:	7d 2d       	mov	r23, r13
    10c2:	8e 2d       	mov	r24, r14
    10c4:	9f 2d       	mov	r25, r15
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <create_chain+0x1e6>
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	18 c0       	rjmp	.+48     	; 0x1102 <create_chain+0x1e6>
    10d2:	6f ef       	ldi	r22, 0xFF	; 255
    10d4:	7f ef       	ldi	r23, 0xFF	; 255
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	9f ef       	ldi	r25, 0xFF	; 255
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <create_chain+0x1e6>
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e c0       	rjmp	.+28     	; 0x1102 <create_chain+0x1e6>
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <create_chain+0x1e6>
    10f0:	6c 2d       	mov	r22, r12
    10f2:	7d 2d       	mov	r23, r13
    10f4:	8e 2d       	mov	r24, r14
    10f6:	9f 2d       	mov	r25, r15
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <create_chain+0x1e6>
    10fa:	6f ef       	ldi	r22, 0xFF	; 255
    10fc:	7f ef       	ldi	r23, 0xFF	; 255
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	9f 90       	pop	r9
    1118:	8f 90       	pop	r8
    111a:	7f 90       	pop	r7
    111c:	6f 90       	pop	r6
    111e:	5f 90       	pop	r5
    1120:	4f 90       	pop	r4
    1122:	3f 90       	pop	r3
    1124:	2f 90       	pop	r2
    1126:	08 95       	ret

00001128 <dir_next>:
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	dc 01       	movw	r26, r24
    1142:	14 96       	adiw	r26, 0x04	; 4
    1144:	cd 91       	ld	r28, X+
    1146:	dc 91       	ld	r29, X
    1148:	15 97       	sbiw	r26, 0x05	; 5
    114a:	21 96       	adiw	r28, 0x01	; 1
    114c:	09 f4       	brne	.+2      	; 0x1150 <dir_next+0x28>
    114e:	02 c1       	rjmp	.+516    	; 0x1354 <dir_next+0x22c>
    1150:	1e 96       	adiw	r26, 0x0e	; 14
    1152:	8d 90       	ld	r8, X+
    1154:	9d 90       	ld	r9, X+
    1156:	ad 90       	ld	r10, X+
    1158:	bc 90       	ld	r11, X
    115a:	51 97       	sbiw	r26, 0x11	; 17
    115c:	81 14       	cp	r8, r1
    115e:	91 04       	cpc	r9, r1
    1160:	a1 04       	cpc	r10, r1
    1162:	b1 04       	cpc	r11, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <dir_next+0x40>
    1166:	f8 c0       	rjmp	.+496    	; 0x1358 <dir_next+0x230>
    1168:	7b 01       	movw	r14, r22
    116a:	8c 01       	movw	r16, r24
    116c:	6e 01       	movw	r12, r28
    116e:	bf e0       	ldi	r27, 0x0F	; 15
    1170:	cb 22       	and	r12, r27
    1172:	dd 24       	eor	r13, r13
    1174:	c1 14       	cp	r12, r1
    1176:	d1 04       	cpc	r13, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <dir_next+0x54>
    117a:	d0 c0       	rjmp	.+416    	; 0x131c <dir_next+0x1f4>
    117c:	ef ef       	ldi	r30, 0xFF	; 255
    117e:	8e 1a       	sub	r8, r30
    1180:	9e 0a       	sbc	r9, r30
    1182:	ae 0a       	sbc	r10, r30
    1184:	be 0a       	sbc	r11, r30
    1186:	dc 01       	movw	r26, r24
    1188:	1e 96       	adiw	r26, 0x0e	; 14
    118a:	8d 92       	st	X+, r8
    118c:	9d 92       	st	X+, r9
    118e:	ad 92       	st	X+, r10
    1190:	bc 92       	st	X, r11
    1192:	51 97       	sbiw	r26, 0x11	; 17
    1194:	1a 96       	adiw	r26, 0x0a	; 10
    1196:	4d 91       	ld	r20, X+
    1198:	5d 91       	ld	r21, X+
    119a:	6d 91       	ld	r22, X+
    119c:	7c 91       	ld	r23, X
    119e:	1d 97       	sbiw	r26, 0x0d	; 13
    11a0:	41 15       	cp	r20, r1
    11a2:	51 05       	cpc	r21, r1
    11a4:	61 05       	cpc	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	49 f4       	brne	.+18     	; 0x11bc <dir_next+0x94>
    11aa:	ed 91       	ld	r30, X+
    11ac:	fc 91       	ld	r31, X
    11ae:	80 85       	ldd	r24, Z+8	; 0x08
    11b0:	91 85       	ldd	r25, Z+9	; 0x09
    11b2:	c8 17       	cp	r28, r24
    11b4:	d9 07       	cpc	r29, r25
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <dir_next+0x92>
    11b8:	d1 c0       	rjmp	.+418    	; 0x135c <dir_next+0x234>
    11ba:	b0 c0       	rjmp	.+352    	; 0x131c <dir_next+0x1f4>
    11bc:	dc 01       	movw	r26, r24
    11be:	ed 91       	ld	r30, X+
    11c0:	fc 91       	ld	r31, X
    11c2:	22 81       	ldd	r18, Z+2	; 0x02
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	21 50       	subi	r18, 0x01	; 1
    11c8:	31 09       	sbc	r19, r1
    11ca:	ce 01       	movw	r24, r28
    11cc:	92 95       	swap	r25
    11ce:	82 95       	swap	r24
    11d0:	8f 70       	andi	r24, 0x0F	; 15
    11d2:	89 27       	eor	r24, r25
    11d4:	9f 70       	andi	r25, 0x0F	; 15
    11d6:	89 27       	eor	r24, r25
    11d8:	28 23       	and	r18, r24
    11da:	39 23       	and	r19, r25
    11dc:	23 2b       	or	r18, r19
    11de:	09 f0       	breq	.+2      	; 0x11e2 <dir_next+0xba>
    11e0:	9d c0       	rjmp	.+314    	; 0x131c <dir_next+0x1f4>
    11e2:	cf 01       	movw	r24, r30
    11e4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_fat>
    11e8:	4b 01       	movw	r8, r22
    11ea:	5c 01       	movw	r10, r24
    11ec:	62 30       	cpi	r22, 0x02	; 2
    11ee:	71 05       	cpc	r23, r1
    11f0:	81 05       	cpc	r24, r1
    11f2:	91 05       	cpc	r25, r1
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <dir_next+0xd0>
    11f6:	b4 c0       	rjmp	.+360    	; 0x1360 <dir_next+0x238>
    11f8:	6f 3f       	cpi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	09 f4       	brne	.+2      	; 0x1204 <dir_next+0xdc>
    1202:	b0 c0       	rjmp	.+352    	; 0x1364 <dir_next+0x23c>
    1204:	d8 01       	movw	r26, r16
    1206:	ed 91       	ld	r30, X+
    1208:	fc 91       	ld	r31, X
    120a:	82 8d       	ldd	r24, Z+26	; 0x1a
    120c:	93 8d       	ldd	r25, Z+27	; 0x1b
    120e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1210:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1212:	88 16       	cp	r8, r24
    1214:	99 06       	cpc	r9, r25
    1216:	aa 06       	cpc	r10, r26
    1218:	bb 06       	cpc	r11, r27
    121a:	08 f4       	brcc	.+2      	; 0x121e <dir_next+0xf6>
    121c:	6d c0       	rjmp	.+218    	; 0x12f8 <dir_next+0x1d0>
    121e:	ef 28       	or	r14, r15
    1220:	09 f4       	brne	.+2      	; 0x1224 <dir_next+0xfc>
    1222:	a2 c0       	rjmp	.+324    	; 0x1368 <dir_next+0x240>
    1224:	d8 01       	movw	r26, r16
    1226:	1a 96       	adiw	r26, 0x0a	; 10
    1228:	4d 91       	ld	r20, X+
    122a:	5d 91       	ld	r21, X+
    122c:	6d 91       	ld	r22, X+
    122e:	7c 91       	ld	r23, X
    1230:	1d 97       	sbiw	r26, 0x0d	; 13
    1232:	cf 01       	movw	r24, r30
    1234:	0e 94 8e 07 	call	0xf1c	; 0xf1c <create_chain>
    1238:	4b 01       	movw	r8, r22
    123a:	5c 01       	movw	r10, r24
    123c:	61 15       	cp	r22, r1
    123e:	71 05       	cpc	r23, r1
    1240:	81 05       	cpc	r24, r1
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <dir_next+0x120>
    1246:	92 c0       	rjmp	.+292    	; 0x136c <dir_next+0x244>
    1248:	61 30       	cpi	r22, 0x01	; 1
    124a:	71 05       	cpc	r23, r1
    124c:	81 05       	cpc	r24, r1
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <dir_next+0x12c>
    1252:	8e c0       	rjmp	.+284    	; 0x1370 <dir_next+0x248>
    1254:	6f 3f       	cpi	r22, 0xFF	; 255
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	09 f4       	brne	.+2      	; 0x1260 <dir_next+0x138>
    125e:	8a c0       	rjmp	.+276    	; 0x1374 <dir_next+0x24c>
    1260:	d8 01       	movw	r26, r16
    1262:	8d 91       	ld	r24, X+
    1264:	9c 91       	ld	r25, X
    1266:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sync_window>
    126a:	81 11       	cpse	r24, r1
    126c:	85 c0       	rjmp	.+266    	; 0x1378 <dir_next+0x250>
    126e:	f8 01       	movw	r30, r16
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	fc 01       	movw	r30, r24
    1276:	f6 96       	adiw	r30, 0x36	; 54
    1278:	8a 5c       	subi	r24, 0xCA	; 202
    127a:	9d 4f       	sbci	r25, 0xFD	; 253
    127c:	11 92       	st	Z+, r1
    127e:	e8 17       	cp	r30, r24
    1280:	f9 07       	cpc	r31, r25
    1282:	e1 f7       	brne	.-8      	; 0x127c <dir_next+0x154>
    1284:	d8 01       	movw	r26, r16
    1286:	ed 90       	ld	r14, X+
    1288:	fc 90       	ld	r15, X
    128a:	b5 01       	movw	r22, r10
    128c:	a4 01       	movw	r20, r8
    128e:	c7 01       	movw	r24, r14
    1290:	0e 94 a6 04 	call	0x94c	; 0x94c <clust2sect>
    1294:	f7 01       	movw	r30, r14
    1296:	62 ab       	std	Z+50, r22	; 0x32
    1298:	73 ab       	std	Z+51, r23	; 0x33
    129a:	84 ab       	std	Z+52, r24	; 0x34
    129c:	95 ab       	std	Z+53, r25	; 0x35
    129e:	f1 2c       	mov	r15, r1
    12a0:	ee 24       	eor	r14, r14
    12a2:	e3 94       	inc	r14
    12a4:	17 c0       	rjmp	.+46     	; 0x12d4 <dir_next+0x1ac>
    12a6:	e4 82       	std	Z+4, r14	; 0x04
    12a8:	d8 01       	movw	r26, r16
    12aa:	8d 91       	ld	r24, X+
    12ac:	9c 91       	ld	r25, X
    12ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sync_window>
    12b2:	81 11       	cpse	r24, r1
    12b4:	63 c0       	rjmp	.+198    	; 0x137c <dir_next+0x254>
    12b6:	d8 01       	movw	r26, r16
    12b8:	ed 91       	ld	r30, X+
    12ba:	fc 91       	ld	r31, X
    12bc:	82 a9       	ldd	r24, Z+50	; 0x32
    12be:	93 a9       	ldd	r25, Z+51	; 0x33
    12c0:	a4 a9       	ldd	r26, Z+52	; 0x34
    12c2:	b5 a9       	ldd	r27, Z+53	; 0x35
    12c4:	01 96       	adiw	r24, 0x01	; 1
    12c6:	a1 1d       	adc	r26, r1
    12c8:	b1 1d       	adc	r27, r1
    12ca:	82 ab       	std	Z+50, r24	; 0x32
    12cc:	93 ab       	std	Z+51, r25	; 0x33
    12ce:	a4 ab       	std	Z+52, r26	; 0x34
    12d0:	b5 ab       	std	Z+53, r27	; 0x35
    12d2:	f3 94       	inc	r15
    12d4:	d8 01       	movw	r26, r16
    12d6:	ed 91       	ld	r30, X+
    12d8:	fc 91       	ld	r31, X
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	f8 16       	cp	r15, r24
    12de:	18 f3       	brcs	.-58     	; 0x12a6 <dir_next+0x17e>
    12e0:	82 a9       	ldd	r24, Z+50	; 0x32
    12e2:	93 a9       	ldd	r25, Z+51	; 0x33
    12e4:	a4 a9       	ldd	r26, Z+52	; 0x34
    12e6:	b5 a9       	ldd	r27, Z+53	; 0x35
    12e8:	8f 19       	sub	r24, r15
    12ea:	91 09       	sbc	r25, r1
    12ec:	a1 09       	sbc	r26, r1
    12ee:	b1 09       	sbc	r27, r1
    12f0:	82 ab       	std	Z+50, r24	; 0x32
    12f2:	93 ab       	std	Z+51, r25	; 0x33
    12f4:	a4 ab       	std	Z+52, r26	; 0x34
    12f6:	b5 ab       	std	Z+53, r27	; 0x35
    12f8:	f8 01       	movw	r30, r16
    12fa:	82 86       	std	Z+10, r8	; 0x0a
    12fc:	93 86       	std	Z+11, r9	; 0x0b
    12fe:	a4 86       	std	Z+12, r10	; 0x0c
    1300:	b5 86       	std	Z+13, r11	; 0x0d
    1302:	b5 01       	movw	r22, r10
    1304:	a4 01       	movw	r20, r8
    1306:	80 81       	ld	r24, Z
    1308:	91 81       	ldd	r25, Z+1	; 0x01
    130a:	0e 94 a6 04 	call	0x94c	; 0x94c <clust2sect>
    130e:	d8 01       	movw	r26, r16
    1310:	1e 96       	adiw	r26, 0x0e	; 14
    1312:	6d 93       	st	X+, r22
    1314:	7d 93       	st	X+, r23
    1316:	8d 93       	st	X+, r24
    1318:	9c 93       	st	X, r25
    131a:	51 97       	sbiw	r26, 0x11	; 17
    131c:	f8 01       	movw	r30, r16
    131e:	d5 83       	std	Z+5, r29	; 0x05
    1320:	c4 83       	std	Z+4, r28	; 0x04
    1322:	cc 0c       	add	r12, r12
    1324:	dd 1c       	adc	r13, r13
    1326:	cc 0c       	add	r12, r12
    1328:	dd 1c       	adc	r13, r13
    132a:	cc 0c       	add	r12, r12
    132c:	dd 1c       	adc	r13, r13
    132e:	cc 0c       	add	r12, r12
    1330:	dd 1c       	adc	r13, r13
    1332:	cc 0c       	add	r12, r12
    1334:	dd 1c       	adc	r13, r13
    1336:	f6 e3       	ldi	r31, 0x36	; 54
    1338:	cf 0e       	add	r12, r31
    133a:	d1 1c       	adc	r13, r1
    133c:	d8 01       	movw	r26, r16
    133e:	8d 91       	ld	r24, X+
    1340:	9c 91       	ld	r25, X
    1342:	11 97       	sbiw	r26, 0x01	; 1
    1344:	c8 0e       	add	r12, r24
    1346:	d9 1e       	adc	r13, r25
    1348:	53 96       	adiw	r26, 0x13	; 19
    134a:	dc 92       	st	X, r13
    134c:	ce 92       	st	-X, r12
    134e:	52 97       	sbiw	r26, 0x12	; 18
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	15 c0       	rjmp	.+42     	; 0x137e <dir_next+0x256>
    1354:	84 e0       	ldi	r24, 0x04	; 4
    1356:	13 c0       	rjmp	.+38     	; 0x137e <dir_next+0x256>
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	11 c0       	rjmp	.+34     	; 0x137e <dir_next+0x256>
    135c:	84 e0       	ldi	r24, 0x04	; 4
    135e:	0f c0       	rjmp	.+30     	; 0x137e <dir_next+0x256>
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	0d c0       	rjmp	.+26     	; 0x137e <dir_next+0x256>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	0b c0       	rjmp	.+22     	; 0x137e <dir_next+0x256>
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	09 c0       	rjmp	.+18     	; 0x137e <dir_next+0x256>
    136c:	87 e0       	ldi	r24, 0x07	; 7
    136e:	07 c0       	rjmp	.+14     	; 0x137e <dir_next+0x256>
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	05 c0       	rjmp	.+10     	; 0x137e <dir_next+0x256>
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	03 c0       	rjmp	.+6      	; 0x137e <dir_next+0x256>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	01 c0       	rjmp	.+2      	; 0x137e <dir_next+0x256>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	9f 90       	pop	r9
    1394:	8f 90       	pop	r8
    1396:	08 95       	ret

00001398 <follow_path>:
    1398:	2f 92       	push	r2
    139a:	3f 92       	push	r3
    139c:	4f 92       	push	r4
    139e:	5f 92       	push	r5
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 d0       	rcall	.+0      	; 0x13be <follow_path+0x26>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <follow_path+0x28>
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8c 01       	movw	r16, r24
    13c6:	6b 01       	movw	r12, r22
    13c8:	db 01       	movw	r26, r22
    13ca:	8c 91       	ld	r24, X
    13cc:	8f 32       	cpi	r24, 0x2F	; 47
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <follow_path+0x3c>
    13d0:	8c 35       	cpi	r24, 0x5C	; 92
    13d2:	49 f4       	brne	.+18     	; 0x13e6 <follow_path+0x4e>
    13d4:	bf ef       	ldi	r27, 0xFF	; 255
    13d6:	cb 1a       	sub	r12, r27
    13d8:	db 0a       	sbc	r13, r27
    13da:	f8 01       	movw	r30, r16
    13dc:	16 82       	std	Z+6, r1	; 0x06
    13de:	17 82       	std	Z+7, r1	; 0x07
    13e0:	10 86       	std	Z+8, r1	; 0x08
    13e2:	11 86       	std	Z+9, r1	; 0x09
    13e4:	0c c0       	rjmp	.+24     	; 0x13fe <follow_path+0x66>
    13e6:	d8 01       	movw	r26, r16
    13e8:	ed 91       	ld	r30, X+
    13ea:	fc 91       	ld	r31, X
    13ec:	86 89       	ldd	r24, Z+22	; 0x16
    13ee:	97 89       	ldd	r25, Z+23	; 0x17
    13f0:	a0 8d       	ldd	r26, Z+24	; 0x18
    13f2:	b1 8d       	ldd	r27, Z+25	; 0x19
    13f4:	f8 01       	movw	r30, r16
    13f6:	86 83       	std	Z+6, r24	; 0x06
    13f8:	97 83       	std	Z+7, r25	; 0x07
    13fa:	a0 87       	std	Z+8, r26	; 0x08
    13fc:	b1 87       	std	Z+9, r27	; 0x09
    13fe:	d6 01       	movw	r26, r12
    1400:	8c 91       	ld	r24, X
    1402:	80 32       	cpi	r24, 0x20	; 32
    1404:	48 f4       	brcc	.+18     	; 0x1418 <follow_path+0x80>
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	c8 01       	movw	r24, r16
    140c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <dir_sdi>
    1410:	f8 01       	movw	r30, r16
    1412:	13 8a       	std	Z+19, r1	; 0x13
    1414:	12 8a       	std	Z+18, r1	; 0x12
    1416:	5d c1       	rjmp	.+698    	; 0x16d2 <follow_path+0x33a>
    1418:	68 94       	set
    141a:	bb 24       	eor	r11, r11
    141c:	b5 f8       	bld	r11, 5
    141e:	0f 2e       	mov	r0, r31
    1420:	fe e2       	ldi	r31, 0x2E	; 46
    1422:	8f 2e       	mov	r8, r31
    1424:	f0 2d       	mov	r31, r0
    1426:	21 2c       	mov	r2, r1
    1428:	a1 2c       	mov	r10, r1
    142a:	91 2c       	mov	r9, r1
    142c:	68 94       	set
    142e:	77 24       	eor	r7, r7
    1430:	73 f8       	bld	r7, 3
    1432:	41 2c       	mov	r4, r1
    1434:	31 2c       	mov	r3, r1
    1436:	79 82       	std	Y+1, r7	; 0x01
    1438:	4a 82       	std	Y+2, r4	; 0x02
    143a:	1c 83       	std	Y+4, r17	; 0x04
    143c:	0b 83       	std	Y+3, r16	; 0x03
    143e:	57 2c       	mov	r5, r7
    1440:	d6 01       	movw	r26, r12
    1442:	2b 81       	ldd	r18, Y+3	; 0x03
    1444:	3c 81       	ldd	r19, Y+4	; 0x04
    1446:	fd 01       	movw	r30, r26
    1448:	8d 91       	ld	r24, X+
    144a:	8f 32       	cpi	r24, 0x2F	; 47
    144c:	e1 f3       	breq	.-8      	; 0x1446 <follow_path+0xae>
    144e:	8c 35       	cpi	r24, 0x5C	; 92
    1450:	d1 f3       	breq	.-12     	; 0x1446 <follow_path+0xae>
    1452:	3c 83       	std	Y+4, r19	; 0x04
    1454:	2b 83       	std	Y+3, r18	; 0x03
    1456:	d9 01       	movw	r26, r18
    1458:	54 96       	adiw	r26, 0x14	; 20
    145a:	6d 91       	ld	r22, X+
    145c:	7c 91       	ld	r23, X
    145e:	55 97       	sbiw	r26, 0x15	; 21
    1460:	db 01       	movw	r26, r22
    1462:	cb 01       	movw	r24, r22
    1464:	0b 96       	adiw	r24, 0x0b	; 11
    1466:	bd 92       	st	X+, r11
    1468:	a8 17       	cp	r26, r24
    146a:	b9 07       	cpc	r27, r25
    146c:	e1 f7       	brne	.-8      	; 0x1466 <follow_path+0xce>
    146e:	3c 83       	std	Y+4, r19	; 0x04
    1470:	2b 83       	std	Y+3, r18	; 0x03
    1472:	80 81       	ld	r24, Z
    1474:	8e 32       	cpi	r24, 0x2E	; 46
    1476:	51 f0       	breq	.+20     	; 0x148c <follow_path+0xf4>
    1478:	6f 01       	movw	r12, r30
    147a:	ea 2c       	mov	r14, r10
    147c:	f9 2c       	mov	r15, r9
    147e:	2a 2d       	mov	r18, r10
    1480:	39 2d       	mov	r19, r9
    1482:	65 2c       	mov	r6, r5
    1484:	74 2c       	mov	r7, r4
    1486:	03 2d       	mov	r16, r3
    1488:	df 01       	movw	r26, r30
    148a:	1d c0       	rjmp	.+58     	; 0x14c6 <follow_path+0x12e>
    148c:	db 01       	movw	r26, r22
    148e:	8c 92       	st	X, r8
    1490:	81 81       	ldd	r24, Z+1	; 0x01
    1492:	8e 32       	cpi	r24, 0x2E	; 46
    1494:	49 f4       	brne	.+18     	; 0x14a8 <follow_path+0x110>
    1496:	11 96       	adiw	r26, 0x01	; 1
    1498:	8c 92       	st	X, r8
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	8e 32       	cpi	r24, 0x2E	; 46
    149e:	09 f4       	brne	.+2      	; 0x14a2 <follow_path+0x10a>
    14a0:	6f c0       	rjmp	.+222    	; 0x1580 <follow_path+0x1e8>
    14a2:	23 e0       	ldi	r18, 0x03	; 3
    14a4:	32 2d       	mov	r19, r2
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <follow_path+0x114>
    14a8:	22 e0       	ldi	r18, 0x02	; 2
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	8f 32       	cpi	r24, 0x2F	; 47
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <follow_path+0x11a>
    14b0:	cf c0       	rjmp	.+414    	; 0x1650 <follow_path+0x2b8>
    14b2:	8c 35       	cpi	r24, 0x5C	; 92
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <follow_path+0x120>
    14b6:	cc c0       	rjmp	.+408    	; 0x1650 <follow_path+0x2b8>
    14b8:	81 32       	cpi	r24, 0x21	; 33
    14ba:	08 f0       	brcs	.+2      	; 0x14be <follow_path+0x126>
    14bc:	e2 c0       	rjmp	.+452    	; 0x1682 <follow_path+0x2ea>
    14be:	c3 c0       	rjmp	.+390    	; 0x1646 <follow_path+0x2ae>
    14c0:	fb 01       	movw	r30, r22
    14c2:	83 87       	std	Z+11, r24	; 0x0b
    14c4:	e0 c0       	rjmp	.+448    	; 0x1686 <follow_path+0x2ee>
    14c6:	2f 5f       	subi	r18, 0xFF	; 255
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	1d 91       	ld	r17, X+
    14cc:	11 32       	cpi	r17, 0x21	; 33
    14ce:	08 f4       	brcc	.+2      	; 0x14d2 <follow_path+0x13a>
    14d0:	d0 c0       	rjmp	.+416    	; 0x1672 <follow_path+0x2da>
    14d2:	1f 32       	cpi	r17, 0x2F	; 47
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <follow_path+0x140>
    14d6:	d1 c0       	rjmp	.+418    	; 0x167a <follow_path+0x2e2>
    14d8:	1c 35       	cpi	r17, 0x5C	; 92
    14da:	09 f4       	brne	.+2      	; 0x14de <follow_path+0x146>
    14dc:	ce c0       	rjmp	.+412    	; 0x167a <follow_path+0x2e2>
    14de:	1e 32       	cpi	r17, 0x2E	; 46
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <follow_path+0x14c>
    14e2:	bb c0       	rjmp	.+374    	; 0x165a <follow_path+0x2c2>
    14e4:	e6 14       	cp	r14, r6
    14e6:	f7 04       	cpc	r15, r7
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <follow_path+0x154>
    14ea:	cb c0       	rjmp	.+406    	; 0x1682 <follow_path+0x2ea>
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <follow_path+0x16a>
    14ee:	00 0f       	add	r16, r16
    14f0:	00 0f       	add	r16, r16
    14f2:	e9 80       	ldd	r14, Y+1	; 0x01
    14f4:	fa 80       	ldd	r15, Y+2	; 0x02
    14f6:	0f 2e       	mov	r0, r31
    14f8:	fb e0       	ldi	r31, 0x0B	; 11
    14fa:	6f 2e       	mov	r6, r31
    14fc:	f0 2d       	mov	r31, r0
    14fe:	71 2c       	mov	r7, r1
    1500:	e2 cf       	rjmp	.-60     	; 0x14c6 <follow_path+0x12e>
    1502:	11 23       	and	r17, r17
    1504:	0c f4       	brge	.+2      	; 0x1508 <follow_path+0x170>
    1506:	bd c0       	rjmp	.+378    	; 0x1682 <follow_path+0x2ea>
    1508:	41 2f       	mov	r20, r17
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	42 32       	cpi	r20, 0x22	; 34
    150e:	51 05       	cpc	r21, r1
    1510:	b9 f1       	breq	.+110    	; 0x1580 <follow_path+0x1e8>
    1512:	e0 e1       	ldi	r30, 0x10	; 16
    1514:	f1 e0       	ldi	r31, 0x01	; 1
    1516:	81 91       	ld	r24, Z+
    1518:	88 23       	and	r24, r24
    151a:	09 f4       	brne	.+2      	; 0x151e <follow_path+0x186>
    151c:	a4 c0       	rjmp	.+328    	; 0x1666 <follow_path+0x2ce>
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	48 17       	cp	r20, r24
    1522:	59 07       	cpc	r21, r25
    1524:	c1 f7       	brne	.-16     	; 0x1516 <follow_path+0x17e>
    1526:	2c c0       	rjmp	.+88     	; 0x1580 <follow_path+0x1e8>
    1528:	02 60       	ori	r16, 0x02	; 2
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <follow_path+0x1a0>
    152c:	8f e9       	ldi	r24, 0x9F	; 159
    152e:	81 0f       	add	r24, r17
    1530:	8a 31       	cpi	r24, 0x1A	; 26
    1532:	10 f4       	brcc	.+4      	; 0x1538 <follow_path+0x1a0>
    1534:	01 60       	ori	r16, 0x01	; 1
    1536:	10 52       	subi	r17, 0x20	; 32
    1538:	fb 01       	movw	r30, r22
    153a:	ee 0d       	add	r30, r14
    153c:	ff 1d       	adc	r31, r15
    153e:	10 83       	st	Z, r17
    1540:	f7 01       	movw	r30, r14
    1542:	31 96       	adiw	r30, 0x01	; 1
    1544:	7f 01       	movw	r14, r30
    1546:	bf cf       	rjmp	.-130    	; 0x14c6 <follow_path+0x12e>
    1548:	ef 28       	or	r14, r15
    154a:	09 f4       	brne	.+2      	; 0x154e <follow_path+0x1b6>
    154c:	9a c0       	rjmp	.+308    	; 0x1682 <follow_path+0x2ea>
    154e:	db 01       	movw	r26, r22
    1550:	9c 91       	ld	r25, X
    1552:	95 3e       	cpi	r25, 0xE5	; 229
    1554:	11 f4       	brne	.+4      	; 0x155a <follow_path+0x1c2>
    1556:	95 e0       	ldi	r25, 0x05	; 5
    1558:	9c 93       	st	X, r25
    155a:	b8 e0       	ldi	r27, 0x08	; 8
    155c:	6b 16       	cp	r6, r27
    155e:	71 04       	cpc	r7, r1
    1560:	11 f4       	brne	.+4      	; 0x1566 <follow_path+0x1ce>
    1562:	00 0f       	add	r16, r16
    1564:	00 0f       	add	r16, r16
    1566:	90 2f       	mov	r25, r16
    1568:	93 70       	andi	r25, 0x03	; 3
    156a:	91 30       	cpi	r25, 0x01	; 1
    156c:	09 f4       	brne	.+2      	; 0x1570 <follow_path+0x1d8>
    156e:	80 61       	ori	r24, 0x10	; 16
    1570:	90 2f       	mov	r25, r16
    1572:	9c 70       	andi	r25, 0x0C	; 12
    1574:	94 30       	cpi	r25, 0x04	; 4
    1576:	09 f4       	brne	.+2      	; 0x157a <follow_path+0x1e2>
    1578:	88 60       	ori	r24, 0x08	; 8
    157a:	fb 01       	movw	r30, r22
    157c:	83 87       	std	Z+11, r24	; 0x0b
    157e:	83 c0       	rjmp	.+262    	; 0x1686 <follow_path+0x2ee>
    1580:	86 e0       	ldi	r24, 0x06	; 6
    1582:	a7 c0       	rjmp	.+334    	; 0x16d2 <follow_path+0x33a>
    1584:	0b 81       	ldd	r16, Y+3	; 0x03
    1586:	1c 81       	ldd	r17, Y+4	; 0x04
    1588:	d8 01       	movw	r26, r16
    158a:	1e 96       	adiw	r26, 0x0e	; 14
    158c:	4d 91       	ld	r20, X+
    158e:	5d 91       	ld	r21, X+
    1590:	6d 91       	ld	r22, X+
    1592:	7c 91       	ld	r23, X
    1594:	51 97       	sbiw	r26, 0x11	; 17
    1596:	8d 91       	ld	r24, X+
    1598:	9c 91       	ld	r25, X
    159a:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
    159e:	81 11       	cpse	r24, r1
    15a0:	84 c0       	rjmp	.+264    	; 0x16aa <follow_path+0x312>
    15a2:	f8 01       	movw	r30, r16
    15a4:	62 89       	ldd	r22, Z+18	; 0x12
    15a6:	73 89       	ldd	r23, Z+19	; 0x13
    15a8:	db 01       	movw	r26, r22
    15aa:	9c 91       	ld	r25, X
    15ac:	99 23       	and	r25, r25
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <follow_path+0x21a>
    15b0:	89 c0       	rjmp	.+274    	; 0x16c4 <follow_path+0x32c>
    15b2:	1b 96       	adiw	r26, 0x0b	; 11
    15b4:	9c 91       	ld	r25, X
    15b6:	93 fd       	sbrc	r25, 3
    15b8:	12 c0       	rjmp	.+36     	; 0x15de <follow_path+0x246>
    15ba:	44 89       	ldd	r20, Z+20	; 0x14
    15bc:	55 89       	ldd	r21, Z+21	; 0x15
    15be:	fb 01       	movw	r30, r22
    15c0:	da 01       	movw	r26, r20
    15c2:	9b 01       	movw	r18, r22
    15c4:	25 5f       	subi	r18, 0xF5	; 245
    15c6:	3f 4f       	sbci	r19, 0xFF	; 255
    15c8:	78 01       	movw	r14, r16
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <follow_path+0x23c>
    15cc:	e2 17       	cp	r30, r18
    15ce:	f3 07       	cpc	r31, r19
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <follow_path+0x23c>
    15d2:	63 c0       	rjmp	.+198    	; 0x169a <follow_path+0x302>
    15d4:	11 91       	ld	r17, Z+
    15d6:	9d 91       	ld	r25, X+
    15d8:	19 17       	cp	r17, r25
    15da:	c1 f3       	breq	.-16     	; 0x15cc <follow_path+0x234>
    15dc:	87 01       	movw	r16, r14
    15de:	6a 2d       	mov	r22, r10
    15e0:	79 2d       	mov	r23, r9
    15e2:	c8 01       	movw	r24, r16
    15e4:	0e 94 94 08 	call	0x1128	; 0x1128 <dir_next>
    15e8:	88 23       	and	r24, r24
    15ea:	71 f2       	breq	.-100    	; 0x1588 <follow_path+0x1f0>
    15ec:	1c 83       	std	Y+4, r17	; 0x04
    15ee:	0b 83       	std	Y+3, r16	; 0x03
    15f0:	5e c0       	rjmp	.+188    	; 0x16ae <follow_path+0x316>
    15f2:	95 ff       	sbrs	r25, 5
    15f4:	0c c0       	rjmp	.+24     	; 0x160e <follow_path+0x276>
    15f6:	eb 81       	ldd	r30, Y+3	; 0x03
    15f8:	fc 81       	ldd	r31, Y+4	; 0x04
    15fa:	16 82       	std	Z+6, r1	; 0x06
    15fc:	17 82       	std	Z+7, r1	; 0x07
    15fe:	10 86       	std	Z+8, r1	; 0x08
    1600:	11 86       	std	Z+9, r1	; 0x09
    1602:	13 8a       	std	Z+19, r1	; 0x13
    1604:	12 8a       	std	Z+18, r1	; 0x12
    1606:	92 ff       	sbrs	r25, 2
    1608:	1b cf       	rjmp	.-458    	; 0x1440 <follow_path+0xa8>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	62 c0       	rjmp	.+196    	; 0x16d2 <follow_path+0x33a>
    160e:	92 fd       	sbrc	r25, 2
    1610:	16 c0       	rjmp	.+44     	; 0x163e <follow_path+0x2a6>
    1612:	85 e0       	ldi	r24, 0x05	; 5
    1614:	5e c0       	rjmp	.+188    	; 0x16d2 <follow_path+0x33a>
    1616:	db 01       	movw	r26, r22
    1618:	1b 96       	adiw	r26, 0x0b	; 11
    161a:	8c 91       	ld	r24, X
    161c:	84 ff       	sbrs	r24, 4
    161e:	11 c0       	rjmp	.+34     	; 0x1642 <follow_path+0x2aa>
    1620:	eb 81       	ldd	r30, Y+3	; 0x03
    1622:	fc 81       	ldd	r31, Y+4	; 0x04
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	0e 94 8e 00 	call	0x11c	; 0x11c <ld_clust>
    162c:	ab 81       	ldd	r26, Y+3	; 0x03
    162e:	bc 81       	ldd	r27, Y+4	; 0x04
    1630:	16 96       	adiw	r26, 0x06	; 6
    1632:	6d 93       	st	X+, r22
    1634:	7d 93       	st	X+, r23
    1636:	8d 93       	st	X+, r24
    1638:	9c 93       	st	X, r25
    163a:	19 97       	sbiw	r26, 0x09	; 9
    163c:	01 cf       	rjmp	.-510    	; 0x1440 <follow_path+0xa8>
    163e:	84 e0       	ldi	r24, 0x04	; 4
    1640:	48 c0       	rjmp	.+144    	; 0x16d2 <follow_path+0x33a>
    1642:	85 e0       	ldi	r24, 0x05	; 5
    1644:	46 c0       	rjmp	.+140    	; 0x16d2 <follow_path+0x33a>
    1646:	6f 01       	movw	r12, r30
    1648:	c2 0e       	add	r12, r18
    164a:	d3 1e       	adc	r13, r19
    164c:	84 e2       	ldi	r24, 0x24	; 36
    164e:	38 cf       	rjmp	.-400    	; 0x14c0 <follow_path+0x128>
    1650:	6f 01       	movw	r12, r30
    1652:	c2 0e       	add	r12, r18
    1654:	d3 1e       	adc	r13, r19
    1656:	8b 2d       	mov	r24, r11
    1658:	33 cf       	rjmp	.-410    	; 0x14c0 <follow_path+0x128>
    165a:	e8 e0       	ldi	r30, 0x08	; 8
    165c:	6e 16       	cp	r6, r30
    165e:	71 04       	cpc	r7, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <follow_path+0x2cc>
    1662:	45 cf       	rjmp	.-374    	; 0x14ee <follow_path+0x156>
    1664:	8d cf       	rjmp	.-230    	; 0x1580 <follow_path+0x1e8>
    1666:	8f eb       	ldi	r24, 0xBF	; 191
    1668:	81 0f       	add	r24, r17
    166a:	8a 31       	cpi	r24, 0x1A	; 26
    166c:	08 f4       	brcc	.+2      	; 0x1670 <follow_path+0x2d8>
    166e:	5c cf       	rjmp	.-328    	; 0x1528 <follow_path+0x190>
    1670:	5d cf       	rjmp	.-326    	; 0x152c <follow_path+0x194>
    1672:	c2 0e       	add	r12, r18
    1674:	d3 1e       	adc	r13, r19
    1676:	84 e0       	ldi	r24, 0x04	; 4
    1678:	67 cf       	rjmp	.-306    	; 0x1548 <follow_path+0x1b0>
    167a:	c2 0e       	add	r12, r18
    167c:	d3 1e       	adc	r13, r19
    167e:	83 2d       	mov	r24, r3
    1680:	63 cf       	rjmp	.-314    	; 0x1548 <follow_path+0x1b0>
    1682:	86 e0       	ldi	r24, 0x06	; 6
    1684:	26 c0       	rjmp	.+76     	; 0x16d2 <follow_path+0x33a>
    1686:	6a 2d       	mov	r22, r10
    1688:	79 2d       	mov	r23, r9
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <dir_sdi>
    1692:	88 23       	and	r24, r24
    1694:	09 f4       	brne	.+2      	; 0x1698 <follow_path+0x300>
    1696:	76 cf       	rjmp	.-276    	; 0x1584 <follow_path+0x1ec>
    1698:	0a c0       	rjmp	.+20     	; 0x16ae <follow_path+0x316>
    169a:	fc 82       	std	Y+4, r15	; 0x04
    169c:	eb 82       	std	Y+3, r14	; 0x03
    169e:	da 01       	movw	r26, r20
    16a0:	1b 96       	adiw	r26, 0x0b	; 11
    16a2:	9c 91       	ld	r25, X
    16a4:	92 ff       	sbrs	r25, 2
    16a6:	b7 cf       	rjmp	.-146    	; 0x1616 <follow_path+0x27e>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <follow_path+0x33a>
    16aa:	1c 83       	std	Y+4, r17	; 0x04
    16ac:	0b 83       	std	Y+3, r16	; 0x03
    16ae:	ab 81       	ldd	r26, Y+3	; 0x03
    16b0:	bc 81       	ldd	r27, Y+4	; 0x04
    16b2:	54 96       	adiw	r26, 0x14	; 20
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	55 97       	sbiw	r26, 0x15	; 21
    16ba:	93 85       	ldd	r25, Z+11	; 0x0b
    16bc:	84 30       	cpi	r24, 0x04	; 4
    16be:	09 f4       	brne	.+2      	; 0x16c2 <follow_path+0x32a>
    16c0:	98 cf       	rjmp	.-208    	; 0x15f2 <follow_path+0x25a>
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <follow_path+0x33a>
    16c4:	1c 83       	std	Y+4, r17	; 0x04
    16c6:	0b 83       	std	Y+3, r16	; 0x03
    16c8:	04 88       	ldd	r0, Z+20	; 0x14
    16ca:	f5 89       	ldd	r31, Z+21	; 0x15
    16cc:	e0 2d       	mov	r30, r0
    16ce:	93 85       	ldd	r25, Z+11	; 0x0b
    16d0:	90 cf       	rjmp	.-224    	; 0x15f2 <follow_path+0x25a>
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	9f 90       	pop	r9
    16f0:	8f 90       	pop	r8
    16f2:	7f 90       	pop	r7
    16f4:	6f 90       	pop	r6
    16f6:	5f 90       	pop	r5
    16f8:	4f 90       	pop	r4
    16fa:	3f 90       	pop	r3
    16fc:	2f 90       	pop	r2
    16fe:	08 95       	ret

00001700 <f_mount>:
    1700:	81 11       	cpse	r24, r1
    1702:	12 c0       	rjmp	.+36     	; 0x1728 <f_mount+0x28>
    1704:	e0 91 2b 01 	lds	r30, 0x012B
    1708:	f0 91 2c 01 	lds	r31, 0x012C
    170c:	30 97       	sbiw	r30, 0x00	; 0
    170e:	09 f0       	breq	.+2      	; 0x1712 <f_mount+0x12>
    1710:	10 82       	st	Z, r1
    1712:	61 15       	cp	r22, r1
    1714:	71 05       	cpc	r23, r1
    1716:	11 f0       	breq	.+4      	; 0x171c <f_mount+0x1c>
    1718:	fb 01       	movw	r30, r22
    171a:	10 82       	st	Z, r1
    171c:	70 93 2c 01 	sts	0x012C, r23
    1720:	60 93 2b 01 	sts	0x012B, r22
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	08 95       	ret
    1728:	8b e0       	ldi	r24, 0x0B	; 11
    172a:	08 95       	ret

0000172c <f_open>:
    172c:	2f 92       	push	r2
    172e:	3f 92       	push	r3
    1730:	4f 92       	push	r4
    1732:	5f 92       	push	r5
    1734:	6f 92       	push	r6
    1736:	7f 92       	push	r7
    1738:	8f 92       	push	r8
    173a:	9f 92       	push	r9
    173c:	af 92       	push	r10
    173e:	bf 92       	push	r11
    1740:	cf 92       	push	r12
    1742:	df 92       	push	r13
    1744:	ef 92       	push	r14
    1746:	ff 92       	push	r15
    1748:	0f 93       	push	r16
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	ae 97       	sbiw	r28, 0x2e	; 46
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	7c a3       	std	Y+36, r23	; 0x24
    1762:	6b a3       	std	Y+35, r22	; 0x23
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	09 f4       	brne	.+2      	; 0x176a <f_open+0x3e>
    1768:	63 c1       	rjmp	.+710    	; 0x1a30 <f_open+0x304>
    176a:	14 2f       	mov	r17, r20
    176c:	7c 01       	movw	r14, r24
    176e:	dc 01       	movw	r26, r24
    1770:	1d 92       	st	X+, r1
    1772:	1c 92       	st	X, r1
    1774:	4e 71       	andi	r20, 0x1E	; 30
    1776:	be 01       	movw	r22, r28
    1778:	6f 5f       	subi	r22, 0xFF	; 255
    177a:	7f 4f       	sbci	r23, 0xFF	; 255
    177c:	ce 01       	movw	r24, r28
    177e:	83 96       	adiw	r24, 0x23	; 35
    1780:	0e 94 ac 01 	call	0x358	; 0x358 <chk_mounted>
    1784:	81 11       	cpse	r24, r1
    1786:	9f c1       	rjmp	.+830    	; 0x1ac6 <f_open+0x39a>
    1788:	b1 2f       	mov	r27, r17
    178a:	bf 71       	andi	r27, 0x1F	; 31
    178c:	3b 2e       	mov	r3, r27
    178e:	ce 01       	movw	r24, r28
    1790:	47 96       	adiw	r24, 0x17	; 23
    1792:	9e 8b       	std	Y+22, r25	; 0x16
    1794:	8d 8b       	std	Y+21, r24	; 0x15
    1796:	6b a1       	ldd	r22, Y+35	; 0x23
    1798:	7c a1       	ldd	r23, Y+36	; 0x24
    179a:	46 97       	sbiw	r24, 0x16	; 22
    179c:	0e 94 cc 09 	call	0x1398	; 0x1398 <follow_path>
    17a0:	cb 88       	ldd	r12, Y+19	; 0x13
    17a2:	dc 88       	ldd	r13, Y+20	; 0x14
    17a4:	81 11       	cpse	r24, r1
    17a6:	50 c1       	rjmp	.+672    	; 0x1a48 <f_open+0x31c>
    17a8:	c1 14       	cp	r12, r1
    17aa:	d1 04       	cpc	r13, r1
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <f_open+0x84>
    17ae:	47 c1       	rjmp	.+654    	; 0x1a3e <f_open+0x312>
    17b0:	41 c1       	rjmp	.+642    	; 0x1a34 <f_open+0x308>
    17b2:	84 30       	cpi	r24, 0x04	; 4
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <f_open+0x8c>
    17b6:	7b c1       	rjmp	.+758    	; 0x1aae <f_open+0x382>
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <dir_sdi>
    17c4:	81 11       	cpse	r24, r1
    17c6:	45 c1       	rjmp	.+650    	; 0x1a52 <f_open+0x326>
    17c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    17ca:	58 89       	ldd	r21, Y+16	; 0x10
    17cc:	69 89       	ldd	r22, Y+17	; 0x11
    17ce:	7a 89       	ldd	r23, Y+18	; 0x12
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
    17d8:	81 11       	cpse	r24, r1
    17da:	3b c1       	rjmp	.+630    	; 0x1a52 <f_open+0x326>
    17dc:	eb 89       	ldd	r30, Y+19	; 0x13
    17de:	fc 89       	ldd	r31, Y+20	; 0x14
    17e0:	80 81       	ld	r24, Z
    17e2:	85 3e       	cpi	r24, 0xE5	; 229
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <f_open+0xbc>
    17e6:	3e c1       	rjmp	.+636    	; 0x1a64 <f_open+0x338>
    17e8:	88 23       	and	r24, r24
    17ea:	09 f4       	brne	.+2      	; 0x17ee <f_open+0xc2>
    17ec:	3b c1       	rjmp	.+630    	; 0x1a64 <f_open+0x338>
    17ee:	61 e0       	ldi	r22, 0x01	; 1
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	ce 01       	movw	r24, r28
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	0e 94 94 08 	call	0x1128	; 0x1128 <dir_next>
    17fa:	88 23       	and	r24, r24
    17fc:	29 f3       	breq	.-54     	; 0x17c8 <f_open+0x9c>
    17fe:	29 c1       	rjmp	.+594    	; 0x1a52 <f_open+0x326>
    1800:	eb 89       	ldd	r30, Y+19	; 0x13
    1802:	fc 89       	ldd	r31, Y+20	; 0x14
    1804:	cf 01       	movw	r24, r30
    1806:	80 96       	adiw	r24, 0x20	; 32
    1808:	11 92       	st	Z+, r1
    180a:	e8 17       	cp	r30, r24
    180c:	f9 07       	cpc	r31, r25
    180e:	e1 f7       	brne	.-8      	; 0x1808 <f_open+0xdc>
    1810:	6d 89       	ldd	r22, Y+21	; 0x15
    1812:	7e 89       	ldd	r23, Y+22	; 0x16
    1814:	4b e0       	ldi	r20, 0x0B	; 11
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	8b 89       	ldd	r24, Y+19	; 0x13
    181a:	9c 89       	ldd	r25, Y+20	; 0x14
    181c:	0e 94 62 00 	call	0xc4	; 0xc4 <mem_cpy>
    1820:	e9 81       	ldd	r30, Y+1	; 0x01
    1822:	fa 81       	ldd	r31, Y+2	; 0x02
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	84 83       	std	Z+4, r24	; 0x04
    1828:	e3 2d       	mov	r30, r3
    182a:	e8 60       	ori	r30, 0x08	; 8
    182c:	3e 2e       	mov	r3, r30
    182e:	cb 88       	ldd	r12, Y+19	; 0x13
    1830:	dc 88       	ldd	r13, Y+20	; 0x14
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <f_open+0x118>
    1834:	d6 01       	movw	r26, r12
    1836:	1b 96       	adiw	r26, 0x0b	; 11
    1838:	8c 91       	ld	r24, X
    183a:	81 71       	andi	r24, 0x11	; 17
    183c:	09 f0       	breq	.+2      	; 0x1840 <f_open+0x114>
    183e:	1d c1       	rjmp	.+570    	; 0x1a7a <f_open+0x34e>
    1840:	12 fd       	sbrc	r17, 2
    1842:	1d c1       	rjmp	.+570    	; 0x1a7e <f_open+0x352>
    1844:	33 fe       	sbrs	r3, 3
    1846:	b7 c0       	rjmp	.+366    	; 0x19b6 <f_open+0x28a>
    1848:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <get_fattime>
    184c:	f6 01       	movw	r30, r12
    184e:	66 87       	std	Z+14, r22	; 0x0e
    1850:	77 87       	std	Z+15, r23	; 0x0f
    1852:	80 8b       	std	Z+16, r24	; 0x10
    1854:	91 8b       	std	Z+17, r25	; 0x11
    1856:	13 86       	std	Z+11, r1	; 0x0b
    1858:	14 8e       	std	Z+28, r1	; 0x1c
    185a:	15 8e       	std	Z+29, r1	; 0x1d
    185c:	16 8e       	std	Z+30, r1	; 0x1e
    185e:	17 8e       	std	Z+31, r1	; 0x1f
    1860:	e9 81       	ldd	r30, Y+1	; 0x01
    1862:	fa 81       	ldd	r31, Y+2	; 0x02
    1864:	fe a3       	std	Y+38, r31	; 0x26
    1866:	ed a3       	std	Y+37, r30	; 0x25
    1868:	b6 01       	movw	r22, r12
    186a:	cf 01       	movw	r24, r30
    186c:	0e 94 8e 00 	call	0x11c	; 0x11c <ld_clust>
    1870:	4b 01       	movw	r8, r22
    1872:	5c 01       	movw	r10, r24
    1874:	d6 01       	movw	r26, r12
    1876:	5b 96       	adiw	r26, 0x1b	; 27
    1878:	1c 92       	st	X, r1
    187a:	1e 92       	st	-X, r1
    187c:	5a 97       	sbiw	r26, 0x1a	; 26
    187e:	55 96       	adiw	r26, 0x15	; 21
    1880:	1c 92       	st	X, r1
    1882:	1e 92       	st	-X, r1
    1884:	54 97       	sbiw	r26, 0x14	; 20
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	ed a1       	ldd	r30, Y+37	; 0x25
    188a:	fe a1       	ldd	r31, Y+38	; 0x26
    188c:	84 83       	std	Z+4, r24	; 0x04
    188e:	81 14       	cp	r8, r1
    1890:	91 04       	cpc	r9, r1
    1892:	a1 04       	cpc	r10, r1
    1894:	b1 04       	cpc	r11, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <f_open+0x16e>
    1898:	8e c0       	rjmp	.+284    	; 0x19b6 <f_open+0x28a>
    189a:	22 a9       	ldd	r18, Z+50	; 0x32
    189c:	33 a9       	ldd	r19, Z+51	; 0x33
    189e:	44 a9       	ldd	r20, Z+52	; 0x34
    18a0:	55 a9       	ldd	r21, Z+53	; 0x35
    18a2:	2b a7       	std	Y+43, r18	; 0x2b
    18a4:	3c a7       	std	Y+44, r19	; 0x2c
    18a6:	4d a7       	std	Y+45, r20	; 0x2d
    18a8:	5e a7       	std	Y+46, r21	; 0x2e
    18aa:	b2 e0       	ldi	r27, 0x02	; 2
    18ac:	8b 16       	cp	r8, r27
    18ae:	91 04       	cpc	r9, r1
    18b0:	a1 04       	cpc	r10, r1
    18b2:	b1 04       	cpc	r11, r1
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <f_open+0x18c>
    18b6:	e8 c0       	rjmp	.+464    	; 0x1a88 <f_open+0x35c>
    18b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ba:	93 8d       	ldd	r25, Z+27	; 0x1b
    18bc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    18be:	b5 8d       	ldd	r27, Z+29	; 0x1d
    18c0:	88 16       	cp	r8, r24
    18c2:	99 06       	cpc	r9, r25
    18c4:	aa 06       	cpc	r10, r26
    18c6:	bb 06       	cpc	r11, r27
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <f_open+0x1a0>
    18ca:	e0 c0       	rjmp	.+448    	; 0x1a8c <f_open+0x360>
    18cc:	8f a2       	std	Y+39, r8	; 0x27
    18ce:	98 a6       	std	Y+40, r9	; 0x28
    18d0:	a9 a6       	std	Y+41, r10	; 0x29
    18d2:	ba a6       	std	Y+42, r11	; 0x2a
    18d4:	22 24       	eor	r2, r2
    18d6:	23 94       	inc	r2
    18d8:	43 c0       	rjmp	.+134    	; 0x1960 <f_open+0x234>
    18da:	4f a1       	ldd	r20, Y+39	; 0x27
    18dc:	58 a5       	ldd	r21, Y+40	; 0x28
    18de:	69 a5       	ldd	r22, Y+41	; 0x29
    18e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    18e2:	8d a1       	ldd	r24, Y+37	; 0x25
    18e4:	9e a1       	ldd	r25, Y+38	; 0x26
    18e6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_fat>
    18ea:	2b 01       	movw	r4, r22
    18ec:	3c 01       	movw	r6, r24
    18ee:	61 15       	cp	r22, r1
    18f0:	71 05       	cpc	r23, r1
    18f2:	81 05       	cpc	r24, r1
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <f_open+0x1ce>
    18f8:	43 c0       	rjmp	.+134    	; 0x1980 <f_open+0x254>
    18fa:	61 30       	cpi	r22, 0x01	; 1
    18fc:	71 05       	cpc	r23, r1
    18fe:	81 05       	cpc	r24, r1
    1900:	91 05       	cpc	r25, r1
    1902:	09 f4       	brne	.+2      	; 0x1906 <f_open+0x1da>
    1904:	c5 c0       	rjmp	.+394    	; 0x1a90 <f_open+0x364>
    1906:	6f 3f       	cpi	r22, 0xFF	; 255
    1908:	7f 4f       	sbci	r23, 0xFF	; 255
    190a:	8f 4f       	sbci	r24, 0xFF	; 255
    190c:	9f 4f       	sbci	r25, 0xFF	; 255
    190e:	09 f4       	brne	.+2      	; 0x1912 <f_open+0x1e6>
    1910:	c1 c0       	rjmp	.+386    	; 0x1a94 <f_open+0x368>
    1912:	00 e0       	ldi	r16, 0x00	; 0
    1914:	10 e0       	ldi	r17, 0x00	; 0
    1916:	98 01       	movw	r18, r16
    1918:	4f a1       	ldd	r20, Y+39	; 0x27
    191a:	58 a5       	ldd	r21, Y+40	; 0x28
    191c:	69 a5       	ldd	r22, Y+41	; 0x29
    191e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1920:	8d a1       	ldd	r24, Y+37	; 0x25
    1922:	9e a1       	ldd	r25, Y+38	; 0x26
    1924:	0e 94 70 06 	call	0xce0	; 0xce0 <put_fat>
    1928:	81 11       	cpse	r24, r1
    192a:	b5 c0       	rjmp	.+362    	; 0x1a96 <f_open+0x36a>
    192c:	ed a1       	ldd	r30, Y+37	; 0x25
    192e:	fe a1       	ldd	r31, Y+38	; 0x26
    1930:	86 85       	ldd	r24, Z+14	; 0x0e
    1932:	97 85       	ldd	r25, Z+15	; 0x0f
    1934:	a0 89       	ldd	r26, Z+16	; 0x10
    1936:	b1 89       	ldd	r27, Z+17	; 0x11
    1938:	8f 3f       	cpi	r24, 0xFF	; 255
    193a:	ff ef       	ldi	r31, 0xFF	; 255
    193c:	9f 07       	cpc	r25, r31
    193e:	af 07       	cpc	r26, r31
    1940:	bf 07       	cpc	r27, r31
    1942:	51 f0       	breq	.+20     	; 0x1958 <f_open+0x22c>
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	a1 1d       	adc	r26, r1
    1948:	b1 1d       	adc	r27, r1
    194a:	ed a1       	ldd	r30, Y+37	; 0x25
    194c:	fe a1       	ldd	r31, Y+38	; 0x26
    194e:	86 87       	std	Z+14, r24	; 0x0e
    1950:	97 87       	std	Z+15, r25	; 0x0f
    1952:	a0 8b       	std	Z+16, r26	; 0x10
    1954:	b1 8b       	std	Z+17, r27	; 0x11
    1956:	25 82       	std	Z+5, r2	; 0x05
    1958:	4f a2       	std	Y+39, r4	; 0x27
    195a:	58 a6       	std	Y+40, r5	; 0x28
    195c:	69 a6       	std	Y+41, r6	; 0x29
    195e:	7a a6       	std	Y+42, r7	; 0x2a
    1960:	ed a1       	ldd	r30, Y+37	; 0x25
    1962:	fe a1       	ldd	r31, Y+38	; 0x26
    1964:	82 8d       	ldd	r24, Z+26	; 0x1a
    1966:	93 8d       	ldd	r25, Z+27	; 0x1b
    1968:	a4 8d       	ldd	r26, Z+28	; 0x1c
    196a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    196c:	2f a1       	ldd	r18, Y+39	; 0x27
    196e:	38 a5       	ldd	r19, Y+40	; 0x28
    1970:	49 a5       	ldd	r20, Y+41	; 0x29
    1972:	5a a5       	ldd	r21, Y+42	; 0x2a
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	4a 07       	cpc	r20, r26
    197a:	5b 07       	cpc	r21, r27
    197c:	08 f4       	brcc	.+2      	; 0x1980 <f_open+0x254>
    197e:	ad cf       	rjmp	.-166    	; 0x18da <f_open+0x1ae>
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	31 e0       	ldi	r19, 0x01	; 1
    1986:	83 1a       	sub	r8, r19
    1988:	91 08       	sbc	r9, r1
    198a:	a1 08       	sbc	r10, r1
    198c:	b1 08       	sbc	r11, r1
    198e:	dc 01       	movw	r26, r24
    1990:	1a 96       	adiw	r26, 0x0a	; 10
    1992:	8d 92       	st	X+, r8
    1994:	9d 92       	st	X+, r9
    1996:	ad 92       	st	X+, r10
    1998:	bc 92       	st	X, r11
    199a:	1d 97       	sbiw	r26, 0x0d	; 13
    199c:	4b a5       	ldd	r20, Y+43	; 0x2b
    199e:	5c a5       	ldd	r21, Y+44	; 0x2c
    19a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    19a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    19a4:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
    19a8:	88 23       	and	r24, r24
    19aa:	39 f0       	breq	.+14     	; 0x19ba <f_open+0x28e>
    19ac:	8c c0       	rjmp	.+280    	; 0x1ac6 <f_open+0x39a>
    19ae:	11 ff       	sbrs	r17, 1
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <f_open+0x28a>
    19b2:	80 fd       	sbrc	r24, 0
    19b4:	74 c0       	rjmp	.+232    	; 0x1a9e <f_open+0x372>
    19b6:	33 fe       	sbrs	r3, 3
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <f_open+0x294>
    19ba:	b3 2d       	mov	r27, r3
    19bc:	b0 62       	ori	r27, 0x20	; 32
    19be:	3b 2e       	mov	r3, r27
    19c0:	e9 81       	ldd	r30, Y+1	; 0x01
    19c2:	fa 81       	ldd	r31, Y+2	; 0x02
    19c4:	82 a9       	ldd	r24, Z+50	; 0x32
    19c6:	93 a9       	ldd	r25, Z+51	; 0x33
    19c8:	a4 a9       	ldd	r26, Z+52	; 0x34
    19ca:	b5 a9       	ldd	r27, Z+53	; 0x35
    19cc:	f7 01       	movw	r30, r14
    19ce:	82 8f       	std	Z+26, r24	; 0x1a
    19d0:	93 8f       	std	Z+27, r25	; 0x1b
    19d2:	a4 8f       	std	Z+28, r26	; 0x1c
    19d4:	b5 8f       	std	Z+29, r27	; 0x1d
    19d6:	d7 8e       	std	Z+31, r13	; 0x1f
    19d8:	c6 8e       	std	Z+30, r12	; 0x1e
    19da:	d7 01       	movw	r26, r14
    19dc:	14 96       	adiw	r26, 0x04	; 4
    19de:	3c 92       	st	X, r3
    19e0:	a9 80       	ldd	r10, Y+1	; 0x01
    19e2:	ba 80       	ldd	r11, Y+2	; 0x02
    19e4:	b6 01       	movw	r22, r12
    19e6:	c5 01       	movw	r24, r10
    19e8:	0e 94 8e 00 	call	0x11c	; 0x11c <ld_clust>
    19ec:	f7 01       	movw	r30, r14
    19ee:	66 87       	std	Z+14, r22	; 0x0e
    19f0:	77 87       	std	Z+15, r23	; 0x0f
    19f2:	80 8b       	std	Z+16, r24	; 0x10
    19f4:	91 8b       	std	Z+17, r25	; 0x11
    19f6:	f6 01       	movw	r30, r12
    19f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    19fa:	95 8d       	ldd	r25, Z+29	; 0x1d
    19fc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    19fe:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1a00:	f7 01       	movw	r30, r14
    1a02:	82 87       	std	Z+10, r24	; 0x0a
    1a04:	93 87       	std	Z+11, r25	; 0x0b
    1a06:	a4 87       	std	Z+12, r26	; 0x0c
    1a08:	b5 87       	std	Z+13, r27	; 0x0d
    1a0a:	16 82       	std	Z+6, r1	; 0x06
    1a0c:	17 82       	std	Z+7, r1	; 0x07
    1a0e:	10 86       	std	Z+8, r1	; 0x08
    1a10:	11 86       	std	Z+9, r1	; 0x09
    1a12:	16 8a       	std	Z+22, r1	; 0x16
    1a14:	17 8a       	std	Z+23, r1	; 0x17
    1a16:	10 8e       	std	Z+24, r1	; 0x18
    1a18:	11 8e       	std	Z+25, r1	; 0x19
    1a1a:	b1 82       	std	Z+1, r11	; 0x01
    1a1c:	a0 82       	st	Z, r10
    1a1e:	d5 01       	movw	r26, r10
    1a20:	16 96       	adiw	r26, 0x06	; 6
    1a22:	8d 91       	ld	r24, X+
    1a24:	9c 91       	ld	r25, X
    1a26:	17 97       	sbiw	r26, 0x07	; 7
    1a28:	93 83       	std	Z+3, r25	; 0x03
    1a2a:	82 83       	std	Z+2, r24	; 0x02
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	4b c0       	rjmp	.+150    	; 0x1ac6 <f_open+0x39a>
    1a30:	89 e0       	ldi	r24, 0x09	; 9
    1a32:	49 c0       	rjmp	.+146    	; 0x1ac6 <f_open+0x39a>
    1a34:	41 2f       	mov	r20, r17
    1a36:	4c 71       	andi	r20, 0x1C	; 28
    1a38:	c9 f5       	brne	.+114    	; 0x1aac <f_open+0x380>
    1a3a:	86 e0       	ldi	r24, 0x06	; 6
    1a3c:	33 c0       	rjmp	.+102    	; 0x1aa4 <f_open+0x378>
    1a3e:	81 2f       	mov	r24, r17
    1a40:	8c 71       	andi	r24, 0x1C	; 28
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <f_open+0x31a>
    1a44:	f7 ce       	rjmp	.-530    	; 0x1834 <f_open+0x108>
    1a46:	39 c0       	rjmp	.+114    	; 0x1aba <f_open+0x38e>
    1a48:	41 2f       	mov	r20, r17
    1a4a:	4c 71       	andi	r20, 0x1C	; 28
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <f_open+0x324>
    1a4e:	b1 ce       	rjmp	.-670    	; 0x17b2 <f_open+0x86>
    1a50:	29 c0       	rjmp	.+82     	; 0x1aa4 <f_open+0x378>
    1a52:	b3 2d       	mov	r27, r3
    1a54:	b8 60       	ori	r27, 0x08	; 8
    1a56:	3b 2e       	mov	r3, r27
    1a58:	cb 88       	ldd	r12, Y+19	; 0x13
    1a5a:	dc 88       	ldd	r13, Y+20	; 0x14
    1a5c:	88 23       	and	r24, r24
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <f_open+0x336>
    1a60:	f1 ce       	rjmp	.-542    	; 0x1844 <f_open+0x118>
    1a62:	20 c0       	rjmp	.+64     	; 0x1aa4 <f_open+0x378>
    1a64:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a66:	58 89       	ldd	r21, Y+16	; 0x10
    1a68:	69 89       	ldd	r22, Y+17	; 0x11
    1a6a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
    1a74:	81 11       	cpse	r24, r1
    1a76:	1b c0       	rjmp	.+54     	; 0x1aae <f_open+0x382>
    1a78:	c3 ce       	rjmp	.-634    	; 0x1800 <f_open+0xd4>
    1a7a:	87 e0       	ldi	r24, 0x07	; 7
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <f_open+0x354>
    1a7e:	88 e0       	ldi	r24, 0x08	; 8
    1a80:	88 23       	and	r24, r24
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <f_open+0x35a>
    1a84:	98 cf       	rjmp	.-208    	; 0x19b6 <f_open+0x28a>
    1a86:	1f c0       	rjmp	.+62     	; 0x1ac6 <f_open+0x39a>
    1a88:	82 e0       	ldi	r24, 0x02	; 2
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <f_open+0x36a>
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <f_open+0x36a>
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <f_open+0x36a>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	88 23       	and	r24, r24
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <f_open+0x370>
    1a9a:	8f cf       	rjmp	.-226    	; 0x19ba <f_open+0x28e>
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <f_open+0x39a>
    1a9e:	87 e0       	ldi	r24, 0x07	; 7
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <f_open+0x378>
    1aa2:	84 e0       	ldi	r24, 0x04	; 4
    1aa4:	88 23       	and	r24, r24
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <f_open+0x37e>
    1aa8:	98 cf       	rjmp	.-208    	; 0x19da <f_open+0x2ae>
    1aaa:	0d c0       	rjmp	.+26     	; 0x1ac6 <f_open+0x39a>
    1aac:	86 e0       	ldi	r24, 0x06	; 6
    1aae:	e3 2d       	mov	r30, r3
    1ab0:	e8 60       	ori	r30, 0x08	; 8
    1ab2:	3e 2e       	mov	r3, r30
    1ab4:	cb 88       	ldd	r12, Y+19	; 0x13
    1ab6:	dc 88       	ldd	r13, Y+20	; 0x14
    1ab8:	f5 cf       	rjmp	.-22     	; 0x1aa4 <f_open+0x378>
    1aba:	d6 01       	movw	r26, r12
    1abc:	1b 96       	adiw	r26, 0x0b	; 11
    1abe:	8c 91       	ld	r24, X
    1ac0:	84 fd       	sbrc	r24, 4
    1ac2:	ef cf       	rjmp	.-34     	; 0x1aa2 <f_open+0x376>
    1ac4:	74 cf       	rjmp	.-280    	; 0x19ae <f_open+0x282>
    1ac6:	ae 96       	adiw	r28, 0x2e	; 46
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	bf 90       	pop	r11
    1ae4:	af 90       	pop	r10
    1ae6:	9f 90       	pop	r9
    1ae8:	8f 90       	pop	r8
    1aea:	7f 90       	pop	r7
    1aec:	6f 90       	pop	r6
    1aee:	5f 90       	pop	r5
    1af0:	4f 90       	pop	r4
    1af2:	3f 90       	pop	r3
    1af4:	2f 90       	pop	r2
    1af6:	08 95       	ret

00001af8 <f_read>:
    1af8:	2f 92       	push	r2
    1afa:	3f 92       	push	r3
    1afc:	4f 92       	push	r4
    1afe:	5f 92       	push	r5
    1b00:	6f 92       	push	r6
    1b02:	7f 92       	push	r7
    1b04:	8f 92       	push	r8
    1b06:	9f 92       	push	r9
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	4b 01       	movw	r8, r22
    1b20:	6a 01       	movw	r12, r20
    1b22:	59 01       	movw	r10, r18
    1b24:	f9 01       	movw	r30, r18
    1b26:	11 82       	std	Z+1, r1	; 0x01
    1b28:	10 82       	st	Z, r1
    1b2a:	0e 94 87 01 	call	0x30e	; 0x30e <validate>
    1b2e:	81 11       	cpse	r24, r1
    1b30:	18 c1       	rjmp	.+560    	; 0x1d62 <f_read+0x26a>
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	88 23       	and	r24, r24
    1b36:	0c f4       	brge	.+2      	; 0x1b3a <f_read+0x42>
    1b38:	0f c1       	rjmp	.+542    	; 0x1d58 <f_read+0x260>
    1b3a:	80 ff       	sbrs	r24, 0
    1b3c:	0f c1       	rjmp	.+542    	; 0x1d5c <f_read+0x264>
    1b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b40:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b42:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b44:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b46:	4e 81       	ldd	r20, Y+6	; 0x06
    1b48:	5f 81       	ldd	r21, Y+7	; 0x07
    1b4a:	68 85       	ldd	r22, Y+8	; 0x08
    1b4c:	79 85       	ldd	r23, Y+9	; 0x09
    1b4e:	84 1b       	sub	r24, r20
    1b50:	95 0b       	sbc	r25, r21
    1b52:	a6 0b       	sbc	r26, r22
    1b54:	b7 0b       	sbc	r27, r23
    1b56:	a6 01       	movw	r20, r12
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	84 17       	cp	r24, r20
    1b5e:	95 07       	cpc	r25, r21
    1b60:	a6 07       	cpc	r26, r22
    1b62:	b7 07       	cpc	r27, r23
    1b64:	08 f4       	brcc	.+2      	; 0x1b68 <f_read+0x70>
    1b66:	6c 01       	movw	r12, r24
    1b68:	c1 14       	cp	r12, r1
    1b6a:	d1 04       	cpc	r13, r1
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <f_read+0x78>
    1b6e:	f8 c0       	rjmp	.+496    	; 0x1d60 <f_read+0x268>
    1b70:	4e 81       	ldd	r20, Y+6	; 0x06
    1b72:	5f 81       	ldd	r21, Y+7	; 0x07
    1b74:	68 85       	ldd	r22, Y+8	; 0x08
    1b76:	79 85       	ldd	r23, Y+9	; 0x09
    1b78:	db 01       	movw	r26, r22
    1b7a:	ca 01       	movw	r24, r20
    1b7c:	91 70       	andi	r25, 0x01	; 1
    1b7e:	aa 27       	eor	r26, r26
    1b80:	bb 27       	eor	r27, r27
    1b82:	89 2b       	or	r24, r25
    1b84:	8a 2b       	or	r24, r26
    1b86:	8b 2b       	or	r24, r27
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <f_read+0x94>
    1b8a:	a0 c0       	rjmp	.+320    	; 0x1ccc <f_read+0x1d4>
    1b8c:	e8 81       	ld	r30, Y
    1b8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b90:	12 81       	ldd	r17, Z+2	; 0x02
    1b92:	11 50       	subi	r17, 0x01	; 1
    1b94:	db 01       	movw	r26, r22
    1b96:	ca 01       	movw	r24, r20
    1b98:	07 2e       	mov	r0, r23
    1b9a:	79 e0       	ldi	r23, 0x09	; 9
    1b9c:	b6 95       	lsr	r27
    1b9e:	a7 95       	ror	r26
    1ba0:	97 95       	ror	r25
    1ba2:	87 95       	ror	r24
    1ba4:	7a 95       	dec	r23
    1ba6:	d1 f7       	brne	.-12     	; 0x1b9c <f_read+0xa4>
    1ba8:	70 2d       	mov	r23, r0
    1baa:	18 23       	and	r17, r24
    1bac:	49 f5       	brne	.+82     	; 0x1c00 <f_read+0x108>
    1bae:	45 2b       	or	r20, r21
    1bb0:	46 2b       	or	r20, r22
    1bb2:	47 2b       	or	r20, r23
    1bb4:	29 f4       	brne	.+10     	; 0x1bc0 <f_read+0xc8>
    1bb6:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bb8:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bba:	88 89       	ldd	r24, Y+16	; 0x10
    1bbc:	99 89       	ldd	r25, Y+17	; 0x11
    1bbe:	07 c0       	rjmp	.+14     	; 0x1bce <f_read+0xd6>
    1bc0:	4a 89       	ldd	r20, Y+18	; 0x12
    1bc2:	5b 89       	ldd	r21, Y+19	; 0x13
    1bc4:	6c 89       	ldd	r22, Y+20	; 0x14
    1bc6:	7d 89       	ldd	r23, Y+21	; 0x15
    1bc8:	cf 01       	movw	r24, r30
    1bca:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <get_fat>
    1bce:	62 30       	cpi	r22, 0x02	; 2
    1bd0:	71 05       	cpc	r23, r1
    1bd2:	81 05       	cpc	r24, r1
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	28 f4       	brcc	.+10     	; 0x1be2 <f_read+0xea>
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	80 68       	ori	r24, 0x80	; 128
    1bdc:	8c 83       	std	Y+4, r24	; 0x04
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	c0 c0       	rjmp	.+384    	; 0x1d62 <f_read+0x26a>
    1be2:	6f 3f       	cpi	r22, 0xFF	; 255
    1be4:	ff ef       	ldi	r31, 0xFF	; 255
    1be6:	7f 07       	cpc	r23, r31
    1be8:	8f 07       	cpc	r24, r31
    1bea:	9f 07       	cpc	r25, r31
    1bec:	29 f4       	brne	.+10     	; 0x1bf8 <f_read+0x100>
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	80 68       	ori	r24, 0x80	; 128
    1bf2:	8c 83       	std	Y+4, r24	; 0x04
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	b5 c0       	rjmp	.+362    	; 0x1d62 <f_read+0x26a>
    1bf8:	6a 8b       	std	Y+18, r22	; 0x12
    1bfa:	7b 8b       	std	Y+19, r23	; 0x13
    1bfc:	8c 8b       	std	Y+20, r24	; 0x14
    1bfe:	9d 8b       	std	Y+21, r25	; 0x15
    1c00:	28 80       	ld	r2, Y
    1c02:	39 80       	ldd	r3, Y+1	; 0x01
    1c04:	4a 89       	ldd	r20, Y+18	; 0x12
    1c06:	5b 89       	ldd	r21, Y+19	; 0x13
    1c08:	6c 89       	ldd	r22, Y+20	; 0x14
    1c0a:	7d 89       	ldd	r23, Y+21	; 0x15
    1c0c:	c1 01       	movw	r24, r2
    1c0e:	0e 94 a6 04 	call	0x94c	; 0x94c <clust2sect>
    1c12:	61 15       	cp	r22, r1
    1c14:	71 05       	cpc	r23, r1
    1c16:	81 05       	cpc	r24, r1
    1c18:	91 05       	cpc	r25, r1
    1c1a:	29 f4       	brne	.+10     	; 0x1c26 <f_read+0x12e>
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	80 68       	ori	r24, 0x80	; 128
    1c20:	8c 83       	std	Y+4, r24	; 0x04
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	9e c0       	rjmp	.+316    	; 0x1d62 <f_read+0x26a>
    1c26:	2b 01       	movw	r4, r22
    1c28:	3c 01       	movw	r6, r24
    1c2a:	41 0e       	add	r4, r17
    1c2c:	51 1c       	adc	r5, r1
    1c2e:	61 1c       	adc	r6, r1
    1c30:	71 1c       	adc	r7, r1
    1c32:	76 01       	movw	r14, r12
    1c34:	ef 2c       	mov	r14, r15
    1c36:	ff 24       	eor	r15, r15
    1c38:	e6 94       	lsr	r14
    1c3a:	e1 14       	cp	r14, r1
    1c3c:	f1 04       	cpc	r15, r1
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <f_read+0x14a>
    1c40:	41 c0       	rjmp	.+130    	; 0x1cc4 <f_read+0x1cc>
    1c42:	f1 01       	movw	r30, r2
    1c44:	42 81       	ldd	r20, Z+2	; 0x02
    1c46:	24 2f       	mov	r18, r20
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	c7 01       	movw	r24, r14
    1c4c:	81 0f       	add	r24, r17
    1c4e:	91 1d       	adc	r25, r1
    1c50:	28 17       	cp	r18, r24
    1c52:	39 07       	cpc	r19, r25
    1c54:	18 f4       	brcc	.+6      	; 0x1c5c <f_read+0x164>
    1c56:	79 01       	movw	r14, r18
    1c58:	e1 1a       	sub	r14, r17
    1c5a:	f1 08       	sbc	r15, r1
    1c5c:	0e 2d       	mov	r16, r14
    1c5e:	a3 01       	movw	r20, r6
    1c60:	92 01       	movw	r18, r4
    1c62:	b4 01       	movw	r22, r8
    1c64:	f1 01       	movw	r30, r2
    1c66:	81 81       	ldd	r24, Z+1	; 0x01
    1c68:	0e 94 96 11 	call	0x232c	; 0x232c <disk_read>
    1c6c:	88 23       	and	r24, r24
    1c6e:	29 f0       	breq	.+10     	; 0x1c7a <f_read+0x182>
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	80 68       	ori	r24, 0x80	; 128
    1c74:	8c 83       	std	Y+4, r24	; 0x04
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	74 c0       	rjmp	.+232    	; 0x1d62 <f_read+0x26a>
    1c7a:	e8 81       	ld	r30, Y
    1c7c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c7e:	84 81       	ldd	r24, Z+4	; 0x04
    1c80:	88 23       	and	r24, r24
    1c82:	e1 f0       	breq	.+56     	; 0x1cbc <f_read+0x1c4>
    1c84:	82 a9       	ldd	r24, Z+50	; 0x32
    1c86:	93 a9       	ldd	r25, Z+51	; 0x33
    1c88:	a4 a9       	ldd	r26, Z+52	; 0x34
    1c8a:	b5 a9       	ldd	r27, Z+53	; 0x35
    1c8c:	84 19       	sub	r24, r4
    1c8e:	95 09       	sbc	r25, r5
    1c90:	a6 09       	sbc	r26, r6
    1c92:	b7 09       	sbc	r27, r7
    1c94:	a7 01       	movw	r20, r14
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	84 17       	cp	r24, r20
    1c9c:	95 07       	cpc	r25, r21
    1c9e:	a6 07       	cpc	r26, r22
    1ca0:	b7 07       	cpc	r27, r23
    1ca2:	60 f4       	brcc	.+24     	; 0x1cbc <f_read+0x1c4>
    1ca4:	bf 01       	movw	r22, r30
    1ca6:	6a 5c       	subi	r22, 0xCA	; 202
    1ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    1caa:	98 2f       	mov	r25, r24
    1cac:	88 27       	eor	r24, r24
    1cae:	99 0f       	add	r25, r25
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	52 e0       	ldi	r21, 0x02	; 2
    1cb4:	88 0d       	add	r24, r8
    1cb6:	99 1d       	adc	r25, r9
    1cb8:	0e 94 62 00 	call	0xc4	; 0xc4 <mem_cpy>
    1cbc:	fe 2c       	mov	r15, r14
    1cbe:	ee 24       	eor	r14, r14
    1cc0:	ff 0c       	add	r15, r15
    1cc2:	2f c0       	rjmp	.+94     	; 0x1d22 <f_read+0x22a>
    1cc4:	4e 8a       	std	Y+22, r4	; 0x16
    1cc6:	5f 8a       	std	Y+23, r5	; 0x17
    1cc8:	68 8e       	std	Y+24, r6	; 0x18
    1cca:	79 8e       	std	Y+25, r7	; 0x19
    1ccc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cce:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd0:	31 70       	andi	r19, 0x01	; 1
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	92 e0       	ldi	r25, 0x02	; 2
    1cd6:	82 1b       	sub	r24, r18
    1cd8:	93 0b       	sbc	r25, r19
    1cda:	76 01       	movw	r14, r12
    1cdc:	8c 15       	cp	r24, r12
    1cde:	9d 05       	cpc	r25, r13
    1ce0:	08 f4       	brcc	.+2      	; 0x1ce4 <f_read+0x1ec>
    1ce2:	7c 01       	movw	r14, r24
    1ce4:	4e 89       	ldd	r20, Y+22	; 0x16
    1ce6:	5f 89       	ldd	r21, Y+23	; 0x17
    1ce8:	68 8d       	ldd	r22, Y+24	; 0x18
    1cea:	79 8d       	ldd	r23, Y+25	; 0x19
    1cec:	88 81       	ld	r24, Y
    1cee:	99 81       	ldd	r25, Y+1	; 0x01
    1cf0:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
    1cf4:	88 23       	and	r24, r24
    1cf6:	29 f0       	breq	.+10     	; 0x1d02 <f_read+0x20a>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	80 68       	ori	r24, 0x80	; 128
    1cfc:	8c 83       	std	Y+4, r24	; 0x04
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	30 c0       	rjmp	.+96     	; 0x1d62 <f_read+0x26a>
    1d02:	8e 81       	ldd	r24, Y+6	; 0x06
    1d04:	9f 81       	ldd	r25, Y+7	; 0x07
    1d06:	a8 85       	ldd	r26, Y+8	; 0x08
    1d08:	b9 85       	ldd	r27, Y+9	; 0x09
    1d0a:	91 70       	andi	r25, 0x01	; 1
    1d0c:	aa 27       	eor	r26, r26
    1d0e:	bb 27       	eor	r27, r27
    1d10:	c6 96       	adiw	r24, 0x36	; 54
    1d12:	68 81       	ld	r22, Y
    1d14:	79 81       	ldd	r23, Y+1	; 0x01
    1d16:	68 0f       	add	r22, r24
    1d18:	79 1f       	adc	r23, r25
    1d1a:	a7 01       	movw	r20, r14
    1d1c:	c4 01       	movw	r24, r8
    1d1e:	0e 94 62 00 	call	0xc4	; 0xc4 <mem_cpy>
    1d22:	8e 0c       	add	r8, r14
    1d24:	9f 1c       	adc	r9, r15
    1d26:	8e 81       	ldd	r24, Y+6	; 0x06
    1d28:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2a:	a8 85       	ldd	r26, Y+8	; 0x08
    1d2c:	b9 85       	ldd	r27, Y+9	; 0x09
    1d2e:	8e 0d       	add	r24, r14
    1d30:	9f 1d       	adc	r25, r15
    1d32:	a1 1d       	adc	r26, r1
    1d34:	b1 1d       	adc	r27, r1
    1d36:	8e 83       	std	Y+6, r24	; 0x06
    1d38:	9f 83       	std	Y+7, r25	; 0x07
    1d3a:	a8 87       	std	Y+8, r26	; 0x08
    1d3c:	b9 87       	std	Y+9, r27	; 0x09
    1d3e:	f5 01       	movw	r30, r10
    1d40:	80 81       	ld	r24, Z
    1d42:	91 81       	ldd	r25, Z+1	; 0x01
    1d44:	8e 0d       	add	r24, r14
    1d46:	9f 1d       	adc	r25, r15
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24
    1d4c:	ce 18       	sub	r12, r14
    1d4e:	df 08       	sbc	r13, r15
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <f_read+0x25c>
    1d52:	0e cf       	rjmp	.-484    	; 0x1b70 <f_read+0x78>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <f_read+0x26a>
    1d58:	82 e0       	ldi	r24, 0x02	; 2
    1d5a:	03 c0       	rjmp	.+6      	; 0x1d62 <f_read+0x26a>
    1d5c:	87 e0       	ldi	r24, 0x07	; 7
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <f_read+0x26a>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	bf 90       	pop	r11
    1d74:	af 90       	pop	r10
    1d76:	9f 90       	pop	r9
    1d78:	8f 90       	pop	r8
    1d7a:	7f 90       	pop	r7
    1d7c:	6f 90       	pop	r6
    1d7e:	5f 90       	pop	r5
    1d80:	4f 90       	pop	r4
    1d82:	3f 90       	pop	r3
    1d84:	2f 90       	pop	r2
    1d86:	08 95       	ret

00001d88 <f_sync>:
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	ec 01       	movw	r28, r24
    1d92:	0e 94 87 01 	call	0x30e	; 0x30e <validate>
    1d96:	98 2f       	mov	r25, r24
    1d98:	81 11       	cpse	r24, r1
    1d9a:	91 c0       	rjmp	.+290    	; 0x1ebe <f_sync+0x136>
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	85 ff       	sbrs	r24, 5
    1da0:	8e c0       	rjmp	.+284    	; 0x1ebe <f_sync+0x136>
    1da2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1da4:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1da6:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1da8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1daa:	88 81       	ld	r24, Y
    1dac:	99 81       	ldd	r25, Y+1	; 0x01
    1dae:	0e 94 4e 01 	call	0x29c	; 0x29c <move_window>
    1db2:	98 2f       	mov	r25, r24
    1db4:	81 11       	cpse	r24, r1
    1db6:	83 c0       	rjmp	.+262    	; 0x1ebe <f_sync+0x136>
    1db8:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1dba:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1dbc:	f8 01       	movw	r30, r16
    1dbe:	83 85       	ldd	r24, Z+11	; 0x0b
    1dc0:	80 62       	ori	r24, 0x20	; 32
    1dc2:	83 87       	std	Z+11, r24	; 0x0b
    1dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1dca:	bd 85       	ldd	r27, Y+13	; 0x0d
    1dcc:	84 8f       	std	Z+28, r24	; 0x1c
    1dce:	95 8f       	std	Z+29, r25	; 0x1d
    1dd0:	a6 8f       	std	Z+30, r26	; 0x1e
    1dd2:	b7 8f       	std	Z+31, r27	; 0x1f
    1dd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd8:	a8 89       	ldd	r26, Y+16	; 0x10
    1dda:	b9 89       	ldd	r27, Y+17	; 0x11
    1ddc:	93 8f       	std	Z+27, r25	; 0x1b
    1dde:	82 8f       	std	Z+26, r24	; 0x1a
    1de0:	b5 8b       	std	Z+21, r27	; 0x15
    1de2:	a4 8b       	std	Z+20, r26	; 0x14
    1de4:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <get_fattime>
    1de8:	f8 01       	movw	r30, r16
    1dea:	66 8b       	std	Z+22, r22	; 0x16
    1dec:	77 8b       	std	Z+23, r23	; 0x17
    1dee:	80 8f       	std	Z+24, r24	; 0x18
    1df0:	91 8f       	std	Z+25, r25	; 0x19
    1df2:	13 8a       	std	Z+19, r1	; 0x13
    1df4:	12 8a       	std	Z+18, r1	; 0x12
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	8f 7d       	andi	r24, 0xDF	; 223
    1dfa:	8c 83       	std	Y+4, r24	; 0x04
    1dfc:	e8 81       	ld	r30, Y
    1dfe:	f9 81       	ldd	r31, Y+1	; 0x01
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	84 83       	std	Z+4, r24	; 0x04
    1e04:	09 90       	ld	r0, Y+
    1e06:	d8 81       	ld	r29, Y
    1e08:	c0 2d       	mov	r28, r0
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <sync_window>
    1e10:	98 2f       	mov	r25, r24
    1e12:	81 11       	cpse	r24, r1
    1e14:	54 c0       	rjmp	.+168    	; 0x1ebe <f_sync+0x136>
    1e16:	88 81       	ld	r24, Y
    1e18:	83 30       	cpi	r24, 0x03	; 3
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <f_sync+0x96>
    1e1c:	46 c0       	rjmp	.+140    	; 0x1eaa <f_sync+0x122>
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	88 23       	and	r24, r24
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <f_sync+0x9e>
    1e24:	42 c0       	rjmp	.+132    	; 0x1eaa <f_sync+0x122>
    1e26:	1a aa       	std	Y+50, r1	; 0x32
    1e28:	1b aa       	std	Y+51, r1	; 0x33
    1e2a:	1c aa       	std	Y+52, r1	; 0x34
    1e2c:	1d aa       	std	Y+53, r1	; 0x35
    1e2e:	be 01       	movw	r22, r28
    1e30:	6a 5c       	subi	r22, 0xCA	; 202
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255
    1e34:	fb 01       	movw	r30, r22
    1e36:	ce 01       	movw	r24, r28
    1e38:	8a 5c       	subi	r24, 0xCA	; 202
    1e3a:	9d 4f       	sbci	r25, 0xFD	; 253
    1e3c:	11 92       	st	Z+, r1
    1e3e:	e8 17       	cp	r30, r24
    1e40:	f9 07       	cpc	r31, r25
    1e42:	e1 f7       	brne	.-8      	; 0x1e3c <f_sync+0xb4>
    1e44:	85 e5       	ldi	r24, 0x55	; 85
    1e46:	9a ea       	ldi	r25, 0xAA	; 170
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ec 5c       	subi	r30, 0xCC	; 204
    1e4c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	80 83       	st	Z, r24
    1e52:	82 e5       	ldi	r24, 0x52	; 82
    1e54:	92 e5       	ldi	r25, 0x52	; 82
    1e56:	a1 e6       	ldi	r26, 0x61	; 97
    1e58:	b1 e4       	ldi	r27, 0x41	; 65
    1e5a:	8e ab       	std	Y+54, r24	; 0x36
    1e5c:	9f ab       	std	Y+55, r25	; 0x37
    1e5e:	a8 af       	std	Y+56, r26	; 0x38
    1e60:	b9 af       	std	Y+57, r27	; 0x39
    1e62:	82 e7       	ldi	r24, 0x72	; 114
    1e64:	92 e7       	ldi	r25, 0x72	; 114
    1e66:	a1 e4       	ldi	r26, 0x41	; 65
    1e68:	b1 e6       	ldi	r27, 0x61	; 97
    1e6a:	7a 97       	sbiw	r30, 0x1a	; 26
    1e6c:	80 83       	st	Z, r24
    1e6e:	91 83       	std	Z+1, r25	; 0x01
    1e70:	a2 83       	std	Z+2, r26	; 0x02
    1e72:	b3 83       	std	Z+3, r27	; 0x03
    1e74:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e76:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e78:	a8 89       	ldd	r26, Y+16	; 0x10
    1e7a:	b9 89       	ldd	r27, Y+17	; 0x11
    1e7c:	34 96       	adiw	r30, 0x04	; 4
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	a2 83       	std	Z+2, r26	; 0x02
    1e84:	b3 83       	std	Z+3, r27	; 0x03
    1e86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e88:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e8a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1e8c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1e8e:	34 96       	adiw	r30, 0x04	; 4
    1e90:	80 83       	st	Z, r24
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	a2 83       	std	Z+2, r26	; 0x02
    1e96:	b3 83       	std	Z+3, r27	; 0x03
    1e98:	2a 89       	ldd	r18, Y+18	; 0x12
    1e9a:	3b 89       	ldd	r19, Y+19	; 0x13
    1e9c:	4c 89       	ldd	r20, Y+20	; 0x14
    1e9e:	5d 89       	ldd	r21, Y+21	; 0x15
    1ea0:	01 e0       	ldi	r16, 0x01	; 1
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <disk_write>
    1ea8:	1d 82       	std	Y+5, r1	; 0x05
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	0e 94 55 12 	call	0x24aa	; 0x24aa <disk_ioctl>
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
    1eb8:	81 11       	cpse	r24, r1
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <f_sync+0x136>
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	89 2f       	mov	r24, r25
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	08 95       	ret

00001eca <f_close>:
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ec 01       	movw	r28, r24
    1ed0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <f_sync>
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <f_close+0x12>
    1ed8:	19 82       	std	Y+1, r1	; 0x01
    1eda:	18 82       	st	Y, r1
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
    1ee2:	8f 92       	push	r8
    1ee4:	9f 92       	push	r9
    1ee6:	af 92       	push	r10
    1ee8:	bf 92       	push	r11
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <f_gets+0x1a>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <f_gets+0x1c>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	88 2e       	mov	r8, r24
    1f04:	99 2e       	mov	r9, r25
    1f06:	5a 01       	movw	r10, r20
	int n = 0;
	TCHAR c, *p = buff;
    1f08:	08 2f       	mov	r16, r24
    1f0a:	19 2f       	mov	r17, r25
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
	int n = 0;
    1f0c:	e1 2c       	mov	r14, r1
    1f0e:	f1 2c       	mov	r15, r1
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    1f10:	6b 01       	movw	r12, r22
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	c8 1a       	sub	r12, r24
    1f16:	d1 08       	sbc	r13, r1
    1f18:	1b c0       	rjmp	.+54     	; 0x1f50 <f_gets+0x6e>
		f_read(fp, s, 1, &rc);
    1f1a:	9e 01       	movw	r18, r28
    1f1c:	2d 5f       	subi	r18, 0xFD	; 253
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	be 01       	movw	r22, r28
    1f26:	6f 5f       	subi	r22, 0xFF	; 255
    1f28:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2a:	c5 01       	movw	r24, r10
    1f2c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <f_read>
		if (rc != 1) break;			/* Break on EOF or error */
    1f30:	2b 81       	ldd	r18, Y+3	; 0x03
    1f32:	3c 81       	ldd	r19, Y+4	; 0x04
    1f34:	21 30       	cpi	r18, 0x01	; 1
    1f36:	31 05       	cpc	r19, r1
    1f38:	71 f4       	brne	.+28     	; 0x1f56 <f_gets+0x74>
		c = s[0];
    1f3a:	29 81       	ldd	r18, Y+1	; 0x01
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
    1f3c:	0f 5f       	subi	r16, 0xFF	; 255
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	f8 01       	movw	r30, r16
    1f42:	31 97       	sbiw	r30, 0x01	; 1
    1f44:	20 83       	st	Z, r18
		n++;
    1f46:	ef ef       	ldi	r30, 0xFF	; 255
    1f48:	ee 1a       	sub	r14, r30
    1f4a:	fe 0a       	sbc	r15, r30
		if (c == '\n') break;		/* Break on EOL */
    1f4c:	2a 30       	cpi	r18, 0x0A	; 10
    1f4e:	19 f0       	breq	.+6      	; 0x1f56 <f_gets+0x74>
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    1f50:	ec 14       	cp	r14, r12
    1f52:	fd 04       	cpc	r15, r13
    1f54:	14 f3       	brlt	.-60     	; 0x1f1a <f_gets+0x38>
#endif
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
    1f56:	f8 01       	movw	r30, r16
    1f58:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    1f5a:	ef 28       	or	r14, r15
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <f_gets+0x82>
    1f5e:	88 2d       	mov	r24, r8
    1f60:	99 2d       	mov	r25, r9
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <f_gets+0x86>
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	08 95       	ret

00001f8a <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    1f8a:	1c bc       	out	0x2c, r1	; 44

   DDRB  &= ~(SS | SCK | MOSI);   /* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
    1f8c:	84 b1       	in	r24, 0x04	; 4
    1f8e:	83 7d       	andi	r24, 0xD3	; 211
    1f90:	84 b9       	out	0x04, r24	; 4
   PORTB &= ~(SS | SCK | MOSI);
    1f92:	85 b1       	in	r24, 0x05	; 5
    1f94:	83 7d       	andi	r24, 0xD3	; 211
    1f96:	85 b9       	out	0x05, r24	; 5
    1f98:	08 95       	ret

00001f9a <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    1f9a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    1f9c:	0d b4       	in	r0, 0x2d	; 45
    1f9e:	07 fe       	sbrs	r0, 7
    1fa0:	fd cf       	rjmp	.-6      	; 0x1f9c <xchg_spi+0x2>
	return SPDR;
    1fa2:	8e b5       	in	r24, 0x2e	; 46
}
    1fa4:	08 95       	ret

00001fa6 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    1fa6:	2a 9a       	sbi	0x05, 2	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    1fae:	08 95       	ret

00001fb0 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    1fb0:	2a 98       	cbi	0x05, 2	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    1fb2:	8f ef       	ldi	r24, 0xFF	; 255
    1fb4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
    1fb8:	82 e3       	ldi	r24, 0x32	; 50
    1fba:	80 93 2e 01 	sts	0x012E, r24
	do
		d = xchg_spi(0xFF);
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	while (d != 0xFF && Timer2);
    1fc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc6:	49 f0       	breq	.+18     	; 0x1fda <select+0x2a>
    1fc8:	80 91 2e 01 	lds	r24, 0x012E
    1fcc:	81 11       	cpse	r24, r1
    1fce:	f7 cf       	rjmp	.-18     	; 0x1fbe <select+0xe>
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
	deselect();
    1fd0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>
	return 0;	/* Timeout */
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
    1fde:	08 95       	ret

00001fe0 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	ec 01       	movw	r28, r24
    1fea:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    1fec:	84 e1       	ldi	r24, 0x14	; 20
    1fee:	80 93 2f 01 	sts	0x012F, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    1ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffa:	39 f4       	brne	.+14     	; 0x200a <rcvr_datablock+0x2a>
    1ffc:	90 91 2f 01 	lds	r25, 0x012F
    2000:	91 11       	cpse	r25, r1
    2002:	f7 cf       	rjmp	.-18     	; 0x1ff2 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	20 c0       	rjmp	.+64     	; 0x204a <rcvr_datablock+0x6a>
    200a:	8e 3f       	cpi	r24, 0xFE	; 254
    200c:	e1 f4       	brne	.+56     	; 0x2046 <rcvr_datablock+0x66>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    200e:	8f ef       	ldi	r24, 0xFF	; 255
    2010:	8e bd       	out	0x2e, r24	; 46
    2012:	0d b4       	in	r0, 0x2d	; 45
    2014:	07 fe       	sbrs	r0, 7
    2016:	fd cf       	rjmp	.-6      	; 0x2012 <rcvr_datablock+0x32>
    2018:	9e b5       	in	r25, 0x2e	; 46
    201a:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    201c:	8e bd       	out	0x2e, r24	; 46
    201e:	0d b4       	in	r0, 0x2d	; 45
    2020:	07 fe       	sbrs	r0, 7
    2022:	fd cf       	rjmp	.-6      	; 0x201e <rcvr_datablock+0x3e>
    2024:	22 96       	adiw	r28, 0x02	; 2
    2026:	9e b5       	in	r25, 0x2e	; 46
    2028:	fe 01       	movw	r30, r28
    202a:	31 97       	sbiw	r30, 0x01	; 1
    202c:	90 83       	st	Z, r25
	} while (cnt -= 2);
    202e:	02 50       	subi	r16, 0x02	; 2
    2030:	11 09       	sbc	r17, r1
    2032:	71 f7       	brne	.-36     	; 0x2010 <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    2034:	8f ef       	ldi	r24, 0xFF	; 255
    2036:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	xchg_spi(0xFF);
    203a:	8f ef       	ldi	r24, 0xFF	; 255
    203c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>

	return 1;						/* Return with success */
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 c0       	rjmp	.+4      	; 0x204a <rcvr_datablock+0x6a>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    2054:	ff 92       	push	r15
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	c8 2f       	mov	r28, r24
    2060:	d4 2f       	mov	r29, r20
    2062:	15 2f       	mov	r17, r21
    2064:	06 2f       	mov	r16, r22
    2066:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2068:	88 23       	and	r24, r24
    206a:	4c f4       	brge	.+18     	; 0x207e <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	ba 01       	movw	r22, r20
    2072:	87 e3       	ldi	r24, 0x37	; 55
    2074:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
		if (res > 1) return res;
    2078:	82 30       	cpi	r24, 0x02	; 2
    207a:	b0 f5       	brcc	.+108    	; 0x20e8 <send_cmd+0x94>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    207c:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    207e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>
	if (!select()) return 0xFF;
    2082:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <select>
    2086:	89 2b       	or	r24, r25
    2088:	29 f1       	breq	.+74     	; 0x20d4 <send_cmd+0x80>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    208a:	8c 2f       	mov	r24, r28
    208c:	80 64       	ori	r24, 0x40	; 64
    208e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2092:	8f 2d       	mov	r24, r15
    2094:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2098:	80 2f       	mov	r24, r16
    209a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    209e:	81 2f       	mov	r24, r17
    20a0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    20a4:	8d 2f       	mov	r24, r29
    20a6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    20aa:	cc 23       	and	r28, r28
    20ac:	c9 f0       	breq	.+50     	; 0x20e0 <send_cmd+0x8c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    20ae:	c8 30       	cpi	r28, 0x08	; 8
    20b0:	99 f0       	breq	.+38     	; 0x20d8 <send_cmd+0x84>
	xchg_spi(n);
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    20b8:	cc 30       	cpi	r28, 0x0C	; 12
    20ba:	19 f4       	brne	.+6      	; 0x20c2 <send_cmd+0x6e>
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    20c2:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	while ((res & 0x80) && --n);
    20ca:	88 23       	and	r24, r24
    20cc:	6c f4       	brge	.+26     	; 0x20e8 <send_cmd+0x94>
    20ce:	c1 50       	subi	r28, 0x01	; 1
    20d0:	c9 f7       	brne	.-14     	; 0x20c4 <send_cmd+0x70>
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <send_cmd+0x94>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	08 c0       	rjmp	.+16     	; 0x20e8 <send_cmd+0x94>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    20d8:	87 e8       	ldi	r24, 0x87	; 135
    20da:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    20de:	f1 cf       	rjmp	.-30     	; 0x20c2 <send_cmd+0x6e>
    20e0:	85 e9       	ldi	r24, 0x95	; 149
    20e2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    20e6:	ed cf       	rjmp	.-38     	; 0x20c2 <send_cmd+0x6e>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	ff 90       	pop	r15
    20f2:	08 95       	ret

000020f4 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	ec 01       	movw	r28, r24
    20fc:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    20fe:	92 e3       	ldi	r25, 0x32	; 50
    2100:	90 93 2e 01 	sts	0x012E, r25
	do
		d = xchg_spi(0xFF);
    2104:	8f ef       	ldi	r24, 0xFF	; 255
    2106:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	while (d != 0xFF && Timer2);
    210a:	8f 3f       	cpi	r24, 0xFF	; 255
    210c:	31 f0       	breq	.+12     	; 0x211a <xmit_datablock+0x26>
    210e:	90 91 2e 01 	lds	r25, 0x012E
    2112:	91 11       	cpse	r25, r1
    2114:	f7 cf       	rjmp	.-18     	; 0x2104 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	2a c0       	rjmp	.+84     	; 0x216e <xmit_datablock+0x7a>

	xchg_spi(token);					/* Xmit data token */
    211a:	81 2f       	mov	r24, r17
    211c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    2120:	1d 3f       	cpi	r17, 0xFD	; 253
    2122:	19 f1       	breq	.+70     	; 0x216a <xmit_datablock+0x76>
    2124:	9e 01       	movw	r18, r28
    2126:	3e 5f       	subi	r19, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2128:	88 81       	ld	r24, Y
    212a:	8e bd       	out	0x2e, r24	; 46
    212c:	0d b4       	in	r0, 0x2d	; 45
    212e:	07 fe       	sbrs	r0, 7
    2130:	fd cf       	rjmp	.-6      	; 0x212c <xmit_datablock+0x38>
    2132:	22 96       	adiw	r28, 0x02	; 2
    2134:	fe 01       	movw	r30, r28
    2136:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2138:	80 81       	ld	r24, Z
    213a:	8e bd       	out	0x2e, r24	; 46
    213c:	0d b4       	in	r0, 0x2d	; 45
    213e:	07 fe       	sbrs	r0, 7
    2140:	fd cf       	rjmp	.-6      	; 0x213c <xmit_datablock+0x48>
	} while (cnt -= 2);
    2142:	c2 17       	cp	r28, r18
    2144:	d3 07       	cpc	r29, r19
    2146:	81 f7       	brne	.-32     	; 0x2128 <xmit_datablock+0x34>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    2148:	8f ef       	ldi	r24, 0xFF	; 255
    214a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
		xchg_spi(0xFF);
    214e:	8f ef       	ldi	r24, 0xFF	; 255
    2150:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    215a:	28 2f       	mov	r18, r24
    215c:	2f 71       	andi	r18, 0x1F	; 31
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	25 30       	cpi	r18, 0x05	; 5
    2164:	21 f0       	breq	.+8      	; 0x216e <xmit_datablock+0x7a>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	02 c0       	rjmp	.+4      	; 0x216e <xmit_datablock+0x7a>
			return 0;
	}

	return 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
}
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	08 95       	ret

00002176 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    2176:	cf 92       	push	r12
    2178:	df 92       	push	r13
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	cf 93       	push	r28
    2184:	df 93       	push	r29
    2186:	00 d0       	rcall	.+0      	; 0x2188 <disk_initialize+0x12>
    2188:	00 d0       	rcall	.+0      	; 0x218a <disk_initialize+0x14>
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    218e:	81 11       	cpse	r24, r1
    2190:	ac c0       	rjmp	.+344    	; 0x22ea <disk_initialize+0x174>
	power_off();						/* Turn off the socket power to reset the card */
    2192:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    2196:	80 91 00 01 	lds	r24, 0x0100
    219a:	81 ff       	sbrs	r24, 1
    219c:	03 c0       	rjmp	.+6      	; 0x21a4 <disk_initialize+0x2e>
    219e:	80 91 00 01 	lds	r24, 0x0100
    21a2:	b0 c0       	rjmp	.+352    	; 0x2304 <disk_initialize+0x18e>
}

static
void power_on (void)
{
   PORTB |= SS | MOSI;		/* Configure SCK/MOSI/CS as output */
    21a4:	85 b1       	in	r24, 0x05	; 5
    21a6:	8c 60       	ori	r24, 0x0C	; 12
    21a8:	85 b9       	out	0x05, r24	; 5
   DDRB  |= SS | SCK | MOSI;
    21aa:	84 b1       	in	r24, 0x04	; 4
    21ac:	8c 62       	ori	r24, 0x2C	; 44
    21ae:	84 b9       	out	0x04, r24	; 4

	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    21b0:	82 e5       	ldi	r24, 0x52	; 82
    21b2:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;			/* SPI 2x mode */
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	9d bd       	out	0x2d, r25	; 45

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    21b8:	8c bd       	out	0x2c, r24	; 44
    21ba:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    21c2:	11 50       	subi	r17, 0x01	; 1
    21c4:	d9 f7       	brne	.-10     	; 0x21bc <disk_initialize+0x46>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	ba 01       	movw	r22, r20
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <disk_initialize+0x62>
    21d6:	91 c0       	rjmp	.+290    	; 0x22fa <disk_initialize+0x184>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    21d8:	84 e6       	ldi	r24, 0x64	; 100
    21da:	80 93 2f 01 	sts	0x012F, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    21de:	4a ea       	ldi	r20, 0xAA	; 170
    21e0:	51 e0       	ldi	r21, 0x01	; 1
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	88 e0       	ldi	r24, 0x08	; 8
    21e8:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <disk_initialize+0x7c>
    21f0:	43 c0       	rjmp	.+134    	; 0x2278 <disk_initialize+0x102>
    21f2:	ce 01       	movw	r24, r28
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	6c 01       	movw	r12, r24
    21f8:	7e 01       	movw	r14, r28
    21fa:	95 e0       	ldi	r25, 0x05	; 5
    21fc:	e9 0e       	add	r14, r25
    21fe:	f1 1c       	adc	r15, r1
    2200:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    2202:	8f ef       	ldi	r24, 0xFF	; 255
    2204:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    2208:	f8 01       	movw	r30, r16
    220a:	81 93       	st	Z+, r24
    220c:	8f 01       	movw	r16, r30
    220e:	ee 15       	cp	r30, r14
    2210:	ff 05       	cpc	r31, r15
    2212:	b9 f7       	brne	.-18     	; 0x2202 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	09 f0       	breq	.+2      	; 0x221c <disk_initialize+0xa6>
    221a:	6f c0       	rjmp	.+222    	; 0x22fa <disk_initialize+0x184>
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	8a 3a       	cpi	r24, 0xAA	; 170
    2220:	09 f0       	breq	.+2      	; 0x2224 <disk_initialize+0xae>
    2222:	6b c0       	rjmp	.+214    	; 0x22fa <disk_initialize+0x184>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2224:	80 91 2f 01 	lds	r24, 0x012F
    2228:	88 23       	and	r24, r24
    222a:	49 f0       	breq	.+18     	; 0x223e <disk_initialize+0xc8>
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	60 e0       	ldi	r22, 0x00	; 0
    2232:	70 e4       	ldi	r23, 0x40	; 64
    2234:	89 ea       	ldi	r24, 0xA9	; 169
    2236:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    223a:	81 11       	cpse	r24, r1
    223c:	f3 cf       	rjmp	.-26     	; 0x2224 <disk_initialize+0xae>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    223e:	80 91 2f 01 	lds	r24, 0x012F
    2242:	88 23       	and	r24, r24
    2244:	09 f4       	brne	.+2      	; 0x2248 <disk_initialize+0xd2>
    2246:	59 c0       	rjmp	.+178    	; 0x22fa <disk_initialize+0x184>
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	ba 01       	movw	r22, r20
    224e:	8a e3       	ldi	r24, 0x3A	; 58
    2250:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2254:	81 11       	cpse	r24, r1
    2256:	51 c0       	rjmp	.+162    	; 0x22fa <disk_initialize+0x184>
    2258:	76 01       	movw	r14, r12
    225a:	14 e0       	ldi	r17, 0x04	; 4
    225c:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    225e:	8f ef       	ldi	r24, 0xFF	; 255
    2260:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    2264:	f7 01       	movw	r30, r14
    2266:	81 93       	st	Z+, r24
    2268:	7f 01       	movw	r14, r30
    226a:	1e 13       	cpse	r17, r30
    226c:	f8 cf       	rjmp	.-16     	; 0x225e <disk_initialize+0xe8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	86 fd       	sbrc	r24, 6
    2272:	3d c0       	rjmp	.+122    	; 0x22ee <disk_initialize+0x178>
    2274:	84 e0       	ldi	r24, 0x04	; 4
    2276:	3c c0       	rjmp	.+120    	; 0x22f0 <disk_initialize+0x17a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	50 e0       	ldi	r21, 0x00	; 0
    227c:	ba 01       	movw	r22, r20
    227e:	89 ea       	ldi	r24, 0xA9	; 169
    2280:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2284:	82 30       	cpi	r24, 0x02	; 2
    2286:	18 f0       	brcs	.+6      	; 0x228e <disk_initialize+0x118>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    2288:	01 e0       	ldi	r16, 0x01	; 1
    228a:	11 e0       	ldi	r17, 0x01	; 1
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <disk_initialize+0x11c>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    228e:	02 e0       	ldi	r16, 0x02	; 2
    2290:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    2292:	90 91 2f 01 	lds	r25, 0x012F
    2296:	99 23       	and	r25, r25
    2298:	41 f0       	breq	.+16     	; 0x22aa <disk_initialize+0x134>
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	ba 01       	movw	r22, r20
    22a0:	81 2f       	mov	r24, r17
    22a2:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    22a6:	81 11       	cpse	r24, r1
    22a8:	f4 cf       	rjmp	.-24     	; 0x2292 <disk_initialize+0x11c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    22aa:	80 91 2f 01 	lds	r24, 0x012F
    22ae:	88 23       	and	r24, r24
    22b0:	21 f1       	breq	.+72     	; 0x22fa <disk_initialize+0x184>
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	52 e0       	ldi	r21, 0x02	; 2
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	70 e0       	ldi	r23, 0x00	; 0
    22ba:	80 e1       	ldi	r24, 0x10	; 16
    22bc:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    22c0:	81 11       	cpse	r24, r1
    22c2:	1b c0       	rjmp	.+54     	; 0x22fa <disk_initialize+0x184>
				ty = 0;
		}
	}
	CardType = ty;
    22c4:	00 93 2d 01 	sts	0x012D, r16
	deselect();
    22c8:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>

	if (ty) {			/* Initialization succeded */
    22cc:	00 23       	and	r16, r16
    22ce:	41 f0       	breq	.+16     	; 0x22e0 <disk_initialize+0x16a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    22d0:	80 91 00 01 	lds	r24, 0x0100
    22d4:	8e 7f       	andi	r24, 0xFE	; 254
    22d6:	80 93 00 01 	sts	0x0100, r24
		FCLK_FAST();
    22da:	80 e5       	ldi	r24, 0x50	; 80
    22dc:	8c bd       	out	0x2c, r24	; 44
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <disk_initialize+0x16e>
	} else {			/* Initialization failed */
		power_off();
    22e0:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <power_off>
	}

	return Stat;
    22e4:	80 91 00 01 	lds	r24, 0x0100
    22e8:	0d c0       	rjmp	.+26     	; 0x2304 <disk_initialize+0x18e>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	0b c0       	rjmp	.+22     	; 0x2304 <disk_initialize+0x18e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    22ee:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    22f0:	80 93 2d 01 	sts	0x012D, r24
	deselect();
    22f4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>
    22f8:	eb cf       	rjmp	.-42     	; 0x22d0 <disk_initialize+0x15a>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    22fa:	10 92 2d 01 	sts	0x012D, r1
	deselect();
    22fe:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>
    2302:	ee cf       	rjmp	.-36     	; 0x22e0 <disk_initialize+0x16a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	df 90       	pop	r13
    231a:	cf 90       	pop	r12
    231c:	08 95       	ret

0000231e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    231e:	81 11       	cpse	r24, r1
    2320:	03 c0       	rjmp	.+6      	; 0x2328 <disk_status+0xa>
	return Stat;
    2322:	80 91 00 01 	lds	r24, 0x0100
    2326:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2328:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    232a:	08 95       	ret

0000232c <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    232c:	0f 93       	push	r16
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	eb 01       	movw	r28, r22
	if (pdrv || !count) return RES_PARERR;
    2334:	81 11       	cpse	r24, r1
    2336:	44 c0       	rjmp	.+136    	; 0x23c0 <disk_read+0x94>
    2338:	00 23       	and	r16, r16
    233a:	09 f4       	brne	.+2      	; 0x233e <disk_read+0x12>
    233c:	43 c0       	rjmp	.+134    	; 0x23c4 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    233e:	80 91 00 01 	lds	r24, 0x0100
    2342:	80 fd       	sbrc	r24, 0
    2344:	41 c0       	rjmp	.+130    	; 0x23c8 <disk_read+0x9c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2346:	80 91 2d 01 	lds	r24, 0x012D
    234a:	83 fd       	sbrc	r24, 3
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <disk_read+0x34>
    234e:	01 2e       	mov	r0, r17
    2350:	19 e0       	ldi	r17, 0x09	; 9
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	44 1f       	adc	r20, r20
    2358:	55 1f       	adc	r21, r21
    235a:	1a 95       	dec	r17
    235c:	d1 f7       	brne	.-12     	; 0x2352 <disk_read+0x26>
    235e:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
    2360:	01 30       	cpi	r16, 0x01	; 1
    2362:	81 f4       	brne	.+32     	; 0x2384 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    2364:	ba 01       	movw	r22, r20
    2366:	a9 01       	movw	r20, r18
    2368:	81 e1       	ldi	r24, 0x11	; 17
    236a:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    236e:	81 11       	cpse	r24, r1
    2370:	20 c0       	rjmp	.+64     	; 0x23b2 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    2372:	60 e0       	ldi	r22, 0x00	; 0
    2374:	72 e0       	ldi	r23, 0x02	; 2
    2376:	ce 01       	movw	r24, r28
    2378:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    237c:	89 2b       	or	r24, r25
    237e:	c9 f0       	breq	.+50     	; 0x23b2 <disk_read+0x86>
    2380:	00 e0       	ldi	r16, 0x00	; 0
    2382:	17 c0       	rjmp	.+46     	; 0x23b2 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    2384:	ba 01       	movw	r22, r20
    2386:	a9 01       	movw	r20, r18
    2388:	82 e1       	ldi	r24, 0x12	; 18
    238a:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    238e:	81 11       	cpse	r24, r1
    2390:	10 c0       	rjmp	.+32     	; 0x23b2 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	72 e0       	ldi	r23, 0x02	; 2
    2396:	ce 01       	movw	r24, r28
    2398:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    239c:	89 2b       	or	r24, r25
    239e:	19 f0       	breq	.+6      	; 0x23a6 <disk_read+0x7a>
				buff += 512;
    23a0:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    23a2:	01 50       	subi	r16, 0x01	; 1
    23a4:	b1 f7       	brne	.-20     	; 0x2392 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	50 e0       	ldi	r21, 0x00	; 0
    23aa:	ba 01       	movw	r22, r20
    23ac:	8c e0       	ldi	r24, 0x0C	; 12
    23ae:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
		}
	}
	deselect();
    23b2:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>

	return count ? RES_ERROR : RES_OK;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	01 11       	cpse	r16, r1
    23ba:	07 c0       	rjmp	.+14     	; 0x23ca <disk_read+0x9e>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	05 c0       	rjmp	.+10     	; 0x23ca <disk_read+0x9e>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (pdrv || !count) return RES_PARERR;
    23c0:	84 e0       	ldi	r24, 0x04	; 4
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <disk_read+0x9e>
    23c4:	84 e0       	ldi	r24, 0x04	; 4
    23c6:	01 c0       	rjmp	.+2      	; 0x23ca <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    23c8:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	0f 91       	pop	r16
    23d0:	08 95       	ret

000023d2 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	eb 01       	movw	r28, r22
    23e2:	69 01       	movw	r12, r18
    23e4:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    23e6:	81 11       	cpse	r24, r1
    23e8:	51 c0       	rjmp	.+162    	; 0x248c <disk_write+0xba>
    23ea:	00 23       	and	r16, r16
    23ec:	09 f4       	brne	.+2      	; 0x23f0 <disk_write+0x1e>
    23ee:	50 c0       	rjmp	.+160    	; 0x2490 <disk_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    23f0:	80 91 00 01 	lds	r24, 0x0100
    23f4:	80 fd       	sbrc	r24, 0
    23f6:	4e c0       	rjmp	.+156    	; 0x2494 <disk_write+0xc2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    23f8:	80 91 00 01 	lds	r24, 0x0100
    23fc:	82 fd       	sbrc	r24, 2
    23fe:	4c c0       	rjmp	.+152    	; 0x2498 <disk_write+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2400:	80 91 2d 01 	lds	r24, 0x012D
    2404:	83 fd       	sbrc	r24, 3
    2406:	09 c0       	rjmp	.+18     	; 0x241a <disk_write+0x48>
    2408:	0b 2e       	mov	r0, r27
    240a:	b9 e0       	ldi	r27, 0x09	; 9
    240c:	cc 0c       	add	r12, r12
    240e:	dd 1c       	adc	r13, r13
    2410:	ee 1c       	adc	r14, r14
    2412:	ff 1c       	adc	r15, r15
    2414:	ba 95       	dec	r27
    2416:	d1 f7       	brne	.-12     	; 0x240c <disk_write+0x3a>
    2418:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    241a:	01 30       	cpi	r16, 0x01	; 1
    241c:	79 f4       	brne	.+30     	; 0x243c <disk_write+0x6a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    241e:	b7 01       	movw	r22, r14
    2420:	a6 01       	movw	r20, r12
    2422:	88 e1       	ldi	r24, 0x18	; 24
    2424:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2428:	81 11       	cpse	r24, r1
    242a:	29 c0       	rjmp	.+82     	; 0x247e <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    242c:	6e ef       	ldi	r22, 0xFE	; 254
    242e:	ce 01       	movw	r24, r28
    2430:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <xmit_datablock>
    2434:	89 2b       	or	r24, r25
    2436:	19 f1       	breq	.+70     	; 0x247e <disk_write+0xac>
    2438:	00 e0       	ldi	r16, 0x00	; 0
    243a:	21 c0       	rjmp	.+66     	; 0x247e <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    243c:	86 70       	andi	r24, 0x06	; 6
    243e:	39 f0       	breq	.+14     	; 0x244e <disk_write+0x7c>
    2440:	40 2f       	mov	r20, r16
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	70 e0       	ldi	r23, 0x00	; 0
    2448:	87 e9       	ldi	r24, 0x97	; 151
    244a:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    244e:	b7 01       	movw	r22, r14
    2450:	a6 01       	movw	r20, r12
    2452:	89 e1       	ldi	r24, 0x19	; 25
    2454:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2458:	81 11       	cpse	r24, r1
    245a:	11 c0       	rjmp	.+34     	; 0x247e <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    245c:	6c ef       	ldi	r22, 0xFC	; 252
    245e:	ce 01       	movw	r24, r28
    2460:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <xmit_datablock>
    2464:	89 2b       	or	r24, r25
    2466:	19 f0       	breq	.+6      	; 0x246e <disk_write+0x9c>
				buff += 512;
    2468:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    246a:	01 50       	subi	r16, 0x01	; 1
    246c:	b9 f7       	brne	.-18     	; 0x245c <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    246e:	6d ef       	ldi	r22, 0xFD	; 253
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <xmit_datablock>
    2478:	89 2b       	or	r24, r25
    247a:	09 f4       	brne	.+2      	; 0x247e <disk_write+0xac>
				count = 1;
    247c:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    247e:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>

	return count ? RES_ERROR : RES_OK;
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	01 11       	cpse	r16, r1
    2486:	09 c0       	rjmp	.+18     	; 0x249a <disk_write+0xc8>
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	07 c0       	rjmp	.+14     	; 0x249a <disk_write+0xc8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (pdrv || !count) return RES_PARERR;
    248c:	84 e0       	ldi	r24, 0x04	; 4
    248e:	05 c0       	rjmp	.+10     	; 0x249a <disk_write+0xc8>
    2490:	84 e0       	ldi	r24, 0x04	; 4
    2492:	03 c0       	rjmp	.+6      	; 0x249a <disk_write+0xc8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2494:	83 e0       	ldi	r24, 0x03	; 3
    2496:	01 c0       	rjmp	.+2      	; 0x249a <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2498:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	0f 91       	pop	r16
    24a0:	ff 90       	pop	r15
    24a2:	ef 90       	pop	r14
    24a4:	df 90       	pop	r13
    24a6:	cf 90       	pop	r12
    24a8:	08 95       	ret

000024aa <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	60 97       	sbiw	r28, 0x10	; 16
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD *dp, st, ed, csize;


	if (pdrv) return RES_PARERR;
    24c6:	81 11       	cpse	r24, r1
    24c8:	99 c1       	rjmp	.+818    	; 0x27fc <disk_ioctl+0x352>
    24ca:	7a 01       	movw	r14, r20

	res = RES_ERROR;

	if (cmd == CTRL_POWER) {
    24cc:	65 30       	cpi	r22, 0x05	; 5
    24ce:	81 f4       	brne	.+32     	; 0x24f0 <disk_ioctl+0x46>
		switch (ptr[0]) {
    24d0:	fa 01       	movw	r30, r20
    24d2:	80 81       	ld	r24, Z
    24d4:	88 23       	and	r24, r24
    24d6:	19 f0       	breq	.+6      	; 0x24de <disk_ioctl+0x34>
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	29 f0       	breq	.+10     	; 0x24e6 <disk_ioctl+0x3c>
    24dc:	91 c1       	rjmp	.+802    	; 0x2800 <disk_ioctl+0x356>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
    24de:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <power_off>
			res = RES_OK;
    24e2:	80 e0       	ldi	r24, 0x00	; 0
			break;
    24e4:	90 c1       	rjmp	.+800    	; 0x2806 <disk_ioctl+0x35c>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	fa 01       	movw	r30, r20
    24ea:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    24ec:	80 e0       	ldi	r24, 0x00	; 0
			break;
    24ee:	8b c1       	rjmp	.+790    	; 0x2806 <disk_ioctl+0x35c>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    24f0:	80 91 00 01 	lds	r24, 0x0100
    24f4:	80 fd       	sbrc	r24, 0
    24f6:	86 c1       	rjmp	.+780    	; 0x2804 <disk_ioctl+0x35a>

		switch (cmd) {
    24f8:	06 2f       	mov	r16, r22
    24fa:	10 e0       	ldi	r17, 0x00	; 0
    24fc:	0f 30       	cpi	r16, 0x0F	; 15
    24fe:	11 05       	cpc	r17, r1
    2500:	08 f0       	brcs	.+2      	; 0x2504 <disk_ioctl+0x5a>
    2502:	63 c1       	rjmp	.+710    	; 0x27ca <disk_ioctl+0x320>
    2504:	f8 01       	movw	r30, r16
    2506:	ec 5c       	subi	r30, 0xCC	; 204
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) res = RES_OK;
    250e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <select>
    2512:	11 e0       	ldi	r17, 0x01	; 1
    2514:	89 2b       	or	r24, r25
    2516:	09 f4       	brne	.+2      	; 0x251a <disk_ioctl+0x70>
    2518:	6d c1       	rjmp	.+730    	; 0x27f4 <disk_ioctl+0x34a>
    251a:	10 e0       	ldi	r17, 0x00	; 0
    251c:	6b c1       	rjmp	.+726    	; 0x27f4 <disk_ioctl+0x34a>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	50 e0       	ldi	r21, 0x00	; 0
    2522:	ba 01       	movw	r22, r20
    2524:	89 e0       	ldi	r24, 0x09	; 9
    2526:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    252a:	81 11       	cpse	r24, r1
    252c:	50 c1       	rjmp	.+672    	; 0x27ce <disk_ioctl+0x324>
    252e:	60 e1       	ldi	r22, 0x10	; 16
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	ce 01       	movw	r24, r28
    2534:	01 96       	adiw	r24, 0x01	; 1
    2536:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    253a:	89 2b       	or	r24, r25
    253c:	09 f4       	brne	.+2      	; 0x2540 <disk_ioctl+0x96>
    253e:	49 c1       	rjmp	.+658    	; 0x27d2 <disk_ioctl+0x328>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	82 95       	swap	r24
    2544:	86 95       	lsr	r24
    2546:	86 95       	lsr	r24
    2548:	83 70       	andi	r24, 0x03	; 3
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	31 f5       	brne	.+76     	; 0x259a <disk_ioctl+0xf0>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    254e:	88 85       	ldd	r24, Y+8	; 0x08
    2550:	8f 73       	andi	r24, 0x3F	; 63
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e0       	ldi	r26, 0x00	; 0
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	dc 01       	movw	r26, r24
    255a:	99 27       	eor	r25, r25
    255c:	88 27       	eor	r24, r24
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	a1 1d       	adc	r26, r1
    2562:	b1 1d       	adc	r27, r1
    2564:	29 85       	ldd	r18, Y+9	; 0x09
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	32 2f       	mov	r19, r18
    256a:	22 27       	eor	r18, r18
    256c:	4a 85       	ldd	r20, Y+10	; 0x0a
    256e:	24 0f       	add	r18, r20
    2570:	31 1d       	adc	r19, r1
    2572:	82 0f       	add	r24, r18
    2574:	93 1f       	adc	r25, r19
    2576:	a1 1d       	adc	r26, r1
    2578:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = csize << 10;
    257a:	07 2e       	mov	r0, r23
    257c:	7a e0       	ldi	r23, 0x0A	; 10
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	aa 1f       	adc	r26, r26
    2584:	bb 1f       	adc	r27, r27
    2586:	7a 95       	dec	r23
    2588:	d1 f7       	brne	.-12     	; 0x257e <disk_ioctl+0xd4>
    258a:	70 2d       	mov	r23, r0
    258c:	f7 01       	movw	r30, r14
    258e:	80 83       	st	Z, r24
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	a2 83       	std	Z+2, r26	; 0x02
    2594:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
				}
				res = RES_OK;
    2596:	10 e0       	ldi	r17, 0x00	; 0
    2598:	2d c1       	rjmp	.+602    	; 0x27f4 <disk_ioctl+0x34a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    259a:	29 85       	ldd	r18, Y+9	; 0x09
    259c:	22 95       	swap	r18
    259e:	26 95       	lsr	r18
    25a0:	26 95       	lsr	r18
    25a2:	23 70       	andi	r18, 0x03	; 3
    25a4:	88 85       	ldd	r24, Y+8	; 0x08
    25a6:	f4 e0       	ldi	r31, 0x04	; 4
    25a8:	8f 9f       	mul	r24, r31
    25aa:	c0 01       	movw	r24, r0
    25ac:	11 24       	eor	r1, r1
    25ae:	82 0f       	add	r24, r18
    25b0:	91 1d       	adc	r25, r1
    25b2:	9c 01       	movw	r18, r24
    25b4:	2f 5f       	subi	r18, 0xFF	; 255
    25b6:	3f 4f       	sbci	r19, 0xFF	; 255
    25b8:	8f 81       	ldd	r24, Y+7	; 0x07
    25ba:	83 70       	andi	r24, 0x03	; 3
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	98 2f       	mov	r25, r24
    25c0:	88 27       	eor	r24, r24
    25c2:	99 0f       	add	r25, r25
    25c4:	99 0f       	add	r25, r25
    25c6:	82 0f       	add	r24, r18
    25c8:	93 1f       	adc	r25, r19
    25ca:	a0 e0       	ldi	r26, 0x00	; 0
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    25ce:	3e 81       	ldd	r19, Y+6	; 0x06
    25d0:	3f 70       	andi	r19, 0x0F	; 15
    25d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    25d4:	22 1f       	adc	r18, r18
    25d6:	22 27       	eor	r18, r18
    25d8:	22 1f       	adc	r18, r18
    25da:	32 0f       	add	r19, r18
    25dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    25de:	23 70       	andi	r18, 0x03	; 3
    25e0:	22 0f       	add	r18, r18
    25e2:	23 0f       	add	r18, r19
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
    25e4:	27 50       	subi	r18, 0x07	; 7
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <disk_ioctl+0x146>
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	aa 1f       	adc	r26, r26
    25ee:	bb 1f       	adc	r27, r27
    25f0:	2a 95       	dec	r18
    25f2:	d2 f7       	brpl	.-12     	; 0x25e8 <disk_ioctl+0x13e>
    25f4:	f7 01       	movw	r30, r14
    25f6:	80 83       	st	Z, r24
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	a2 83       	std	Z+2, r26	; 0x02
    25fc:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    25fe:	10 e0       	ldi	r17, 0x00	; 0
    2600:	f9 c0       	rjmp	.+498    	; 0x27f4 <disk_ioctl+0x34a>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    2602:	10 91 2d 01 	lds	r17, 0x012D
    2606:	12 ff       	sbrs	r17, 2
    2608:	2e c0       	rjmp	.+92     	; 0x2666 <disk_ioctl+0x1bc>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	ba 01       	movw	r22, r20
    2610:	8d e8       	ldi	r24, 0x8D	; 141
    2612:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2616:	81 11       	cpse	r24, r1
    2618:	de c0       	rjmp	.+444    	; 0x27d6 <disk_ioctl+0x32c>
					xchg_spi(0xFF);
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    2620:	60 e1       	ldi	r22, 0x10	; 16
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	ce 01       	movw	r24, r28
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    262c:	89 2b       	or	r24, r25
    262e:	09 f4       	brne	.+2      	; 0x2632 <disk_ioctl+0x188>
    2630:	d4 c0       	rjmp	.+424    	; 0x27da <disk_ioctl+0x330>
    2632:	10 e3       	ldi	r17, 0x30	; 48
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    2634:	8f ef       	ldi	r24, 0xFF	; 255
    2636:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    263a:	11 50       	subi	r17, 0x01	; 1
    263c:	d9 f7       	brne	.-10     	; 0x2634 <disk_ioctl+0x18a>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    263e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2640:	22 95       	swap	r18
    2642:	2f 70       	andi	r18, 0x0F	; 15
    2644:	80 e1       	ldi	r24, 0x10	; 16
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	a0 e0       	ldi	r26, 0x00	; 0
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	04 c0       	rjmp	.+8      	; 0x2656 <disk_ioctl+0x1ac>
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	aa 1f       	adc	r26, r26
    2654:	bb 1f       	adc	r27, r27
    2656:	2a 95       	dec	r18
    2658:	d2 f7       	brpl	.-12     	; 0x264e <disk_ioctl+0x1a4>
    265a:	f7 01       	movw	r30, r14
    265c:	80 83       	st	Z, r24
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	a2 83       	std	Z+2, r26	; 0x02
    2662:	b3 83       	std	Z+3, r27	; 0x03
    2664:	c7 c0       	rjmp	.+398    	; 0x27f4 <disk_ioctl+0x34a>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	ba 01       	movw	r22, r20
    266c:	89 e0       	ldi	r24, 0x09	; 9
    266e:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2672:	81 11       	cpse	r24, r1
    2674:	b4 c0       	rjmp	.+360    	; 0x27de <disk_ioctl+0x334>
    2676:	60 e1       	ldi	r22, 0x10	; 16
    2678:	70 e0       	ldi	r23, 0x00	; 0
    267a:	ce 01       	movw	r24, r28
    267c:	01 96       	adiw	r24, 0x01	; 1
    267e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    2682:	89 2b       	or	r24, r25
    2684:	09 f4       	brne	.+2      	; 0x2688 <disk_ioctl+0x1de>
    2686:	ad c0       	rjmp	.+346    	; 0x27e2 <disk_ioctl+0x338>
					if (CardType & CT_SD1) {	/* SDv1 */
    2688:	11 ff       	sbrs	r17, 1
    268a:	20 c0       	rjmp	.+64     	; 0x26cc <disk_ioctl+0x222>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    268c:	8c 85       	ldd	r24, Y+12	; 0x0c
    268e:	88 1f       	adc	r24, r24
    2690:	88 27       	eor	r24, r24
    2692:	88 1f       	adc	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	2b 85       	ldd	r18, Y+11	; 0x0b
    269a:	2f 73       	andi	r18, 0x3F	; 63
    269c:	82 0f       	add	r24, r18
    269e:	91 1d       	adc	r25, r1
    26a0:	82 0f       	add	r24, r18
    26a2:	91 1d       	adc	r25, r1
    26a4:	2e 85       	ldd	r18, Y+14	; 0x0e
    26a6:	22 95       	swap	r18
    26a8:	26 95       	lsr	r18
    26aa:	26 95       	lsr	r18
    26ac:	23 70       	andi	r18, 0x03	; 3
    26ae:	21 50       	subi	r18, 0x01	; 1
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <disk_ioctl+0x20c>
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	2a 95       	dec	r18
    26b8:	e2 f7       	brpl	.-8      	; 0x26b2 <disk_ioctl+0x208>
    26ba:	a0 e0       	ldi	r26, 0x00	; 0
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	f7 01       	movw	r30, r14
    26c0:	80 83       	st	Z, r24
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	a2 83       	std	Z+2, r26	; 0x02
    26c6:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    26c8:	10 e0       	ldi	r17, 0x00	; 0
    26ca:	94 c0       	rjmp	.+296    	; 0x27f4 <disk_ioctl+0x34a>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    26cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    26ce:	28 2f       	mov	r18, r24
    26d0:	23 70       	andi	r18, 0x03	; 3
    26d2:	82 95       	swap	r24
    26d4:	86 95       	lsr	r24
    26d6:	87 70       	andi	r24, 0x07	; 7
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	f8 e0       	ldi	r31, 0x08	; 8
    26dc:	2f 9f       	mul	r18, r31
    26de:	80 0d       	add	r24, r0
    26e0:	91 1d       	adc	r25, r1
    26e2:	11 24       	eor	r1, r1
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    26e8:	2c 77       	andi	r18, 0x7C	; 124
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	35 95       	asr	r19
    26ee:	27 95       	ror	r18
    26f0:	35 95       	asr	r19
    26f2:	27 95       	ror	r18
    26f4:	2f 5f       	subi	r18, 0xFF	; 255
    26f6:	3f 4f       	sbci	r19, 0xFF	; 255
    26f8:	82 9f       	mul	r24, r18
    26fa:	a0 01       	movw	r20, r0
    26fc:	83 9f       	mul	r24, r19
    26fe:	50 0d       	add	r21, r0
    2700:	92 9f       	mul	r25, r18
    2702:	50 0d       	add	r21, r0
    2704:	11 24       	eor	r1, r1
    2706:	ca 01       	movw	r24, r20
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	f7 01       	movw	r30, r14
    270e:	80 83       	st	Z, r24
    2710:	91 83       	std	Z+1, r25	; 0x01
    2712:	a2 83       	std	Z+2, r26	; 0x02
    2714:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    2716:	10 e0       	ldi	r17, 0x00	; 0
    2718:	6d c0       	rjmp	.+218    	; 0x27f4 <disk_ioctl+0x34a>
			break;

		/* Following commands are never used by FatFs module */

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    271a:	80 91 2d 01 	lds	r24, 0x012D
    271e:	fa 01       	movw	r30, r20
    2720:	80 83       	st	Z, r24
			res = RES_OK;
    2722:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2724:	67 c0       	rjmp	.+206    	; 0x27f4 <disk_ioctl+0x34a>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	50 e0       	ldi	r21, 0x00	; 0
    272a:	ba 01       	movw	r22, r20
    272c:	89 e0       	ldi	r24, 0x09	; 9
    272e:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2732:	81 11       	cpse	r24, r1
    2734:	58 c0       	rjmp	.+176    	; 0x27e6 <disk_ioctl+0x33c>
				&& rcvr_datablock(ptr, 16))
    2736:	60 e1       	ldi	r22, 0x10	; 16
    2738:	70 e0       	ldi	r23, 0x00	; 0
    273a:	c7 01       	movw	r24, r14
    273c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    2740:	11 e0       	ldi	r17, 0x01	; 1
    2742:	89 2b       	or	r24, r25
    2744:	09 f4       	brne	.+2      	; 0x2748 <disk_ioctl+0x29e>
    2746:	56 c0       	rjmp	.+172    	; 0x27f4 <disk_ioctl+0x34a>
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	54 c0       	rjmp	.+168    	; 0x27f4 <disk_ioctl+0x34a>
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	ba 01       	movw	r22, r20
    2752:	8a e0       	ldi	r24, 0x0A	; 10
    2754:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    2758:	81 11       	cpse	r24, r1
    275a:	47 c0       	rjmp	.+142    	; 0x27ea <disk_ioctl+0x340>
				&& rcvr_datablock(ptr, 16))
    275c:	60 e1       	ldi	r22, 0x10	; 16
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	c7 01       	movw	r24, r14
    2762:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    2766:	11 e0       	ldi	r17, 0x01	; 1
    2768:	89 2b       	or	r24, r25
    276a:	09 f4       	brne	.+2      	; 0x276e <disk_ioctl+0x2c4>
    276c:	43 c0       	rjmp	.+134    	; 0x27f4 <disk_ioctl+0x34a>
    276e:	10 e0       	ldi	r17, 0x00	; 0
    2770:	41 c0       	rjmp	.+130    	; 0x27f4 <disk_ioctl+0x34a>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	50 e0       	ldi	r21, 0x00	; 0
    2776:	ba 01       	movw	r22, r20
    2778:	8a e3       	ldi	r24, 0x3A	; 58
    277a:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    277e:	81 11       	cpse	r24, r1
    2780:	36 c0       	rjmp	.+108    	; 0x27ee <disk_ioctl+0x344>
    2782:	87 01       	movw	r16, r14
    2784:	f4 e0       	ldi	r31, 0x04	; 4
    2786:	ef 0e       	add	r14, r31
    2788:	f1 1c       	adc	r15, r1
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    278a:	8f ef       	ldi	r24, 0xFF	; 255
    278c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
    2790:	f8 01       	movw	r30, r16
    2792:	81 93       	st	Z+, r24
    2794:	8f 01       	movw	r16, r30
    2796:	ee 15       	cp	r30, r14
    2798:	ff 05       	cpc	r31, r15
    279a:	b9 f7       	brne	.-18     	; 0x278a <disk_ioctl+0x2e0>
				res = RES_OK;
    279c:	10 e0       	ldi	r17, 0x00	; 0
    279e:	2a c0       	rjmp	.+84     	; 0x27f4 <disk_ioctl+0x34a>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	50 e0       	ldi	r21, 0x00	; 0
    27a4:	ba 01       	movw	r22, r20
    27a6:	8d e8       	ldi	r24, 0x8D	; 141
    27a8:	0e 94 2a 10 	call	0x2054	; 0x2054 <send_cmd>
    27ac:	81 11       	cpse	r24, r1
    27ae:	21 c0       	rjmp	.+66     	; 0x27f2 <disk_ioctl+0x348>
				xchg_spi(0xFF);
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <xchg_spi>
				if (rcvr_datablock(ptr, 64))
    27b6:	60 e4       	ldi	r22, 0x40	; 64
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	c7 01       	movw	r24, r14
    27bc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <rcvr_datablock>
    27c0:	11 e0       	ldi	r17, 0x01	; 1
    27c2:	89 2b       	or	r24, r25
    27c4:	b9 f0       	breq	.+46     	; 0x27f4 <disk_ioctl+0x34a>
    27c6:	10 e0       	ldi	r17, 0x00	; 0
    27c8:	15 c0       	rjmp	.+42     	; 0x27f4 <disk_ioctl+0x34a>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    27ca:	14 e0       	ldi	r17, 0x04	; 4
    27cc:	13 c0       	rjmp	.+38     	; 0x27f4 <disk_ioctl+0x34a>
	DWORD *dp, st, ed, csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    27ce:	11 e0       	ldi	r17, 0x01	; 1
    27d0:	11 c0       	rjmp	.+34     	; 0x27f4 <disk_ioctl+0x34a>
    27d2:	11 e0       	ldi	r17, 0x01	; 1
    27d4:	0f c0       	rjmp	.+30     	; 0x27f4 <disk_ioctl+0x34a>
    27d6:	11 e0       	ldi	r17, 0x01	; 1
    27d8:	0d c0       	rjmp	.+26     	; 0x27f4 <disk_ioctl+0x34a>
    27da:	11 e0       	ldi	r17, 0x01	; 1
    27dc:	0b c0       	rjmp	.+22     	; 0x27f4 <disk_ioctl+0x34a>
    27de:	11 e0       	ldi	r17, 0x01	; 1
    27e0:	09 c0       	rjmp	.+18     	; 0x27f4 <disk_ioctl+0x34a>
    27e2:	11 e0       	ldi	r17, 0x01	; 1
    27e4:	07 c0       	rjmp	.+14     	; 0x27f4 <disk_ioctl+0x34a>
    27e6:	11 e0       	ldi	r17, 0x01	; 1
    27e8:	05 c0       	rjmp	.+10     	; 0x27f4 <disk_ioctl+0x34a>
    27ea:	11 e0       	ldi	r17, 0x01	; 1
    27ec:	03 c0       	rjmp	.+6      	; 0x27f4 <disk_ioctl+0x34a>
    27ee:	11 e0       	ldi	r17, 0x01	; 1
    27f0:	01 c0       	rjmp	.+2      	; 0x27f4 <disk_ioctl+0x34a>
    27f2:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
		}

		deselect();
    27f4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <deselect>
    27f8:	81 2f       	mov	r24, r17
    27fa:	05 c0       	rjmp	.+10     	; 0x2806 <disk_ioctl+0x35c>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD *dp, st, ed, csize;


	if (pdrv) return RES_PARERR;
    27fc:	84 e0       	ldi	r24, 0x04	; 4
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <disk_ioctl+0x35c>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    2800:	84 e0       	ldi	r24, 0x04	; 4
    2802:	01 c0       	rjmp	.+2      	; 0x2806 <disk_ioctl+0x35c>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    2804:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
    2806:	60 96       	adiw	r28, 0x10	; 16
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	ef 90       	pop	r14
    281e:	08 95       	ret

00002820 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    2820:	80 91 2f 01 	lds	r24, 0x012F
	if (n) Timer1 = --n;
    2824:	88 23       	and	r24, r24
    2826:	19 f0       	breq	.+6      	; 0x282e <disk_timerproc+0xe>
    2828:	81 50       	subi	r24, 0x01	; 1
    282a:	80 93 2f 01 	sts	0x012F, r24
	n = Timer2;
    282e:	80 91 2e 01 	lds	r24, 0x012E
	if (n) Timer2 = --n;
    2832:	88 23       	and	r24, r24
    2834:	19 f0       	breq	.+6      	; 0x283c <disk_timerproc+0x1c>
    2836:	81 50       	subi	r24, 0x01	; 1
    2838:	80 93 2e 01 	sts	0x012E, r24

	s = Stat;
    283c:	80 91 00 01 	lds	r24, 0x0100

	if (SOCKWP)				/* Write protected */
    2840:	1d 9b       	sbis	0x03, 5	; 3
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <disk_timerproc+0x28>
		s |= STA_PROTECT;
    2844:	84 60       	ori	r24, 0x04	; 4
    2846:	01 c0       	rjmp	.+2      	; 0x284a <disk_timerproc+0x2a>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    2848:	8b 7f       	andi	r24, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
    284a:	1c 99       	sbic	0x03, 4	; 3
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <disk_timerproc+0x32>
		s &= ~STA_NODISK;
    284e:	8d 7f       	andi	r24, 0xFD	; 253
    2850:	01 c0       	rjmp	.+2      	; 0x2854 <disk_timerproc+0x34>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    2852:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    2854:	80 93 00 01 	sts	0x0100, r24
    2858:	08 95       	ret

0000285a <USART0Init>:
	RxFifo.ct--;
	sei();
	RxFifo.ri = (i + 1) % sizeof RxFifo.buff;

	return d;
}
    285a:	10 92 c5 00 	sts	0x00C5, r1
    285e:	80 e1       	ldi	r24, 0x10	; 16
    2860:	80 93 c4 00 	sts	0x00C4, r24
    2864:	e2 ec       	ldi	r30, 0xC2	; 194
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	86 60       	ori	r24, 0x06	; 6
    286c:	80 83       	st	Z, r24
    286e:	e0 e3       	ldi	r30, 0x30	; 48
    2870:	f1 e0       	ldi	r31, 0x01	; 1
    2872:	15 82       	std	Z+5, r1	; 0x05
    2874:	14 82       	std	Z+4, r1	; 0x04
    2876:	13 82       	std	Z+3, r1	; 0x03
    2878:	12 82       	std	Z+2, r1	; 0x02
    287a:	11 82       	std	Z+1, r1	; 0x01
    287c:	10 82       	st	Z, r1
    287e:	e6 e7       	ldi	r30, 0x76	; 118
    2880:	f1 e0       	ldi	r31, 0x01	; 1
    2882:	15 82       	std	Z+5, r1	; 0x05
    2884:	14 82       	std	Z+4, r1	; 0x04
    2886:	13 82       	std	Z+3, r1	; 0x03
    2888:	12 82       	std	Z+2, r1	; 0x02
    288a:	11 82       	std	Z+1, r1	; 0x01
    288c:	10 82       	st	Z, r1
    288e:	e1 ec       	ldi	r30, 0xC1	; 193
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	88 69       	ori	r24, 0x98	; 152
    2896:	80 83       	st	Z, r24
    2898:	08 95       	ret

0000289a <uart_putc>:
void uart_putc (uint8_t d)
{
	uint8_t i;


	while (TxFifo.ct >= sizeof TxFifo.buff) ;
    289a:	e6 e7       	ldi	r30, 0x76	; 118
    289c:	f1 e0       	ldi	r31, 0x01	; 1
    289e:	24 81       	ldd	r18, Z+4	; 0x04
    28a0:	35 81       	ldd	r19, Z+5	; 0x05
    28a2:	20 34       	cpi	r18, 0x40	; 64
    28a4:	31 05       	cpc	r19, r1
    28a6:	d8 f7       	brcc	.-10     	; 0x289e <uart_putc+0x4>

	i = TxFifo.wi;
    28a8:	e6 e7       	ldi	r30, 0x76	; 118
    28aa:	f1 e0       	ldi	r31, 0x01	; 1
    28ac:	20 81       	ld	r18, Z
    28ae:	31 81       	ldd	r19, Z+1	; 0x01
    28b0:	33 27       	eor	r19, r19
	TxFifo.buff[i] = d;
    28b2:	d9 01       	movw	r26, r18
    28b4:	aa 58       	subi	r26, 0x8A	; 138
    28b6:	be 4f       	sbci	r27, 0xFE	; 254
    28b8:	16 96       	adiw	r26, 0x06	; 6
    28ba:	8c 93       	st	X, r24
	cli();
    28bc:	f8 94       	cli
	TxFifo.ct++;
    28be:	84 81       	ldd	r24, Z+4	; 0x04
    28c0:	95 81       	ldd	r25, Z+5	; 0x05
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	95 83       	std	Z+5, r25	; 0x05
    28c6:	84 83       	std	Z+4, r24	; 0x04
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<< UDRE0) | (1<<RXCIE0);
    28c8:	88 eb       	ldi	r24, 0xB8	; 184
    28ca:	80 93 c1 00 	sts	0x00C1, r24
	sei();
    28ce:	78 94       	sei
	TxFifo.wi = (i + 1) % sizeof TxFifo.buff;
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	2f 73       	andi	r18, 0x3F	; 63
    28d6:	33 27       	eor	r19, r19
    28d8:	31 83       	std	Z+1, r19	; 0x01
    28da:	20 83       	st	Z, r18
    28dc:	08 95       	ret

000028de <__vector_18>:


/* UART RXC interrupt */

ISR(USART_RX_vect)
{
    28de:	1f 92       	push	r1
    28e0:	0f 92       	push	r0
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	0f 92       	push	r0
    28e6:	11 24       	eor	r1, r1
    28e8:	2f 93       	push	r18
    28ea:	8f 93       	push	r24
    28ec:	9f 93       	push	r25
    28ee:	af 93       	push	r26
    28f0:	bf 93       	push	r27
    28f2:	ef 93       	push	r30
    28f4:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    28f6:	20 91 c6 00 	lds	r18, 0x00C6
	n = RxFifo.ct;
    28fa:	80 91 34 01 	lds	r24, 0x0134
    28fe:	90 91 35 01 	lds	r25, 0x0135
	if (n < sizeof RxFifo.buff) {
    2902:	80 34       	cpi	r24, 0x40	; 64
    2904:	98 f4       	brcc	.+38     	; 0x292c <__vector_18+0x4e>
		RxFifo.ct = ++n;
    2906:	8f 5f       	subi	r24, 0xFF	; 255
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	e0 e3       	ldi	r30, 0x30	; 48
    290c:	f1 e0       	ldi	r31, 0x01	; 1
    290e:	95 83       	std	Z+5, r25	; 0x05
    2910:	84 83       	std	Z+4, r24	; 0x04
		i = RxFifo.wi;
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	99 27       	eor	r25, r25
		RxFifo.buff[i] = d;
    2918:	dc 01       	movw	r26, r24
    291a:	a0 5d       	subi	r26, 0xD0	; 208
    291c:	be 4f       	sbci	r27, 0xFE	; 254
    291e:	16 96       	adiw	r26, 0x06	; 6
    2920:	2c 93       	st	X, r18
		RxFifo.wi = (i + 1) % sizeof RxFifo.buff;
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	8f 73       	andi	r24, 0x3F	; 63
    2926:	99 27       	eor	r25, r25
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	80 83       	st	Z, r24
	}
}
    292c:	ff 91       	pop	r31
    292e:	ef 91       	pop	r30
    2930:	bf 91       	pop	r27
    2932:	af 91       	pop	r26
    2934:	9f 91       	pop	r25
    2936:	8f 91       	pop	r24
    2938:	2f 91       	pop	r18
    293a:	0f 90       	pop	r0
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	0f 90       	pop	r0
    2940:	1f 90       	pop	r1
    2942:	18 95       	reti

00002944 <__vector_19>:


/* UART UDRE interrupt */

ISR(USART_UDRE_vect)
{
    2944:	1f 92       	push	r1
    2946:	0f 92       	push	r0
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	0f 92       	push	r0
    294c:	11 24       	eor	r1, r1
    294e:	2f 93       	push	r18
    2950:	3f 93       	push	r19
    2952:	8f 93       	push	r24
    2954:	9f 93       	push	r25
    2956:	af 93       	push	r26
    2958:	bf 93       	push	r27
    295a:	ef 93       	push	r30
    295c:	ff 93       	push	r31
	uint8_t n, i;

	n = TxFifo.ct;
    295e:	80 91 7a 01 	lds	r24, 0x017A
    2962:	90 91 7b 01 	lds	r25, 0x017B
	if (n) {
    2966:	88 23       	and	r24, r24
    2968:	c9 f0       	breq	.+50     	; 0x299c <__vector_19+0x58>
		TxFifo.ct = --n;
    296a:	2f ef       	ldi	r18, 0xFF	; 255
    296c:	28 0f       	add	r18, r24
    296e:	82 2f       	mov	r24, r18
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	e6 e7       	ldi	r30, 0x76	; 118
    2974:	f1 e0       	ldi	r31, 0x01	; 1
    2976:	95 83       	std	Z+5, r25	; 0x05
    2978:	84 83       	std	Z+4, r24	; 0x04
		i = TxFifo.ri;
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	99 27       	eor	r25, r25
		UDR0 = TxFifo.buff[i];
    2980:	dc 01       	movw	r26, r24
    2982:	aa 58       	subi	r26, 0x8A	; 138
    2984:	be 4f       	sbci	r27, 0xFE	; 254
    2986:	16 96       	adiw	r26, 0x06	; 6
    2988:	3c 91       	ld	r19, X
    298a:	30 93 c6 00 	sts	0x00C6, r19
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	8f 73       	andi	r24, 0x3F	; 63
    2992:	99 27       	eor	r25, r25
    2994:	93 83       	std	Z+3, r25	; 0x03
    2996:	82 83       	std	Z+2, r24	; 0x02
	}
	if (n == 0) UCSR0B = (1<<RXEN0) | (1<<RXCIE0) | (1<<TXEN0);
    2998:	21 11       	cpse	r18, r1
    299a:	03 c0       	rjmp	.+6      	; 0x29a2 <__vector_19+0x5e>
    299c:	88 e9       	ldi	r24, 0x98	; 152
    299e:	80 93 c1 00 	sts	0x00C1, r24
}
    29a2:	ff 91       	pop	r31
    29a4:	ef 91       	pop	r30
    29a6:	bf 91       	pop	r27
    29a8:	af 91       	pop	r26
    29aa:	9f 91       	pop	r25
    29ac:	8f 91       	pop	r24
    29ae:	3f 91       	pop	r19
    29b0:	2f 91       	pop	r18
    29b2:	0f 90       	pop	r0
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	0f 90       	pop	r0
    29b8:	1f 90       	pop	r1
    29ba:	18 95       	reti

000029bc <USART0SendByte>:
FIL fin;

char line[80];
char sec[512];
int USART0SendByte(char u8Data, FILE *stream)
{
    29bc:	cf 93       	push	r28
    29be:	c8 2f       	mov	r28, r24
	if(u8Data == '\n')
    29c0:	8a 30       	cpi	r24, 0x0A	; 10
    29c2:	19 f4       	brne	.+6      	; 0x29ca <USART0SendByte+0xe>
	{
		USART0SendByte('\r', stream);
    29c4:	8d e0       	ldi	r24, 0x0D	; 13
    29c6:	0e 94 de 14 	call	0x29bc	; 0x29bc <USART0SendByte>
	}
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0))){};
    29ca:	e0 ec       	ldi	r30, 0xC0	; 192
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	90 81       	ld	r25, Z
    29d0:	95 ff       	sbrs	r25, 5
    29d2:	fd cf       	rjmp	.-6      	; 0x29ce <USART0SendByte+0x12>
	// Transmit data
	UDR0 = u8Data;
    29d4:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <timer0_init>:

void timer0_init()
{
	
	// set up timer with prescaler = 1024
	TCCR0B |= (1 << CS02)|(1 << CS00);
    29e0:	85 b5       	in	r24, 0x25	; 37
    29e2:	85 60       	ori	r24, 0x05	; 5
    29e4:	85 bd       	out	0x25, r24	; 37
	//TCCR0B |= (1 << CS02);
	// set up timer with no prescaling
	//TCCR0B |= (1 << CS00);
	
	// initialize counter
	TCNT0 = 0;
    29e6:	16 bc       	out	0x26, r1	; 38
    29e8:	08 95       	ret

000029ea <__vector_14>:
	while(1)
	{
	}
}

ISR(TIMER0_COMPA_vect) {
    29ea:	1f 92       	push	r1
    29ec:	0f 92       	push	r0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	0f 92       	push	r0
    29f2:	11 24       	eor	r1, r1
    29f4:	2f 93       	push	r18
    29f6:	3f 93       	push	r19
    29f8:	4f 93       	push	r20
    29fa:	5f 93       	push	r21
    29fc:	6f 93       	push	r22
    29fe:	7f 93       	push	r23
    2a00:	8f 93       	push	r24
    2a02:	9f 93       	push	r25
    2a04:	af 93       	push	r26
    2a06:	bf 93       	push	r27
    2a08:	ef 93       	push	r30
    2a0a:	ff 93       	push	r31
	disk_timerproc();
    2a0c:	0e 94 10 14 	call	0x2820	; 0x2820 <disk_timerproc>
}
    2a10:	ff 91       	pop	r31
    2a12:	ef 91       	pop	r30
    2a14:	bf 91       	pop	r27
    2a16:	af 91       	pop	r26
    2a18:	9f 91       	pop	r25
    2a1a:	8f 91       	pop	r24
    2a1c:	7f 91       	pop	r23
    2a1e:	6f 91       	pop	r22
    2a20:	5f 91       	pop	r21
    2a22:	4f 91       	pop	r20
    2a24:	3f 91       	pop	r19
    2a26:	2f 91       	pop	r18
    2a28:	0f 90       	pop	r0
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	0f 90       	pop	r0
    2a2e:	1f 90       	pop	r1
    2a30:	18 95       	reti

00002a32 <uart_puts>:

void uart_puts(char * str) {
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	ec 01       	movw	r28, r24
	while (*str) {
    2a38:	88 81       	ld	r24, Y
    2a3a:	88 23       	and	r24, r24
    2a3c:	31 f0       	breq	.+12     	; 0x2a4a <uart_puts+0x18>
    2a3e:	21 96       	adiw	r28, 0x01	; 1
		uart_putc(*str++);
    2a40:	0e 94 4d 14 	call	0x289a	; 0x289a <uart_putc>
ISR(TIMER0_COMPA_vect) {
	disk_timerproc();
}

void uart_puts(char * str) {
	while (*str) {
    2a44:	89 91       	ld	r24, Y+
    2a46:	81 11       	cpse	r24, r1
    2a48:	fb cf       	rjmp	.-10     	; 0x2a40 <uart_puts+0xe>
		uart_putc(*str++);
	}
}
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	08 95       	ret

00002a50 <main>:
}

int main(void)
{
	FRESULT res;
	OCR0A = 0x9B; // avrcalc says that at 16MHz that /1024 and CTC 0x9B aka 156 ticks will give 10ms
    2a50:	8b e9       	ldi	r24, 0x9B	; 155
    2a52:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = (1 << OCIE0A); // enable Timer0 Compare Match A interrupt, executed if a compare match occurs
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	80 93 6e 00 	sts	0x006E, r24
	TCCR0A = (1 << WGM01) | (1 << COM0A1); // CTC mode WGM01 set to 1, clear OC0A pin (not OCR0A! which is the number to compare to!) on compare match
    2a5a:	82 e8       	ldi	r24, 0x82	; 130
    2a5c:	84 bd       	out	0x24, r24	; 36
	sei();
    2a5e:	78 94       	sei
	// initialize timer
	timer0_init();
    2a60:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <timer0_init>
	//uart init
	USART0Init();
    2a64:	0e 94 2d 14 	call	0x285a	; 0x285a <USART0Init>

	USART0SendByte('A',&usart0_str);
    2a68:	61 e0       	ldi	r22, 0x01	; 1
    2a6a:	71 e0       	ldi	r23, 0x01	; 1
    2a6c:	81 e4       	ldi	r24, 0x41	; 65
    2a6e:	0e 94 de 14 	call	0x29bc	; 0x29bc <USART0SendByte>
	if (disk_initialize(0) == STA_NOINIT) {
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	0e 94 bb 10 	call	0x2176	; 0x2176 <disk_initialize>
    2a78:	81 30       	cpi	r24, 0x01	; 1
    2a7a:	31 f4       	brne	.+12     	; 0x2a88 <main+0x38>
		USART0SendByte('F',&usart0_str);
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	71 e0       	ldi	r23, 0x01	; 1
    2a80:	86 e4       	ldi	r24, 0x46	; 70
    2a82:	0e 94 de 14 	call	0x29bc	; 0x29bc <USART0SendByte>
		while(1);
    2a86:	ff cf       	rjmp	.-2      	; 0x2a86 <main+0x36>
	}else{
		USART0SendByte('B',&usart0_str);
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	71 e0       	ldi	r23, 0x01	; 1
    2a8c:	82 e4       	ldi	r24, 0x42	; 66
    2a8e:	0e 94 de 14 	call	0x29bc	; 0x29bc <USART0SendByte>
	}
	res = f_mount(0, &fs);
    2a92:	6c eb       	ldi	r22, 0xBC	; 188
    2a94:	71 e0       	ldi	r23, 0x01	; 1
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	0e 94 80 0b 	call	0x1700	; 0x1700 <f_mount>
	if (res == FR_OK) {
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	35 c0       	rjmp	.+106    	; 0x2b0a <main+0xba>
		res = f_open(&fin, "poem.txt", FA_OPEN_EXISTING | FA_READ);
    2aa0:	41 e0       	ldi	r20, 0x01	; 1
    2aa2:	6e e1       	ldi	r22, 0x1E	; 30
    2aa4:	71 e0       	ldi	r23, 0x01	; 1
    2aa6:	82 e4       	ldi	r24, 0x42	; 66
    2aa8:	94 e0       	ldi	r25, 0x04	; 4
    2aaa:	0e 94 96 0b 	call	0x172c	; 0x172c <f_open>
		if (res == FR_OK) {
    2aae:	81 11       	cpse	r24, r1
    2ab0:	27 c0       	rjmp	.+78     	; 0x2b00 <main+0xb0>
			do {
				f_gets(line, sizeof(line), &fin);
    2ab2:	42 e4       	ldi	r20, 0x42	; 66
    2ab4:	54 e0       	ldi	r21, 0x04	; 4
    2ab6:	60 e5       	ldi	r22, 0x50	; 80
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	82 ef       	ldi	r24, 0xF2	; 242
    2abc:	93 e0       	ldi	r25, 0x03	; 3
    2abe:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <f_gets>
				USART0SendByte('C',&usart0_str);
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	71 e0       	ldi	r23, 0x01	; 1
    2ac6:	83 e4       	ldi	r24, 0x43	; 67
    2ac8:	0e 94 de 14 	call	0x29bc	; 0x29bc <USART0SendByte>
				uart_puts(line);
    2acc:	82 ef       	ldi	r24, 0xF2	; 242
    2ace:	93 e0       	ldi	r25, 0x03	; 3
    2ad0:	0e 94 19 15 	call	0x2a32	; 0x2a32 <uart_puts>
				uart_putc('\r');
    2ad4:	8d e0       	ldi	r24, 0x0D	; 13
    2ad6:	0e 94 4d 14 	call	0x289a	; 0x289a <uart_putc>
			} while (!f_eof(&fin));
    2ada:	e2 e4       	ldi	r30, 0x42	; 66
    2adc:	f4 e0       	ldi	r31, 0x04	; 4
    2ade:	46 81       	ldd	r20, Z+6	; 0x06
    2ae0:	57 81       	ldd	r21, Z+7	; 0x07
    2ae2:	60 85       	ldd	r22, Z+8	; 0x08
    2ae4:	71 85       	ldd	r23, Z+9	; 0x09
    2ae6:	82 85       	ldd	r24, Z+10	; 0x0a
    2ae8:	93 85       	ldd	r25, Z+11	; 0x0b
    2aea:	a4 85       	ldd	r26, Z+12	; 0x0c
    2aec:	b5 85       	ldd	r27, Z+13	; 0x0d
    2aee:	48 17       	cp	r20, r24
    2af0:	59 07       	cpc	r21, r25
    2af2:	6a 07       	cpc	r22, r26
    2af4:	7b 07       	cpc	r23, r27
    2af6:	e9 f6       	brne	.-70     	; 0x2ab2 <main+0x62>
			f_close(&fin);
    2af8:	cf 01       	movw	r24, r30
    2afa:	0e 94 65 0f 	call	0x1eca	; 0x1eca <f_close>
    2afe:	05 c0       	rjmp	.+10     	; 0x2b0a <main+0xba>
		} else{
			USART0SendByte('G',&usart0_str);
    2b00:	61 e0       	ldi	r22, 0x01	; 1
    2b02:	71 e0       	ldi	r23, 0x01	; 1
    2b04:	87 e4       	ldi	r24, 0x47	; 71
    2b06:	0e 94 de 14 	call	0x29bc	; 0x29bc <USART0SendByte>
		}
	}
	while(1)
	{
	}
    2b0a:	ff cf       	rjmp	.-2      	; 0x2b0a <main+0xba>

00002b0c <get_fattime>:
	| ((DWORD)3 << 21)
	| ((DWORD)23 << 16)
	| ((DWORD)12 << 11)
	| ((DWORD)0 << 5)
	| ((DWORD)0 >> 1);
    2b0c:	60 e0       	ldi	r22, 0x00	; 0
    2b0e:	70 e6       	ldi	r23, 0x60	; 96
    2b10:	87 e7       	ldi	r24, 0x77	; 119
    2b12:	92 e4       	ldi	r25, 0x42	; 66
    2b14:	08 95       	ret

00002b16 <__udivmodsi4>:
    2b16:	a1 e2       	ldi	r26, 0x21	; 33
    2b18:	1a 2e       	mov	r1, r26
    2b1a:	aa 1b       	sub	r26, r26
    2b1c:	bb 1b       	sub	r27, r27
    2b1e:	fd 01       	movw	r30, r26
    2b20:	0d c0       	rjmp	.+26     	; 0x2b3c <__udivmodsi4_ep>

00002b22 <__udivmodsi4_loop>:
    2b22:	aa 1f       	adc	r26, r26
    2b24:	bb 1f       	adc	r27, r27
    2b26:	ee 1f       	adc	r30, r30
    2b28:	ff 1f       	adc	r31, r31
    2b2a:	a2 17       	cp	r26, r18
    2b2c:	b3 07       	cpc	r27, r19
    2b2e:	e4 07       	cpc	r30, r20
    2b30:	f5 07       	cpc	r31, r21
    2b32:	20 f0       	brcs	.+8      	; 0x2b3c <__udivmodsi4_ep>
    2b34:	a2 1b       	sub	r26, r18
    2b36:	b3 0b       	sbc	r27, r19
    2b38:	e4 0b       	sbc	r30, r20
    2b3a:	f5 0b       	sbc	r31, r21

00002b3c <__udivmodsi4_ep>:
    2b3c:	66 1f       	adc	r22, r22
    2b3e:	77 1f       	adc	r23, r23
    2b40:	88 1f       	adc	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	1a 94       	dec	r1
    2b46:	69 f7       	brne	.-38     	; 0x2b22 <__udivmodsi4_loop>
    2b48:	60 95       	com	r22
    2b4a:	70 95       	com	r23
    2b4c:	80 95       	com	r24
    2b4e:	90 95       	com	r25
    2b50:	9b 01       	movw	r18, r22
    2b52:	ac 01       	movw	r20, r24
    2b54:	bd 01       	movw	r22, r26
    2b56:	cf 01       	movw	r24, r30
    2b58:	08 95       	ret

00002b5a <__tablejump2__>:
    2b5a:	ee 0f       	add	r30, r30
    2b5c:	ff 1f       	adc	r31, r31
    2b5e:	05 90       	lpm	r0, Z+
    2b60:	f4 91       	lpm	r31, Z
    2b62:	e0 2d       	mov	r30, r0
    2b64:	09 94       	ijmp

00002b66 <__muluhisi3>:
    2b66:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__umulhisi3>
    2b6a:	a5 9f       	mul	r26, r21
    2b6c:	90 0d       	add	r25, r0
    2b6e:	b4 9f       	mul	r27, r20
    2b70:	90 0d       	add	r25, r0
    2b72:	a4 9f       	mul	r26, r20
    2b74:	80 0d       	add	r24, r0
    2b76:	91 1d       	adc	r25, r1
    2b78:	11 24       	eor	r1, r1
    2b7a:	08 95       	ret

00002b7c <__umulhisi3>:
    2b7c:	a2 9f       	mul	r26, r18
    2b7e:	b0 01       	movw	r22, r0
    2b80:	b3 9f       	mul	r27, r19
    2b82:	c0 01       	movw	r24, r0
    2b84:	a3 9f       	mul	r26, r19
    2b86:	70 0d       	add	r23, r0
    2b88:	81 1d       	adc	r24, r1
    2b8a:	11 24       	eor	r1, r1
    2b8c:	91 1d       	adc	r25, r1
    2b8e:	b2 9f       	mul	r27, r18
    2b90:	70 0d       	add	r23, r0
    2b92:	81 1d       	adc	r24, r1
    2b94:	11 24       	eor	r1, r1
    2b96:	91 1d       	adc	r25, r1
    2b98:	08 95       	ret

00002b9a <_exit>:
    2b9a:	f8 94       	cli

00002b9c <__stop_program>:
    2b9c:	ff cf       	rjmp	.-2      	; 0x2b9c <__stop_program>
