
FatfsAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000031a4  00003238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006f3  0080012e  0080012e  00003266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  000032d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003de7  00000000  00000000  00003514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000922  00000000  00000000  000072fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028c0  00000000  00000000  00007c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bd4  00000000  00000000  0000a4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000896  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000682d  00000000  00000000  0000b94a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00012177  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__vector_7>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__vector_18>
      4c:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__vector_19>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	40 12       	cpse	r4, r16
      6a:	2b 11       	cpse	r18, r11
      6c:	3f 11       	cpse	r19, r15
      6e:	39 11       	cpse	r19, r9
      70:	39 11       	cpse	r19, r9
      72:	39 11       	cpse	r19, r9
      74:	39 11       	cpse	r19, r9
      76:	39 11       	cpse	r19, r9
      78:	39 11       	cpse	r19, r9
      7a:	39 11       	cpse	r19, r9
      7c:	39 11       	cpse	r19, r9
      7e:	39 11       	cpse	r19, r9
      80:	39 11       	cpse	r19, r9
      82:	4f 12       	cpse	r4, r31
      84:	39 11       	cpse	r19, r9
      86:	39 11       	cpse	r19, r9
      88:	39 11       	cpse	r19, r9
      8a:	d8 10       	cpse	r13, r8
      8c:	39 11       	cpse	r19, r9
      8e:	3f 11       	cpse	r19, r15
      90:	39 11       	cpse	r19, r9
      92:	39 11       	cpse	r19, r9
      94:	16 12       	cpse	r1, r22
      96:	2f 15       	cp	r18, r15
      98:	37 15       	cp	r19, r7
      9a:	8d 16       	cp	r8, r29
      9c:	a9 15       	cp	r26, r9
      9e:	8d 16       	cp	r8, r29
      a0:	8d 16       	cp	r8, r29
      a2:	8d 16       	cp	r8, r29
      a4:	8d 16       	cp	r8, r29
      a6:	8d 16       	cp	r8, r29
      a8:	8d 16       	cp	r8, r29
      aa:	35 16       	cp	r3, r21
      ac:	3b 16       	cp	r3, r27
      ae:	4e 16       	cp	r4, r30
      b0:	61 16       	cp	r6, r17
      b2:	78 16       	cp	r7, r24

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 ea       	ldi	r30, 0xA4	; 164
      c8:	f1 e3       	ldi	r31, 0x31	; 49
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ae 32       	cpi	r26, 0x2E	; 46
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	28 e0       	ldi	r18, 0x08	; 8
      d8:	ae e2       	ldi	r26, 0x2E	; 46
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a1 32       	cpi	r26, 0x21	; 33
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 1b 18 	call	0x3036	; 0x3036 <main>
      ea:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <mem_cpy>:
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
}
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	42 30       	cpi	r20, 0x02	; 2
      f8:	51 05       	cpc	r21, r1
      fa:	c0 f0       	brcs	.+48     	; 0x12c <mem_cpy+0x3a>
      fc:	db 01       	movw	r26, r22
      fe:	fc 01       	movw	r30, r24
     100:	9a 01       	movw	r18, r20
     102:	cd 91       	ld	r28, X+
     104:	dd 91       	ld	r29, X+
     106:	c1 93       	st	Z+, r28
     108:	d1 93       	st	Z+, r29
     10a:	22 50       	subi	r18, 0x02	; 2
     10c:	31 09       	sbc	r19, r1
     10e:	22 30       	cpi	r18, 0x02	; 2
     110:	31 05       	cpc	r19, r1
     112:	b8 f7       	brcc	.-18     	; 0x102 <mem_cpy+0x10>
     114:	9a 01       	movw	r18, r20
     116:	22 50       	subi	r18, 0x02	; 2
     118:	31 09       	sbc	r19, r1
     11a:	2e 7f       	andi	r18, 0xFE	; 254
     11c:	2e 5f       	subi	r18, 0xFE	; 254
     11e:	3f 4f       	sbci	r19, 0xFF	; 255
     120:	82 0f       	add	r24, r18
     122:	93 1f       	adc	r25, r19
     124:	62 0f       	add	r22, r18
     126:	73 1f       	adc	r23, r19
     128:	41 70       	andi	r20, 0x01	; 1
     12a:	55 27       	eor	r21, r21
     12c:	41 15       	cp	r20, r1
     12e:	51 05       	cpc	r21, r1
     130:	49 f0       	breq	.+18     	; 0x144 <mem_cpy+0x52>
     132:	db 01       	movw	r26, r22
     134:	fc 01       	movw	r30, r24
     136:	48 0f       	add	r20, r24
     138:	59 1f       	adc	r21, r25
     13a:	9d 91       	ld	r25, X+
     13c:	91 93       	st	Z+, r25
     13e:	e4 17       	cp	r30, r20
     140:	f5 07       	cpc	r31, r21
     142:	d9 f7       	brne	.-10     	; 0x13a <mem_cpy+0x48>
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <ld_clust>:
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	dc 01       	movw	r26, r24
     150:	fb 01       	movw	r30, r22
     152:	62 8d       	ldd	r22, Z+26	; 0x1a
     154:	73 8d       	ldd	r23, Z+27	; 0x1b
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	2c 91       	ld	r18, X
     15c:	23 30       	cpi	r18, 0x03	; 3
     15e:	59 f4       	brne	.+22     	; 0x176 <ld_clust+0x2c>
     160:	04 89       	ldd	r16, Z+20	; 0x14
     162:	15 89       	ldd	r17, Z+21	; 0x15
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	98 01       	movw	r18, r16
     16a:	11 27       	eor	r17, r17
     16c:	00 27       	eor	r16, r16
     16e:	60 2b       	or	r22, r16
     170:	71 2b       	or	r23, r17
     172:	82 2b       	or	r24, r18
     174:	93 2b       	or	r25, r19
     176:	1f 91       	pop	r17
     178:	0f 91       	pop	r16
     17a:	08 95       	ret

0000017c <check_fs>:
     17c:	0f 93       	push	r16
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
     184:	9a 01       	movw	r18, r20
     186:	ab 01       	movw	r20, r22
     188:	bc 01       	movw	r22, r24
     18a:	6a 5c       	subi	r22, 0xCA	; 202
     18c:	7f 4f       	sbci	r23, 0xFF	; 255
     18e:	01 e0       	ldi	r16, 0x01	; 1
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	0e 94 3e 14 	call	0x287c	; 0x287c <disk_read>
     196:	81 11       	cpse	r24, r1
     198:	23 c0       	rjmp	.+70     	; 0x1e0 <check_fs+0x64>
     19a:	fe 01       	movw	r30, r28
     19c:	ec 5c       	subi	r30, 0xCC	; 204
     19e:	fd 4f       	sbci	r31, 0xFD	; 253
     1a0:	80 81       	ld	r24, Z
     1a2:	91 81       	ldd	r25, Z+1	; 0x01
     1a4:	85 35       	cpi	r24, 0x55	; 85
     1a6:	9a 4a       	sbci	r25, 0xAA	; 170
     1a8:	e9 f4       	brne	.+58     	; 0x1e4 <check_fs+0x68>
     1aa:	e8 5c       	subi	r30, 0xC8	; 200
     1ac:	f1 40       	sbci	r31, 0x01	; 1
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	a2 81       	ldd	r26, Z+2	; 0x02
     1b4:	b3 81       	ldd	r27, Z+3	; 0x03
     1b6:	bb 27       	eor	r27, r27
     1b8:	86 34       	cpi	r24, 0x46	; 70
     1ba:	91 44       	sbci	r25, 0x41	; 65
     1bc:	a4 45       	sbci	r26, 0x54	; 84
     1be:	b1 05       	cpc	r27, r1
     1c0:	99 f0       	breq	.+38     	; 0x1e8 <check_fs+0x6c>
     1c2:	c8 57       	subi	r28, 0x78	; 120
     1c4:	df 4f       	sbci	r29, 0xFF	; 255
     1c6:	48 81       	ld	r20, Y
     1c8:	59 81       	ldd	r21, Y+1	; 0x01
     1ca:	6a 81       	ldd	r22, Y+2	; 0x02
     1cc:	7b 81       	ldd	r23, Y+3	; 0x03
     1ce:	77 27       	eor	r23, r23
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	46 34       	cpi	r20, 0x46	; 70
     1d4:	51 44       	sbci	r21, 0x41	; 65
     1d6:	64 45       	sbci	r22, 0x54	; 84
     1d8:	71 05       	cpc	r23, r1
     1da:	39 f4       	brne	.+14     	; 0x1ea <check_fs+0x6e>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	05 c0       	rjmp	.+10     	; 0x1ea <check_fs+0x6e>
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <check_fs+0x6e>
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	01 c0       	rjmp	.+2      	; 0x1ea <check_fs+0x6e>
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	0f 91       	pop	r16
     1f0:	08 95       	ret

000001f2 <sync_window>:
     1f2:	8f 92       	push	r8
     1f4:	9f 92       	push	r9
     1f6:	af 92       	push	r10
     1f8:	bf 92       	push	r11
     1fa:	cf 92       	push	r12
     1fc:	df 92       	push	r13
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	fc 01       	movw	r30, r24
     20a:	24 81       	ldd	r18, Z+4	; 0x04
     20c:	22 23       	and	r18, r18
     20e:	09 f4       	brne	.+2      	; 0x212 <sync_window+0x20>
     210:	47 c0       	rjmp	.+142    	; 0x2a0 <sync_window+0xae>
     212:	ec 01       	movw	r28, r24
     214:	c2 a8       	ldd	r12, Z+50	; 0x32
     216:	d3 a8       	ldd	r13, Z+51	; 0x33
     218:	e4 a8       	ldd	r14, Z+52	; 0x34
     21a:	f5 a8       	ldd	r15, Z+53	; 0x35
     21c:	4c 01       	movw	r8, r24
     21e:	f6 e3       	ldi	r31, 0x36	; 54
     220:	8f 0e       	add	r8, r31
     222:	91 1c       	adc	r9, r1
     224:	01 e0       	ldi	r16, 0x01	; 1
     226:	a7 01       	movw	r20, r14
     228:	96 01       	movw	r18, r12
     22a:	b4 01       	movw	r22, r8
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	0e 94 91 14 	call	0x2922	; 0x2922 <disk_write>
     232:	81 11       	cpse	r24, r1
     234:	37 c0       	rjmp	.+110    	; 0x2a4 <sync_window+0xb2>
     236:	1c 82       	std	Y+4, r1	; 0x04
     238:	8e a1       	ldd	r24, Y+38	; 0x26
     23a:	9f a1       	ldd	r25, Y+39	; 0x27
     23c:	a8 a5       	ldd	r26, Y+40	; 0x28
     23e:	b9 a5       	ldd	r27, Y+41	; 0x29
     240:	c8 16       	cp	r12, r24
     242:	d9 06       	cpc	r13, r25
     244:	ea 06       	cpc	r14, r26
     246:	fb 06       	cpc	r15, r27
     248:	78 f1       	brcs	.+94     	; 0x2a8 <sync_window+0xb6>
     24a:	4e 8d       	ldd	r20, Y+30	; 0x1e
     24c:	5f 8d       	ldd	r21, Y+31	; 0x1f
     24e:	68 a1       	ldd	r22, Y+32	; 0x20
     250:	79 a1       	ldd	r23, Y+33	; 0x21
     252:	84 0f       	add	r24, r20
     254:	95 1f       	adc	r25, r21
     256:	a6 1f       	adc	r26, r22
     258:	b7 1f       	adc	r27, r23
     25a:	c8 16       	cp	r12, r24
     25c:	d9 06       	cpc	r13, r25
     25e:	ea 06       	cpc	r14, r26
     260:	fb 06       	cpc	r15, r27
     262:	20 f5       	brcc	.+72     	; 0x2ac <sync_window+0xba>
     264:	ab 80       	ldd	r10, Y+3	; 0x03
     266:	b1 2c       	mov	r11, r1
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	a8 16       	cp	r10, r24
     26c:	b1 04       	cpc	r11, r1
     26e:	00 f1       	brcs	.+64     	; 0x2b0 <sync_window+0xbe>
     270:	8e 8d       	ldd	r24, Y+30	; 0x1e
     272:	9f 8d       	ldd	r25, Y+31	; 0x1f
     274:	a8 a1       	ldd	r26, Y+32	; 0x20
     276:	b9 a1       	ldd	r27, Y+33	; 0x21
     278:	c8 0e       	add	r12, r24
     27a:	d9 1e       	adc	r13, r25
     27c:	ea 1e       	adc	r14, r26
     27e:	fb 1e       	adc	r15, r27
     280:	01 e0       	ldi	r16, 0x01	; 1
     282:	a7 01       	movw	r20, r14
     284:	96 01       	movw	r18, r12
     286:	b4 01       	movw	r22, r8
     288:	89 81       	ldd	r24, Y+1	; 0x01
     28a:	0e 94 91 14 	call	0x2922	; 0x2922 <disk_write>
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	ae 1a       	sub	r10, r30
     292:	b1 08       	sbc	r11, r1
     294:	f1 e0       	ldi	r31, 0x01	; 1
     296:	af 16       	cp	r10, r31
     298:	b1 04       	cpc	r11, r1
     29a:	51 f7       	brne	.-44     	; 0x270 <sync_window+0x7e>
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	09 c0       	rjmp	.+18     	; 0x2b2 <sync_window+0xc0>
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <sync_window+0xc0>
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <sync_window+0xc0>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <sync_window+0xc0>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <sync_window+0xc0>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	bf 90       	pop	r11
     2c2:	af 90       	pop	r10
     2c4:	9f 90       	pop	r9
     2c6:	8f 90       	pop	r8
     2c8:	08 95       	ret

000002ca <move_window>:
     2ca:	cf 92       	push	r12
     2cc:	df 92       	push	r13
     2ce:	ef 92       	push	r14
     2d0:	ff 92       	push	r15
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	fc 01       	movw	r30, r24
     2dc:	c2 a8       	ldd	r12, Z+50	; 0x32
     2de:	d3 a8       	ldd	r13, Z+51	; 0x33
     2e0:	e4 a8       	ldd	r14, Z+52	; 0x34
     2e2:	f5 a8       	ldd	r15, Z+53	; 0x35
     2e4:	c4 16       	cp	r12, r20
     2e6:	d5 06       	cpc	r13, r21
     2e8:	e6 06       	cpc	r14, r22
     2ea:	f7 06       	cpc	r15, r23
     2ec:	c1 f0       	breq	.+48     	; 0x31e <move_window+0x54>
     2ee:	6a 01       	movw	r12, r20
     2f0:	7b 01       	movw	r14, r22
     2f2:	ec 01       	movw	r28, r24
     2f4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sync_window>
     2f8:	18 2f       	mov	r17, r24
     2fa:	81 11       	cpse	r24, r1
     2fc:	12 c0       	rjmp	.+36     	; 0x322 <move_window+0x58>
     2fe:	01 e0       	ldi	r16, 0x01	; 1
     300:	a7 01       	movw	r20, r14
     302:	96 01       	movw	r18, r12
     304:	be 01       	movw	r22, r28
     306:	6a 5c       	subi	r22, 0xCA	; 202
     308:	7f 4f       	sbci	r23, 0xFF	; 255
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	0e 94 3e 14 	call	0x287c	; 0x287c <disk_read>
     310:	81 11       	cpse	r24, r1
     312:	09 c0       	rjmp	.+18     	; 0x326 <move_window+0x5c>
     314:	ca aa       	std	Y+50, r12	; 0x32
     316:	db aa       	std	Y+51, r13	; 0x33
     318:	ec aa       	std	Y+52, r14	; 0x34
     31a:	fd aa       	std	Y+53, r15	; 0x35
     31c:	05 c0       	rjmp	.+10     	; 0x328 <move_window+0x5e>
     31e:	10 e0       	ldi	r17, 0x00	; 0
     320:	03 c0       	rjmp	.+6      	; 0x328 <move_window+0x5e>
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	01 c0       	rjmp	.+2      	; 0x328 <move_window+0x5e>
     326:	11 e0       	ldi	r17, 0x01	; 1
     328:	81 2f       	mov	r24, r17
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	08 95       	ret

0000033c <validate>:
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	c9 f0       	breq	.+50     	; 0x372 <validate+0x36>
     340:	dc 01       	movw	r26, r24
     342:	ed 91       	ld	r30, X+
     344:	fc 91       	ld	r31, X
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	30 97       	sbiw	r30, 0x00	; 0
     34a:	a9 f0       	breq	.+42     	; 0x376 <validate+0x3a>
     34c:	20 81       	ld	r18, Z
     34e:	22 23       	and	r18, r18
     350:	a1 f0       	breq	.+40     	; 0x37a <validate+0x3e>
     352:	26 81       	ldd	r18, Z+6	; 0x06
     354:	37 81       	ldd	r19, Z+7	; 0x07
     356:	12 96       	adiw	r26, 0x02	; 2
     358:	8d 91       	ld	r24, X+
     35a:	9c 91       	ld	r25, X
     35c:	13 97       	sbiw	r26, 0x03	; 3
     35e:	28 17       	cp	r18, r24
     360:	39 07       	cpc	r19, r25
     362:	69 f4       	brne	.+26     	; 0x37e <validate+0x42>
     364:	81 81       	ldd	r24, Z+1	; 0x01
     366:	0e 94 37 14 	call	0x286e	; 0x286e <disk_status>
     36a:	80 fd       	sbrc	r24, 0
     36c:	0a c0       	rjmp	.+20     	; 0x382 <validate+0x46>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	08 95       	ret
     372:	89 e0       	ldi	r24, 0x09	; 9
     374:	08 95       	ret
     376:	89 e0       	ldi	r24, 0x09	; 9
     378:	08 95       	ret
     37a:	89 e0       	ldi	r24, 0x09	; 9
     37c:	08 95       	ret
     37e:	89 e0       	ldi	r24, 0x09	; 9
     380:	08 95       	ret
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	08 95       	ret

00000386 <chk_mounted>:
     386:	2f 92       	push	r2
     388:	3f 92       	push	r3
     38a:	4f 92       	push	r4
     38c:	5f 92       	push	r5
     38e:	6f 92       	push	r6
     390:	7f 92       	push	r7
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	2e 97       	sbiw	r28, 0x0e	; 14
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	cd bf       	out	0x3d, r28	; 61
     3ba:	dc 01       	movw	r26, r24
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	11 97       	sbiw	r26, 0x01	; 1
     3c2:	20 81       	ld	r18, Z
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	20 53       	subi	r18, 0x30	; 48
     3c8:	31 09       	sbc	r19, r1
     3ca:	2a 30       	cpi	r18, 0x0A	; 10
     3cc:	31 05       	cpc	r19, r1
     3ce:	38 f4       	brcc	.+14     	; 0x3de <chk_mounted+0x58>
     3d0:	51 81       	ldd	r21, Z+1	; 0x01
     3d2:	5a 33       	cpi	r21, 0x3A	; 58
     3d4:	21 f4       	brne	.+8      	; 0x3de <chk_mounted+0x58>
     3d6:	32 96       	adiw	r30, 0x02	; 2
     3d8:	ed 93       	st	X+, r30
     3da:	fc 93       	st	X, r31
     3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <chk_mounted+0x5e>
     3de:	20 91 2e 01 	lds	r18, 0x012E
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	fb 01       	movw	r30, r22
     3e6:	11 82       	std	Z+1, r1	; 0x01
     3e8:	10 82       	st	Z, r1
     3ea:	23 2b       	or	r18, r19
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <chk_mounted+0x6a>
     3ee:	0a c2       	rjmp	.+1044   	; 0x804 <__FUSE_REGION_LENGTH__+0x404>
     3f0:	20 91 31 01 	lds	r18, 0x0131
     3f4:	30 91 32 01 	lds	r19, 0x0132
     3f8:	3e 87       	std	Y+14, r19	; 0x0e
     3fa:	2d 87       	std	Y+13, r18	; 0x0d
     3fc:	21 15       	cp	r18, r1
     3fe:	31 05       	cpc	r19, r1
     400:	09 f4       	brne	.+2      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     402:	02 c2       	rjmp	.+1028   	; 0x808 <__FUSE_REGION_LENGTH__+0x408>
     404:	14 2f       	mov	r17, r20
     406:	31 83       	std	Z+1, r19	; 0x01
     408:	20 83       	st	Z, r18
     40a:	d9 01       	movw	r26, r18
     40c:	8c 91       	ld	r24, X
     40e:	88 23       	and	r24, r24
     410:	69 f0       	breq	.+26     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
     412:	11 96       	adiw	r26, 0x01	; 1
     414:	8c 91       	ld	r24, X
     416:	0e 94 37 14 	call	0x286e	; 0x286e <disk_status>
     41a:	80 fd       	sbrc	r24, 0
     41c:	07 c0       	rjmp	.+14     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
     41e:	11 23       	and	r17, r17
     420:	09 f4       	brne	.+2      	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
     422:	f4 c1       	rjmp	.+1000   	; 0x80c <__FUSE_REGION_LENGTH__+0x40c>
     424:	82 ff       	sbrs	r24, 2
     426:	f4 c1       	rjmp	.+1000   	; 0x810 <__FUSE_REGION_LENGTH__+0x410>
     428:	8a e0       	ldi	r24, 0x0A	; 10
     42a:	8e c2       	rjmp	.+1308   	; 0x948 <__stack+0x49>
     42c:	ed 85       	ldd	r30, Y+13	; 0x0d
     42e:	fe 85       	ldd	r31, Y+14	; 0x0e
     430:	10 82       	st	Z, r1
     432:	11 82       	std	Z+1, r1	; 0x01
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 63 13 	call	0x26c6	; 0x26c6 <disk_initialize>
     43a:	80 fd       	sbrc	r24, 0
     43c:	eb c1       	rjmp	.+982    	; 0x814 <__FUSE_REGION_LENGTH__+0x414>
     43e:	11 23       	and	r17, r17
     440:	11 f0       	breq	.+4      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     442:	82 fd       	sbrc	r24, 2
     444:	e9 c1       	rjmp	.+978    	; 0x818 <__FUSE_REGION_LENGTH__+0x418>
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	ba 01       	movw	r22, r20
     44c:	8d 85       	ldd	r24, Y+13	; 0x0d
     44e:	9e 85       	ldd	r25, Y+14	; 0x0e
     450:	0e 94 be 00 	call	0x17c	; 0x17c <check_fs>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	b9 f4       	brne	.+46     	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
     458:	ed 85       	ldd	r30, Y+13	; 0x0d
     45a:	fe 85       	ldd	r31, Y+14	; 0x0e
     45c:	e8 50       	subi	r30, 0x08	; 8
     45e:	fe 4f       	sbci	r31, 0xFE	; 254
     460:	80 81       	ld	r24, Z
     462:	88 23       	and	r24, r24
     464:	09 f4       	brne	.+2      	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
     466:	da c1       	rjmp	.+948    	; 0x81c <__FUSE_REGION_LENGTH__+0x41c>
     468:	ed 85       	ldd	r30, Y+13	; 0x0d
     46a:	fe 85       	ldd	r31, Y+14	; 0x0e
     46c:	e4 50       	subi	r30, 0x04	; 4
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	c0 80       	ld	r12, Z
     472:	d1 80       	ldd	r13, Z+1	; 0x01
     474:	e2 80       	ldd	r14, Z+2	; 0x02
     476:	f3 80       	ldd	r15, Z+3	; 0x03
     478:	b7 01       	movw	r22, r14
     47a:	a6 01       	movw	r20, r12
     47c:	8d 85       	ldd	r24, Y+13	; 0x0d
     47e:	9e 85       	ldd	r25, Y+14	; 0x0e
     480:	0e 94 be 00 	call	0x17c	; 0x17c <check_fs>
     484:	03 c0       	rjmp	.+6      	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
     486:	c1 2c       	mov	r12, r1
     488:	d1 2c       	mov	r13, r1
     48a:	76 01       	movw	r14, r12
     48c:	83 30       	cpi	r24, 0x03	; 3
     48e:	09 f4       	brne	.+2      	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
     490:	c7 c1       	rjmp	.+910    	; 0x820 <__FUSE_REGION_LENGTH__+0x420>
     492:	81 11       	cpse	r24, r1
     494:	c7 c1       	rjmp	.+910    	; 0x824 <__FUSE_REGION_LENGTH__+0x424>
     496:	ed 85       	ldd	r30, Y+13	; 0x0d
     498:	fe 85       	ldd	r31, Y+14	; 0x0e
     49a:	ef 5b       	subi	r30, 0xBF	; 191
     49c:	ff 4f       	sbci	r31, 0xFF	; 255
     49e:	80 81       	ld	r24, Z
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	81 15       	cp	r24, r1
     4a4:	92 40       	sbci	r25, 0x02	; 2
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     4a8:	bf c1       	rjmp	.+894    	; 0x828 <__FUSE_REGION_LENGTH__+0x428>
     4aa:	ed 85       	ldd	r30, Y+13	; 0x0d
     4ac:	fe 85       	ldd	r31, Y+14	; 0x0e
     4ae:	e4 5b       	subi	r30, 0xB4	; 180
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	40 80       	ld	r4, Z
     4b4:	51 80       	ldd	r5, Z+1	; 0x01
     4b6:	61 2c       	mov	r6, r1
     4b8:	71 2c       	mov	r7, r1
     4ba:	41 14       	cp	r4, r1
     4bc:	51 04       	cpc	r5, r1
     4be:	61 04       	cpc	r6, r1
     4c0:	71 04       	cpc	r7, r1
     4c2:	41 f4       	brne	.+16     	; 0x4d4 <__FUSE_REGION_LENGTH__+0xd4>
     4c4:	ed 85       	ldd	r30, Y+13	; 0x0d
     4c6:	fe 85       	ldd	r31, Y+14	; 0x0e
     4c8:	e6 5a       	subi	r30, 0xA6	; 166
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	40 80       	ld	r4, Z
     4ce:	51 80       	ldd	r5, Z+1	; 0x01
     4d0:	62 80       	ldd	r6, Z+2	; 0x02
     4d2:	73 80       	ldd	r7, Z+3	; 0x03
     4d4:	ad 85       	ldd	r26, Y+13	; 0x0d
     4d6:	be 85       	ldd	r27, Y+14	; 0x0e
     4d8:	5e 96       	adiw	r26, 0x1e	; 30
     4da:	4d 92       	st	X+, r4
     4dc:	5d 92       	st	X+, r5
     4de:	6d 92       	st	X+, r6
     4e0:	7c 92       	st	X, r7
     4e2:	91 97       	sbiw	r26, 0x21	; 33
     4e4:	fd 01       	movw	r30, r26
     4e6:	ea 5b       	subi	r30, 0xBA	; 186
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	a0 81       	ld	r26, Z
     4ec:	ed 85       	ldd	r30, Y+13	; 0x0d
     4ee:	fe 85       	ldd	r31, Y+14	; 0x0e
     4f0:	a3 83       	std	Z+3, r26	; 0x03
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	8a 0f       	add	r24, r26
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	08 f0       	brcs	.+2      	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
     4fa:	98 c1       	rjmp	.+816    	; 0x82c <__FUSE_REGION_LENGTH__+0x42c>
     4fc:	ed 5b       	subi	r30, 0xBD	; 189
     4fe:	ff 4f       	sbci	r31, 0xFF	; 255
     500:	10 81       	ld	r17, Z
     502:	ed 85       	ldd	r30, Y+13	; 0x0d
     504:	fe 85       	ldd	r31, Y+14	; 0x0e
     506:	12 83       	std	Z+2, r17	; 0x02
     508:	11 23       	and	r17, r17
     50a:	09 f4       	brne	.+2      	; 0x50e <__FUSE_REGION_LENGTH__+0x10e>
     50c:	91 c1       	rjmp	.+802    	; 0x830 <__FUSE_REGION_LENGTH__+0x430>
     50e:	81 2f       	mov	r24, r17
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	9c 01       	movw	r18, r24
     514:	21 50       	subi	r18, 0x01	; 1
     516:	31 09       	sbc	r19, r1
     518:	82 23       	and	r24, r18
     51a:	93 23       	and	r25, r19
     51c:	89 2b       	or	r24, r25
     51e:	09 f0       	breq	.+2      	; 0x522 <__FUSE_REGION_LENGTH__+0x122>
     520:	89 c1       	rjmp	.+786    	; 0x834 <__FUSE_REGION_LENGTH__+0x434>
     522:	e9 5b       	subi	r30, 0xB9	; 185
     524:	ff 4f       	sbci	r31, 0xFF	; 255
     526:	20 80       	ld	r2, Z
     528:	31 80       	ldd	r3, Z+1	; 0x01
     52a:	ed 85       	ldd	r30, Y+13	; 0x0d
     52c:	fe 85       	ldd	r31, Y+14	; 0x0e
     52e:	31 86       	std	Z+9, r3	; 0x09
     530:	20 86       	std	Z+8, r2	; 0x08
     532:	c1 01       	movw	r24, r2
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	99 27       	eor	r25, r25
     538:	89 2b       	or	r24, r25
     53a:	09 f0       	breq	.+2      	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
     53c:	7d c1       	rjmp	.+762    	; 0x838 <__FUSE_REGION_LENGTH__+0x438>
     53e:	e7 5b       	subi	r30, 0xB7	; 183
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	80 80       	ld	r8, Z
     544:	91 80       	ldd	r9, Z+1	; 0x01
     546:	a1 2c       	mov	r10, r1
     548:	b1 2c       	mov	r11, r1
     54a:	81 14       	cp	r8, r1
     54c:	91 04       	cpc	r9, r1
     54e:	a1 04       	cpc	r10, r1
     550:	b1 04       	cpc	r11, r1
     552:	41 f4       	brne	.+16     	; 0x564 <__FUSE_REGION_LENGTH__+0x164>
     554:	ed 85       	ldd	r30, Y+13	; 0x0d
     556:	fe 85       	ldd	r31, Y+14	; 0x0e
     558:	ea 5a       	subi	r30, 0xAA	; 170
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	80 80       	ld	r8, Z
     55e:	91 80       	ldd	r9, Z+1	; 0x01
     560:	a2 80       	ldd	r10, Z+2	; 0x02
     562:	b3 80       	ldd	r11, Z+3	; 0x03
     564:	ed 85       	ldd	r30, Y+13	; 0x0d
     566:	fe 85       	ldd	r31, Y+14	; 0x0e
     568:	ec 5b       	subi	r30, 0xBC	; 188
     56a:	ff 4f       	sbci	r31, 0xFF	; 255
     56c:	20 81       	ld	r18, Z
     56e:	31 81       	ldd	r19, Z+1	; 0x01
     570:	3a 83       	std	Y+2, r19	; 0x02
     572:	29 83       	std	Y+1, r18	; 0x01
     574:	23 2b       	or	r18, r19
     576:	09 f4       	brne	.+2      	; 0x57a <__FUSE_REGION_LENGTH__+0x17a>
     578:	61 c1       	rjmp	.+706    	; 0x83c <__FUSE_REGION_LENGTH__+0x43c>
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	a3 01       	movw	r20, r6
     57e:	92 01       	movw	r18, r4
     580:	0e 94 b6 18 	call	0x316c	; 0x316c <__muluhisi3>
     584:	69 87       	std	Y+9, r22	; 0x09
     586:	7a 87       	std	Y+10, r23	; 0x0a
     588:	8b 87       	std	Y+11, r24	; 0x0b
     58a:	9c 87       	std	Y+12, r25	; 0x0c
     58c:	a9 81       	ldd	r26, Y+1	; 0x01
     58e:	ba 81       	ldd	r27, Y+2	; 0x02
     590:	cd 01       	movw	r24, r26
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	8d 83       	std	Y+5, r24	; 0x05
     598:	9e 83       	std	Y+6, r25	; 0x06
     59a:	af 83       	std	Y+7, r26	; 0x07
     59c:	b8 87       	std	Y+8, r27	; 0x08
     59e:	c1 01       	movw	r24, r2
     5a0:	92 95       	swap	r25
     5a2:	82 95       	swap	r24
     5a4:	8f 70       	andi	r24, 0x0F	; 15
     5a6:	89 27       	eor	r24, r25
     5a8:	9f 70       	andi	r25, 0x0F	; 15
     5aa:	89 27       	eor	r24, r25
     5ac:	4d 81       	ldd	r20, Y+5	; 0x05
     5ae:	5e 81       	ldd	r21, Y+6	; 0x06
     5b0:	6f 81       	ldd	r22, Y+7	; 0x07
     5b2:	78 85       	ldd	r23, Y+8	; 0x08
     5b4:	48 0f       	add	r20, r24
     5b6:	59 1f       	adc	r21, r25
     5b8:	61 1d       	adc	r22, r1
     5ba:	71 1d       	adc	r23, r1
     5bc:	89 85       	ldd	r24, Y+9	; 0x09
     5be:	9a 85       	ldd	r25, Y+10	; 0x0a
     5c0:	ab 85       	ldd	r26, Y+11	; 0x0b
     5c2:	bc 85       	ldd	r27, Y+12	; 0x0c
     5c4:	84 0f       	add	r24, r20
     5c6:	95 1f       	adc	r25, r21
     5c8:	a6 1f       	adc	r26, r22
     5ca:	b7 1f       	adc	r27, r23
     5cc:	89 83       	std	Y+1, r24	; 0x01
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	ab 83       	std	Y+3, r26	; 0x03
     5d2:	bc 83       	std	Y+4, r27	; 0x04
     5d4:	88 16       	cp	r8, r24
     5d6:	99 06       	cpc	r9, r25
     5d8:	aa 06       	cpc	r10, r26
     5da:	bb 06       	cpc	r11, r27
     5dc:	08 f4       	brcc	.+2      	; 0x5e0 <__FUSE_REGION_LENGTH__+0x1e0>
     5de:	30 c1       	rjmp	.+608    	; 0x840 <__FUSE_REGION_LENGTH__+0x440>
     5e0:	c5 01       	movw	r24, r10
     5e2:	b4 01       	movw	r22, r8
     5e4:	29 81       	ldd	r18, Y+1	; 0x01
     5e6:	3a 81       	ldd	r19, Y+2	; 0x02
     5e8:	4b 81       	ldd	r20, Y+3	; 0x03
     5ea:	5c 81       	ldd	r21, Y+4	; 0x04
     5ec:	62 1b       	sub	r22, r18
     5ee:	73 0b       	sbc	r23, r19
     5f0:	84 0b       	sbc	r24, r20
     5f2:	95 0b       	sbc	r25, r21
     5f4:	21 2f       	mov	r18, r17
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 8e 18 	call	0x311c	; 0x311c <__udivmodsi4>
     600:	da 01       	movw	r26, r20
     602:	c9 01       	movw	r24, r18
     604:	21 15       	cp	r18, r1
     606:	31 05       	cpc	r19, r1
     608:	41 05       	cpc	r20, r1
     60a:	51 05       	cpc	r21, r1
     60c:	09 f4       	brne	.+2      	; 0x610 <__FUSE_REGION_LENGTH__+0x210>
     60e:	1a c1       	rjmp	.+564    	; 0x844 <__FUSE_REGION_LENGTH__+0x444>
     610:	26 3f       	cpi	r18, 0xF6	; 246
     612:	6f e0       	ldi	r22, 0x0F	; 15
     614:	36 07       	cpc	r19, r22
     616:	41 05       	cpc	r20, r1
     618:	51 05       	cpc	r21, r1
     61a:	10 f0       	brcs	.+4      	; 0x620 <__FUSE_REGION_LENGTH__+0x220>
     61c:	12 e0       	ldi	r17, 0x02	; 2
     61e:	01 c0       	rjmp	.+2      	; 0x622 <__FUSE_REGION_LENGTH__+0x222>
     620:	11 e0       	ldi	r17, 0x01	; 1
     622:	86 3f       	cpi	r24, 0xF6	; 246
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	a1 05       	cpc	r26, r1
     628:	b1 05       	cpc	r27, r1
     62a:	08 f0       	brcs	.+2      	; 0x62e <__FUSE_REGION_LENGTH__+0x22e>
     62c:	15 c1       	rjmp	.+554    	; 0x858 <__FUSE_REGION_LENGTH__+0x458>
     62e:	49 01       	movw	r8, r18
     630:	5a 01       	movw	r10, r20
     632:	f2 e0       	ldi	r31, 0x02	; 2
     634:	8f 0e       	add	r8, r31
     636:	91 1c       	adc	r9, r1
     638:	a1 1c       	adc	r10, r1
     63a:	b1 1c       	adc	r11, r1
     63c:	ad 85       	ldd	r26, Y+13	; 0x0d
     63e:	be 85       	ldd	r27, Y+14	; 0x0e
     640:	5a 96       	adiw	r26, 0x1a	; 26
     642:	8d 92       	st	X+, r8
     644:	9d 92       	st	X+, r9
     646:	ad 92       	st	X+, r10
     648:	bc 92       	st	X, r11
     64a:	5d 97       	sbiw	r26, 0x1d	; 29
     64c:	fd 01       	movw	r30, r26
     64e:	c2 a2       	std	Z+34, r12	; 0x22
     650:	d3 a2       	std	Z+35, r13	; 0x23
     652:	e4 a2       	std	Z+36, r14	; 0x24
     654:	f5 a2       	std	Z+37, r15	; 0x25
     656:	8d 81       	ldd	r24, Y+5	; 0x05
     658:	9e 81       	ldd	r25, Y+6	; 0x06
     65a:	af 81       	ldd	r26, Y+7	; 0x07
     65c:	b8 85       	ldd	r27, Y+8	; 0x08
     65e:	8c 0d       	add	r24, r12
     660:	9d 1d       	adc	r25, r13
     662:	ae 1d       	adc	r26, r14
     664:	bf 1d       	adc	r27, r15
     666:	86 a3       	std	Z+38, r24	; 0x26
     668:	97 a3       	std	Z+39, r25	; 0x27
     66a:	a0 a7       	std	Z+40, r26	; 0x28
     66c:	b1 a7       	std	Z+41, r27	; 0x29
     66e:	49 81       	ldd	r20, Y+1	; 0x01
     670:	5a 81       	ldd	r21, Y+2	; 0x02
     672:	6b 81       	ldd	r22, Y+3	; 0x03
     674:	7c 81       	ldd	r23, Y+4	; 0x04
     676:	4c 0d       	add	r20, r12
     678:	5d 1d       	adc	r21, r13
     67a:	6e 1d       	adc	r22, r14
     67c:	7f 1d       	adc	r23, r15
     67e:	46 a7       	std	Z+46, r20	; 0x2e
     680:	57 a7       	std	Z+47, r21	; 0x2f
     682:	60 ab       	std	Z+48, r22	; 0x30
     684:	71 ab       	std	Z+49, r23	; 0x31
     686:	13 30       	cpi	r17, 0x03	; 3
     688:	79 f5       	brne	.+94     	; 0x6e8 <__FUSE_REGION_LENGTH__+0x2e8>
     68a:	23 28       	or	r2, r3
     68c:	09 f0       	breq	.+2      	; 0x690 <__FUSE_REGION_LENGTH__+0x290>
     68e:	dc c0       	rjmp	.+440    	; 0x848 <__FUSE_REGION_LENGTH__+0x448>
     690:	ed 85       	ldd	r30, Y+13	; 0x0d
     692:	fe 85       	ldd	r31, Y+14	; 0x0e
     694:	ee 59       	subi	r30, 0x9E	; 158
     696:	ff 4f       	sbci	r31, 0xFF	; 255
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	a2 81       	ldd	r26, Z+2	; 0x02
     69e:	b3 81       	ldd	r27, Z+3	; 0x03
     6a0:	ed 85       	ldd	r30, Y+13	; 0x0d
     6a2:	fe 85       	ldd	r31, Y+14	; 0x0e
     6a4:	82 a7       	std	Z+42, r24	; 0x2a
     6a6:	93 a7       	std	Z+43, r25	; 0x2b
     6a8:	a4 a7       	std	Z+44, r26	; 0x2c
     6aa:	b5 a7       	std	Z+45, r27	; 0x2d
     6ac:	88 0c       	add	r8, r8
     6ae:	99 1c       	adc	r9, r9
     6b0:	aa 1c       	adc	r10, r10
     6b2:	bb 1c       	adc	r11, r11
     6b4:	88 0c       	add	r8, r8
     6b6:	99 1c       	adc	r9, r9
     6b8:	aa 1c       	adc	r10, r10
     6ba:	bb 1c       	adc	r11, r11
     6bc:	ff ef       	ldi	r31, 0xFF	; 255
     6be:	8f 0e       	add	r8, r31
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	9f 1e       	adc	r9, r31
     6c4:	a1 1c       	adc	r10, r1
     6c6:	b1 1c       	adc	r11, r1
     6c8:	07 2e       	mov	r0, r23
     6ca:	79 e0       	ldi	r23, 0x09	; 9
     6cc:	b6 94       	lsr	r11
     6ce:	a7 94       	ror	r10
     6d0:	97 94       	ror	r9
     6d2:	87 94       	ror	r8
     6d4:	7a 95       	dec	r23
     6d6:	d1 f7       	brne	.-12     	; 0x6cc <__FUSE_REGION_LENGTH__+0x2cc>
     6d8:	70 2d       	mov	r23, r0
     6da:	48 14       	cp	r4, r8
     6dc:	59 04       	cpc	r5, r9
     6de:	6a 04       	cpc	r6, r10
     6e0:	7b 04       	cpc	r7, r11
     6e2:	08 f4       	brcc	.+2      	; 0x6e6 <__FUSE_REGION_LENGTH__+0x2e6>
     6e4:	b3 c0       	rjmp	.+358    	; 0x84c <__FUSE_REGION_LENGTH__+0x44c>
     6e6:	06 c1       	rjmp	.+524    	; 0x8f4 <__FUSE_REGION_LENGTH__+0x4f4>
     6e8:	23 28       	or	r2, r3
     6ea:	09 f4       	brne	.+2      	; 0x6ee <__FUSE_REGION_LENGTH__+0x2ee>
     6ec:	b1 c0       	rjmp	.+354    	; 0x850 <__FUSE_REGION_LENGTH__+0x450>
     6ee:	29 85       	ldd	r18, Y+9	; 0x09
     6f0:	3a 85       	ldd	r19, Y+10	; 0x0a
     6f2:	4b 85       	ldd	r20, Y+11	; 0x0b
     6f4:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f6:	82 0f       	add	r24, r18
     6f8:	93 1f       	adc	r25, r19
     6fa:	a4 1f       	adc	r26, r20
     6fc:	b5 1f       	adc	r27, r21
     6fe:	ed 85       	ldd	r30, Y+13	; 0x0d
     700:	fe 85       	ldd	r31, Y+14	; 0x0e
     702:	82 a7       	std	Z+42, r24	; 0x2a
     704:	93 a7       	std	Z+43, r25	; 0x2b
     706:	a4 a7       	std	Z+44, r26	; 0x2c
     708:	b5 a7       	std	Z+45, r27	; 0x2d
     70a:	12 30       	cpi	r17, 0x02	; 2
     70c:	29 f4       	brne	.+10     	; 0x718 <__FUSE_REGION_LENGTH__+0x318>
     70e:	88 0c       	add	r8, r8
     710:	99 1c       	adc	r9, r9
     712:	aa 1c       	adc	r10, r10
     714:	bb 1c       	adc	r11, r11
     716:	d8 c0       	rjmp	.+432    	; 0x8c8 <__FUSE_REGION_LENGTH__+0x4c8>
     718:	a3 e0       	ldi	r26, 0x03	; 3
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	a5 01       	movw	r20, r10
     71e:	94 01       	movw	r18, r8
     720:	0e 94 b6 18 	call	0x316c	; 0x316c <__muluhisi3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	b6 95       	lsr	r27
     72a:	a7 95       	ror	r26
     72c:	97 95       	ror	r25
     72e:	87 95       	ror	r24
     730:	f1 e0       	ldi	r31, 0x01	; 1
     732:	8f 22       	and	r8, r31
     734:	99 24       	eor	r9, r9
     736:	aa 24       	eor	r10, r10
     738:	bb 24       	eor	r11, r11
     73a:	88 0e       	add	r8, r24
     73c:	99 1e       	adc	r9, r25
     73e:	aa 1e       	adc	r10, r26
     740:	bb 1e       	adc	r11, r27
     742:	c2 c0       	rjmp	.+388    	; 0x8c8 <__FUSE_REGION_LENGTH__+0x4c8>
     744:	ed 85       	ldd	r30, Y+13	; 0x0d
     746:	fe 85       	ldd	r31, Y+14	; 0x0e
     748:	ec 5c       	subi	r30, 0xCC	; 204
     74a:	fd 4f       	sbci	r31, 0xFD	; 253
     74c:	80 81       	ld	r24, Z
     74e:	91 81       	ldd	r25, Z+1	; 0x01
     750:	85 35       	cpi	r24, 0x55	; 85
     752:	9a 4a       	sbci	r25, 0xAA	; 170
     754:	a1 f5       	brne	.+104    	; 0x7be <__FUSE_REGION_LENGTH__+0x3be>
     756:	ed 85       	ldd	r30, Y+13	; 0x0d
     758:	fe 85       	ldd	r31, Y+14	; 0x0e
     75a:	86 a9       	ldd	r24, Z+54	; 0x36
     75c:	97 a9       	ldd	r25, Z+55	; 0x37
     75e:	a0 ad       	ldd	r26, Z+56	; 0x38
     760:	b1 ad       	ldd	r27, Z+57	; 0x39
     762:	82 35       	cpi	r24, 0x52	; 82
     764:	92 45       	sbci	r25, 0x52	; 82
     766:	a1 46       	sbci	r26, 0x61	; 97
     768:	b1 44       	sbci	r27, 0x41	; 65
     76a:	59 f5       	brne	.+86     	; 0x7c2 <__FUSE_REGION_LENGTH__+0x3c2>
     76c:	ed 85       	ldd	r30, Y+13	; 0x0d
     76e:	fe 85       	ldd	r31, Y+14	; 0x0e
     770:	e6 5e       	subi	r30, 0xE6	; 230
     772:	fd 4f       	sbci	r31, 0xFD	; 253
     774:	80 81       	ld	r24, Z
     776:	91 81       	ldd	r25, Z+1	; 0x01
     778:	a2 81       	ldd	r26, Z+2	; 0x02
     77a:	b3 81       	ldd	r27, Z+3	; 0x03
     77c:	82 37       	cpi	r24, 0x72	; 114
     77e:	92 47       	sbci	r25, 0x72	; 114
     780:	a1 44       	sbci	r26, 0x41	; 65
     782:	b1 46       	sbci	r27, 0x61	; 97
     784:	01 f5       	brne	.+64     	; 0x7c6 <__FUSE_REGION_LENGTH__+0x3c6>
     786:	ed 85       	ldd	r30, Y+13	; 0x0d
     788:	fe 85       	ldd	r31, Y+14	; 0x0e
     78a:	ee 5d       	subi	r30, 0xDE	; 222
     78c:	fd 4f       	sbci	r31, 0xFD	; 253
     78e:	80 81       	ld	r24, Z
     790:	91 81       	ldd	r25, Z+1	; 0x01
     792:	a2 81       	ldd	r26, Z+2	; 0x02
     794:	b3 81       	ldd	r27, Z+3	; 0x03
     796:	ed 85       	ldd	r30, Y+13	; 0x0d
     798:	fe 85       	ldd	r31, Y+14	; 0x0e
     79a:	82 87       	std	Z+10, r24	; 0x0a
     79c:	93 87       	std	Z+11, r25	; 0x0b
     79e:	a4 87       	std	Z+12, r26	; 0x0c
     7a0:	b5 87       	std	Z+13, r27	; 0x0d
     7a2:	e2 5e       	subi	r30, 0xE2	; 226
     7a4:	fd 4f       	sbci	r31, 0xFD	; 253
     7a6:	80 81       	ld	r24, Z
     7a8:	91 81       	ldd	r25, Z+1	; 0x01
     7aa:	a2 81       	ldd	r26, Z+2	; 0x02
     7ac:	b3 81       	ldd	r27, Z+3	; 0x03
     7ae:	ed 85       	ldd	r30, Y+13	; 0x0d
     7b0:	fe 85       	ldd	r31, Y+14	; 0x0e
     7b2:	86 87       	std	Z+14, r24	; 0x0e
     7b4:	97 87       	std	Z+15, r25	; 0x0f
     7b6:	a0 8b       	std	Z+16, r26	; 0x10
     7b8:	b1 8b       	std	Z+17, r27	; 0x11
     7ba:	13 e0       	ldi	r17, 0x03	; 3
     7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <__FUSE_REGION_LENGTH__+0x3c8>
     7be:	13 e0       	ldi	r17, 0x03	; 3
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <__FUSE_REGION_LENGTH__+0x3c8>
     7c2:	13 e0       	ldi	r17, 0x03	; 3
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <__FUSE_REGION_LENGTH__+0x3c8>
     7c6:	13 e0       	ldi	r17, 0x03	; 3
     7c8:	ad 85       	ldd	r26, Y+13	; 0x0d
     7ca:	be 85       	ldd	r27, Y+14	; 0x0e
     7cc:	1c 93       	st	X, r17
     7ce:	80 91 2f 01 	lds	r24, 0x012F
     7d2:	90 91 30 01 	lds	r25, 0x0130
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	90 93 30 01 	sts	0x0130, r25
     7dc:	80 93 2f 01 	sts	0x012F, r24
     7e0:	17 96       	adiw	r26, 0x07	; 7
     7e2:	9c 93       	st	X, r25
     7e4:	8e 93       	st	-X, r24
     7e6:	16 97       	sbiw	r26, 0x06	; 6
     7e8:	fd 01       	movw	r30, r26
     7ea:	12 aa       	std	Z+50, r1	; 0x32
     7ec:	13 aa       	std	Z+51, r1	; 0x33
     7ee:	14 aa       	std	Z+52, r1	; 0x34
     7f0:	15 aa       	std	Z+53, r1	; 0x35
     7f2:	14 82       	std	Z+4, r1	; 0x04
     7f4:	56 96       	adiw	r26, 0x16	; 22
     7f6:	1d 92       	st	X+, r1
     7f8:	1d 92       	st	X+, r1
     7fa:	1d 92       	st	X+, r1
     7fc:	1c 92       	st	X, r1
     7fe:	59 97       	sbiw	r26, 0x19	; 25
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	a2 c0       	rjmp	.+324    	; 0x948 <__stack+0x49>
     804:	8b e0       	ldi	r24, 0x0B	; 11
     806:	a0 c0       	rjmp	.+320    	; 0x948 <__stack+0x49>
     808:	8c e0       	ldi	r24, 0x0C	; 12
     80a:	9e c0       	rjmp	.+316    	; 0x948 <__stack+0x49>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	9c c0       	rjmp	.+312    	; 0x948 <__stack+0x49>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	9a c0       	rjmp	.+308    	; 0x948 <__stack+0x49>
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	98 c0       	rjmp	.+304    	; 0x948 <__stack+0x49>
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	96 c0       	rjmp	.+300    	; 0x948 <__stack+0x49>
     81c:	8d e0       	ldi	r24, 0x0D	; 13
     81e:	94 c0       	rjmp	.+296    	; 0x948 <__stack+0x49>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	92 c0       	rjmp	.+292    	; 0x948 <__stack+0x49>
     824:	8d e0       	ldi	r24, 0x0D	; 13
     826:	90 c0       	rjmp	.+288    	; 0x948 <__stack+0x49>
     828:	8d e0       	ldi	r24, 0x0D	; 13
     82a:	8e c0       	rjmp	.+284    	; 0x948 <__stack+0x49>
     82c:	8d e0       	ldi	r24, 0x0D	; 13
     82e:	8c c0       	rjmp	.+280    	; 0x948 <__stack+0x49>
     830:	8d e0       	ldi	r24, 0x0D	; 13
     832:	8a c0       	rjmp	.+276    	; 0x948 <__stack+0x49>
     834:	8d e0       	ldi	r24, 0x0D	; 13
     836:	88 c0       	rjmp	.+272    	; 0x948 <__stack+0x49>
     838:	8d e0       	ldi	r24, 0x0D	; 13
     83a:	86 c0       	rjmp	.+268    	; 0x948 <__stack+0x49>
     83c:	8d e0       	ldi	r24, 0x0D	; 13
     83e:	84 c0       	rjmp	.+264    	; 0x948 <__stack+0x49>
     840:	8d e0       	ldi	r24, 0x0D	; 13
     842:	82 c0       	rjmp	.+260    	; 0x948 <__stack+0x49>
     844:	8d e0       	ldi	r24, 0x0D	; 13
     846:	80 c0       	rjmp	.+256    	; 0x948 <__stack+0x49>
     848:	8d e0       	ldi	r24, 0x0D	; 13
     84a:	7e c0       	rjmp	.+252    	; 0x948 <__stack+0x49>
     84c:	8d e0       	ldi	r24, 0x0D	; 13
     84e:	7c c0       	rjmp	.+248    	; 0x948 <__stack+0x49>
     850:	8d e0       	ldi	r24, 0x0D	; 13
     852:	7a c0       	rjmp	.+244    	; 0x948 <__stack+0x49>
     854:	8d e0       	ldi	r24, 0x0D	; 13
     856:	78 c0       	rjmp	.+240    	; 0x948 <__stack+0x49>
     858:	49 01       	movw	r8, r18
     85a:	5a 01       	movw	r10, r20
     85c:	b2 e0       	ldi	r27, 0x02	; 2
     85e:	8b 0e       	add	r8, r27
     860:	91 1c       	adc	r9, r1
     862:	a1 1c       	adc	r10, r1
     864:	b1 1c       	adc	r11, r1
     866:	ed 85       	ldd	r30, Y+13	; 0x0d
     868:	fe 85       	ldd	r31, Y+14	; 0x0e
     86a:	82 8e       	std	Z+26, r8	; 0x1a
     86c:	93 8e       	std	Z+27, r9	; 0x1b
     86e:	a4 8e       	std	Z+28, r10	; 0x1c
     870:	b5 8e       	std	Z+29, r11	; 0x1d
     872:	c2 a2       	std	Z+34, r12	; 0x22
     874:	d3 a2       	std	Z+35, r13	; 0x23
     876:	e4 a2       	std	Z+36, r14	; 0x24
     878:	f5 a2       	std	Z+37, r15	; 0x25
     87a:	8d 81       	ldd	r24, Y+5	; 0x05
     87c:	9e 81       	ldd	r25, Y+6	; 0x06
     87e:	af 81       	ldd	r26, Y+7	; 0x07
     880:	b8 85       	ldd	r27, Y+8	; 0x08
     882:	8c 0d       	add	r24, r12
     884:	9d 1d       	adc	r25, r13
     886:	ae 1d       	adc	r26, r14
     888:	bf 1d       	adc	r27, r15
     88a:	86 a3       	std	Z+38, r24	; 0x26
     88c:	97 a3       	std	Z+39, r25	; 0x27
     88e:	a0 a7       	std	Z+40, r26	; 0x28
     890:	b1 a7       	std	Z+41, r27	; 0x29
     892:	49 81       	ldd	r20, Y+1	; 0x01
     894:	5a 81       	ldd	r21, Y+2	; 0x02
     896:	6b 81       	ldd	r22, Y+3	; 0x03
     898:	7c 81       	ldd	r23, Y+4	; 0x04
     89a:	4c 0d       	add	r20, r12
     89c:	5d 1d       	adc	r21, r13
     89e:	6e 1d       	adc	r22, r14
     8a0:	7f 1d       	adc	r23, r15
     8a2:	46 a7       	std	Z+46, r20	; 0x2e
     8a4:	57 a7       	std	Z+47, r21	; 0x2f
     8a6:	60 ab       	std	Z+48, r22	; 0x30
     8a8:	71 ab       	std	Z+49, r23	; 0x31
     8aa:	ef ce       	rjmp	.-546    	; 0x68a <__FUSE_REGION_LENGTH__+0x28a>
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	9f ef       	ldi	r25, 0xFF	; 255
     8b0:	dc 01       	movw	r26, r24
     8b2:	ed 85       	ldd	r30, Y+13	; 0x0d
     8b4:	fe 85       	ldd	r31, Y+14	; 0x0e
     8b6:	86 87       	std	Z+14, r24	; 0x0e
     8b8:	97 87       	std	Z+15, r25	; 0x0f
     8ba:	a0 8b       	std	Z+16, r26	; 0x10
     8bc:	b1 8b       	std	Z+17, r27	; 0x11
     8be:	12 86       	std	Z+10, r1	; 0x0a
     8c0:	13 86       	std	Z+11, r1	; 0x0b
     8c2:	14 86       	std	Z+12, r1	; 0x0c
     8c4:	15 86       	std	Z+13, r1	; 0x0d
     8c6:	80 cf       	rjmp	.-256    	; 0x7c8 <__FUSE_REGION_LENGTH__+0x3c8>
     8c8:	bf ef       	ldi	r27, 0xFF	; 255
     8ca:	8b 0e       	add	r8, r27
     8cc:	b1 e0       	ldi	r27, 0x01	; 1
     8ce:	9b 1e       	adc	r9, r27
     8d0:	a1 1c       	adc	r10, r1
     8d2:	b1 1c       	adc	r11, r1
     8d4:	07 2e       	mov	r0, r23
     8d6:	79 e0       	ldi	r23, 0x09	; 9
     8d8:	b6 94       	lsr	r11
     8da:	a7 94       	ror	r10
     8dc:	97 94       	ror	r9
     8de:	87 94       	ror	r8
     8e0:	7a 95       	dec	r23
     8e2:	d1 f7       	brne	.-12     	; 0x8d8 <__FUSE_REGION_LENGTH__+0x4d8>
     8e4:	70 2d       	mov	r23, r0
     8e6:	48 14       	cp	r4, r8
     8e8:	59 04       	cpc	r5, r9
     8ea:	6a 04       	cpc	r6, r10
     8ec:	7b 04       	cpc	r7, r11
     8ee:	08 f4       	brcc	.+2      	; 0x8f2 <__FUSE_REGION_LENGTH__+0x4f2>
     8f0:	b1 cf       	rjmp	.-158    	; 0x854 <__FUSE_REGION_LENGTH__+0x454>
     8f2:	dc cf       	rjmp	.-72     	; 0x8ac <__FUSE_REGION_LENGTH__+0x4ac>
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	9f ef       	ldi	r25, 0xFF	; 255
     8f8:	dc 01       	movw	r26, r24
     8fa:	ed 85       	ldd	r30, Y+13	; 0x0d
     8fc:	fe 85       	ldd	r31, Y+14	; 0x0e
     8fe:	86 87       	std	Z+14, r24	; 0x0e
     900:	97 87       	std	Z+15, r25	; 0x0f
     902:	a0 8b       	std	Z+16, r26	; 0x10
     904:	b1 8b       	std	Z+17, r27	; 0x11
     906:	df 01       	movw	r26, r30
     908:	12 86       	std	Z+10, r1	; 0x0a
     90a:	13 86       	std	Z+11, r1	; 0x0b
     90c:	14 86       	std	Z+12, r1	; 0x0c
     90e:	15 86       	std	Z+13, r1	; 0x0d
     910:	15 82       	std	Z+5, r1	; 0x05
     912:	ea 59       	subi	r30, 0x9A	; 154
     914:	ff 4f       	sbci	r31, 0xFF	; 255
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	a7 01       	movw	r20, r14
     91c:	96 01       	movw	r18, r12
     91e:	28 0f       	add	r18, r24
     920:	39 1f       	adc	r19, r25
     922:	41 1d       	adc	r20, r1
     924:	51 1d       	adc	r21, r1
     926:	fd 01       	movw	r30, r26
     928:	22 8b       	std	Z+18, r18	; 0x12
     92a:	33 8b       	std	Z+19, r19	; 0x13
     92c:	44 8b       	std	Z+20, r20	; 0x14
     92e:	55 8b       	std	Z+21, r21	; 0x15
     930:	01 e0       	ldi	r16, 0x01	; 1
     932:	bd 01       	movw	r22, r26
     934:	6a 5c       	subi	r22, 0xCA	; 202
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	81 81       	ldd	r24, Z+1	; 0x01
     93a:	0e 94 3e 14 	call	0x287c	; 0x287c <disk_read>
     93e:	88 23       	and	r24, r24
     940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
     942:	00 cf       	rjmp	.-512    	; 0x744 <__FUSE_REGION_LENGTH__+0x344>
     944:	13 e0       	ldi	r17, 0x03	; 3
     946:	40 cf       	rjmp	.-384    	; 0x7c8 <__FUSE_REGION_LENGTH__+0x3c8>
     948:	2e 96       	adiw	r28, 0x0e	; 14
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	9f 90       	pop	r9
     96a:	8f 90       	pop	r8
     96c:	7f 90       	pop	r7
     96e:	6f 90       	pop	r6
     970:	5f 90       	pop	r5
     972:	4f 90       	pop	r4
     974:	3f 90       	pop	r3
     976:	2f 90       	pop	r2
     978:	08 95       	ret

0000097a <clust2sect>:
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	fc 01       	movw	r30, r24
     984:	9a 01       	movw	r18, r20
     986:	ab 01       	movw	r20, r22
     988:	22 50       	subi	r18, 0x02	; 2
     98a:	31 09       	sbc	r19, r1
     98c:	41 09       	sbc	r20, r1
     98e:	51 09       	sbc	r21, r1
     990:	c2 8c       	ldd	r12, Z+26	; 0x1a
     992:	d3 8c       	ldd	r13, Z+27	; 0x1b
     994:	e4 8c       	ldd	r14, Z+28	; 0x1c
     996:	f5 8c       	ldd	r15, Z+29	; 0x1d
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	c8 1a       	sub	r12, r24
     99c:	d1 08       	sbc	r13, r1
     99e:	e1 08       	sbc	r14, r1
     9a0:	f1 08       	sbc	r15, r1
     9a2:	2c 15       	cp	r18, r12
     9a4:	3d 05       	cpc	r19, r13
     9a6:	4e 05       	cpc	r20, r14
     9a8:	5f 05       	cpc	r21, r15
     9aa:	68 f4       	brcc	.+26     	; 0x9c6 <clust2sect+0x4c>
     9ac:	a2 81       	ldd	r26, Z+2	; 0x02
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	0e 94 b6 18 	call	0x316c	; 0x316c <__muluhisi3>
     9b4:	c6 a4       	ldd	r12, Z+46	; 0x2e
     9b6:	d7 a4       	ldd	r13, Z+47	; 0x2f
     9b8:	e0 a8       	ldd	r14, Z+48	; 0x30
     9ba:	f1 a8       	ldd	r15, Z+49	; 0x31
     9bc:	6c 0d       	add	r22, r12
     9be:	7d 1d       	adc	r23, r13
     9c0:	8e 1d       	adc	r24, r14
     9c2:	9f 1d       	adc	r25, r15
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <clust2sect+0x52>
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	cb 01       	movw	r24, r22
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	08 95       	ret

000009d6 <get_fat>:
     9d6:	af 92       	push	r10
     9d8:	bf 92       	push	r11
     9da:	cf 92       	push	r12
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	ec 01       	movw	r28, r24
     9ea:	6a 01       	movw	r12, r20
     9ec:	7b 01       	movw	r14, r22
     9ee:	42 30       	cpi	r20, 0x02	; 2
     9f0:	51 05       	cpc	r21, r1
     9f2:	61 05       	cpc	r22, r1
     9f4:	71 05       	cpc	r23, r1
     9f6:	08 f4       	brcc	.+2      	; 0x9fa <get_fat+0x24>
     9f8:	aa c0       	rjmp	.+340    	; 0xb4e <get_fat+0x178>
     9fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9fe:	ac 8d       	ldd	r26, Y+28	; 0x1c
     a00:	bd 8d       	ldd	r27, Y+29	; 0x1d
     a02:	48 17       	cp	r20, r24
     a04:	59 07       	cpc	r21, r25
     a06:	6a 07       	cpc	r22, r26
     a08:	7b 07       	cpc	r23, r27
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <get_fat+0x38>
     a0c:	a5 c0       	rjmp	.+330    	; 0xb58 <get_fat+0x182>
     a0e:	88 81       	ld	r24, Y
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	09 f4       	brne	.+2      	; 0xa16 <get_fat+0x40>
     a14:	4c c0       	rjmp	.+152    	; 0xaae <get_fat+0xd8>
     a16:	83 30       	cpi	r24, 0x03	; 3
     a18:	09 f4       	brne	.+2      	; 0xa1c <get_fat+0x46>
     a1a:	6b c0       	rjmp	.+214    	; 0xaf2 <get_fat+0x11c>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	09 f0       	breq	.+2      	; 0xa22 <get_fat+0x4c>
     a20:	a0 c0       	rjmp	.+320    	; 0xb62 <get_fat+0x18c>
     a22:	5a 01       	movw	r10, r20
     a24:	b6 94       	lsr	r11
     a26:	a7 94       	ror	r10
     a28:	a4 0e       	add	r10, r20
     a2a:	b5 1e       	adc	r11, r21
     a2c:	c5 01       	movw	r24, r10
     a2e:	89 2f       	mov	r24, r25
     a30:	99 27       	eor	r25, r25
     a32:	86 95       	lsr	r24
     a34:	4e a1       	ldd	r20, Y+38	; 0x26
     a36:	5f a1       	ldd	r21, Y+39	; 0x27
     a38:	68 a5       	ldd	r22, Y+40	; 0x28
     a3a:	79 a5       	ldd	r23, Y+41	; 0x29
     a3c:	48 0f       	add	r20, r24
     a3e:	59 1f       	adc	r21, r25
     a40:	61 1d       	adc	r22, r1
     a42:	71 1d       	adc	r23, r1
     a44:	ce 01       	movw	r24, r28
     a46:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     a4a:	81 11       	cpse	r24, r1
     a4c:	8e c0       	rjmp	.+284    	; 0xb6a <get_fat+0x194>
     a4e:	f5 01       	movw	r30, r10
     a50:	f1 70       	andi	r31, 0x01	; 1
     a52:	ec 0f       	add	r30, r28
     a54:	fd 1f       	adc	r31, r29
     a56:	16 a9       	ldd	r17, Z+54	; 0x36
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	a8 1a       	sub	r10, r24
     a5c:	b8 0a       	sbc	r11, r24
     a5e:	c5 01       	movw	r24, r10
     a60:	89 2f       	mov	r24, r25
     a62:	99 27       	eor	r25, r25
     a64:	86 95       	lsr	r24
     a66:	4e a1       	ldd	r20, Y+38	; 0x26
     a68:	5f a1       	ldd	r21, Y+39	; 0x27
     a6a:	68 a5       	ldd	r22, Y+40	; 0x28
     a6c:	79 a5       	ldd	r23, Y+41	; 0x29
     a6e:	48 0f       	add	r20, r24
     a70:	59 1f       	adc	r21, r25
     a72:	61 1d       	adc	r22, r1
     a74:	71 1d       	adc	r23, r1
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     a7c:	81 11       	cpse	r24, r1
     a7e:	79 c0       	rjmp	.+242    	; 0xb72 <get_fat+0x19c>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	b8 22       	and	r11, r24
     a84:	ca 0d       	add	r28, r10
     a86:	db 1d       	adc	r29, r11
     a88:	8e a9       	ldd	r24, Y+54	; 0x36
     a8a:	61 2f       	mov	r22, r17
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	78 2b       	or	r23, r24
     a90:	c0 fe       	sbrs	r12, 0
     a92:	09 c0       	rjmp	.+18     	; 0xaa6 <get_fat+0xd0>
     a94:	72 95       	swap	r23
     a96:	62 95       	swap	r22
     a98:	6f 70       	andi	r22, 0x0F	; 15
     a9a:	67 27       	eor	r22, r23
     a9c:	7f 70       	andi	r23, 0x0F	; 15
     a9e:	67 27       	eor	r22, r23
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	71 c0       	rjmp	.+226    	; 0xb88 <get_fat+0x1b2>
     aa6:	7f 70       	andi	r23, 0x0F	; 15
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	6d c0       	rjmp	.+218    	; 0xb88 <get_fat+0x1b2>
     aae:	45 2f       	mov	r20, r21
     ab0:	56 2f       	mov	r21, r22
     ab2:	67 2f       	mov	r22, r23
     ab4:	77 27       	eor	r23, r23
     ab6:	8e a1       	ldd	r24, Y+38	; 0x26
     ab8:	9f a1       	ldd	r25, Y+39	; 0x27
     aba:	a8 a5       	ldd	r26, Y+40	; 0x28
     abc:	b9 a5       	ldd	r27, Y+41	; 0x29
     abe:	48 0f       	add	r20, r24
     ac0:	59 1f       	adc	r21, r25
     ac2:	6a 1f       	adc	r22, r26
     ac4:	7b 1f       	adc	r23, r27
     ac6:	ce 01       	movw	r24, r28
     ac8:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     acc:	81 11       	cpse	r24, r1
     ace:	55 c0       	rjmp	.+170    	; 0xb7a <get_fat+0x1a4>
     ad0:	cc 0c       	add	r12, r12
     ad2:	dd 1c       	adc	r13, r13
     ad4:	ee 1c       	adc	r14, r14
     ad6:	ff 1c       	adc	r15, r15
     ad8:	e8 94       	clt
     ada:	c0 f8       	bld	r12, 0
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	d8 22       	and	r13, r24
     ae0:	ee 24       	eor	r14, r14
     ae2:	ff 24       	eor	r15, r15
     ae4:	cc 0d       	add	r28, r12
     ae6:	dd 1d       	adc	r29, r13
     ae8:	6e a9       	ldd	r22, Y+54	; 0x36
     aea:	7f a9       	ldd	r23, Y+55	; 0x37
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	4b c0       	rjmp	.+150    	; 0xb88 <get_fat+0x1b2>
     af2:	8e a1       	ldd	r24, Y+38	; 0x26
     af4:	9f a1       	ldd	r25, Y+39	; 0x27
     af6:	a8 a5       	ldd	r26, Y+40	; 0x28
     af8:	b9 a5       	ldd	r27, Y+41	; 0x29
     afa:	68 94       	set
     afc:	16 f8       	bld	r1, 6
     afe:	76 95       	lsr	r23
     b00:	67 95       	ror	r22
     b02:	57 95       	ror	r21
     b04:	47 95       	ror	r20
     b06:	16 94       	lsr	r1
     b08:	d1 f7       	brne	.-12     	; 0xafe <get_fat+0x128>
     b0a:	48 0f       	add	r20, r24
     b0c:	59 1f       	adc	r21, r25
     b0e:	6a 1f       	adc	r22, r26
     b10:	7b 1f       	adc	r23, r27
     b12:	ce 01       	movw	r24, r28
     b14:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     b18:	81 11       	cpse	r24, r1
     b1a:	33 c0       	rjmp	.+102    	; 0xb82 <get_fat+0x1ac>
     b1c:	cc 0c       	add	r12, r12
     b1e:	dd 1c       	adc	r13, r13
     b20:	ee 1c       	adc	r14, r14
     b22:	ff 1c       	adc	r15, r15
     b24:	cc 0c       	add	r12, r12
     b26:	dd 1c       	adc	r13, r13
     b28:	ee 1c       	adc	r14, r14
     b2a:	ff 1c       	adc	r15, r15
     b2c:	8c ef       	ldi	r24, 0xFC	; 252
     b2e:	c8 22       	and	r12, r24
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	d8 22       	and	r13, r24
     b34:	ee 24       	eor	r14, r14
     b36:	ff 24       	eor	r15, r15
     b38:	fe 01       	movw	r30, r28
     b3a:	ec 0d       	add	r30, r12
     b3c:	fd 1d       	adc	r31, r13
     b3e:	86 a9       	ldd	r24, Z+54	; 0x36
     b40:	97 a9       	ldd	r25, Z+55	; 0x37
     b42:	a0 ad       	ldd	r26, Z+56	; 0x38
     b44:	b1 ad       	ldd	r27, Z+57	; 0x39
     b46:	bc 01       	movw	r22, r24
     b48:	cd 01       	movw	r24, r26
     b4a:	9f 70       	andi	r25, 0x0F	; 15
     b4c:	1d c0       	rjmp	.+58     	; 0xb88 <get_fat+0x1b2>
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	18 c0       	rjmp	.+48     	; 0xb88 <get_fat+0x1b2>
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	13 c0       	rjmp	.+38     	; 0xb88 <get_fat+0x1b2>
     b62:	6f ef       	ldi	r22, 0xFF	; 255
     b64:	7f ef       	ldi	r23, 0xFF	; 255
     b66:	cb 01       	movw	r24, r22
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <get_fat+0x1b2>
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	cb 01       	movw	r24, r22
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <get_fat+0x1b2>
     b72:	6f ef       	ldi	r22, 0xFF	; 255
     b74:	7f ef       	ldi	r23, 0xFF	; 255
     b76:	cb 01       	movw	r24, r22
     b78:	07 c0       	rjmp	.+14     	; 0xb88 <get_fat+0x1b2>
     b7a:	6f ef       	ldi	r22, 0xFF	; 255
     b7c:	7f ef       	ldi	r23, 0xFF	; 255
     b7e:	cb 01       	movw	r24, r22
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <get_fat+0x1b2>
     b82:	6f ef       	ldi	r22, 0xFF	; 255
     b84:	7f ef       	ldi	r23, 0xFF	; 255
     b86:	cb 01       	movw	r24, r22
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	ff 90       	pop	r15
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	08 95       	ret

00000b9c <dir_sdi>:
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
     baa:	8b 01       	movw	r16, r22
     bac:	7d 83       	std	Y+5, r23	; 0x05
     bae:	6c 83       	std	Y+4, r22	; 0x04
     bb0:	4e 81       	ldd	r20, Y+6	; 0x06
     bb2:	5f 81       	ldd	r21, Y+7	; 0x07
     bb4:	68 85       	ldd	r22, Y+8	; 0x08
     bb6:	79 85       	ldd	r23, Y+9	; 0x09
     bb8:	41 30       	cpi	r20, 0x01	; 1
     bba:	51 05       	cpc	r21, r1
     bbc:	61 05       	cpc	r22, r1
     bbe:	71 05       	cpc	r23, r1
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <dir_sdi+0x28>
     bc2:	93 c0       	rjmp	.+294    	; 0xcea <dir_sdi+0x14e>
     bc4:	e8 81       	ld	r30, Y
     bc6:	f9 81       	ldd	r31, Y+1	; 0x01
     bc8:	82 8d       	ldd	r24, Z+26	; 0x1a
     bca:	93 8d       	ldd	r25, Z+27	; 0x1b
     bcc:	a4 8d       	ldd	r26, Z+28	; 0x1c
     bce:	b5 8d       	ldd	r27, Z+29	; 0x1d
     bd0:	48 17       	cp	r20, r24
     bd2:	59 07       	cpc	r21, r25
     bd4:	6a 07       	cpc	r22, r26
     bd6:	7b 07       	cpc	r23, r27
     bd8:	08 f0       	brcs	.+2      	; 0xbdc <dir_sdi+0x40>
     bda:	89 c0       	rjmp	.+274    	; 0xcee <dir_sdi+0x152>
     bdc:	41 15       	cp	r20, r1
     bde:	51 05       	cpc	r21, r1
     be0:	61 05       	cpc	r22, r1
     be2:	71 05       	cpc	r23, r1
     be4:	51 f5       	brne	.+84     	; 0xc3a <dir_sdi+0x9e>
     be6:	80 81       	ld	r24, Z
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	49 f4       	brne	.+18     	; 0xbfe <dir_sdi+0x62>
     bec:	42 a5       	ldd	r20, Z+42	; 0x2a
     bee:	53 a5       	ldd	r21, Z+43	; 0x2b
     bf0:	64 a5       	ldd	r22, Z+44	; 0x2c
     bf2:	75 a5       	ldd	r23, Z+45	; 0x2d
     bf4:	41 15       	cp	r20, r1
     bf6:	51 05       	cpc	r21, r1
     bf8:	61 05       	cpc	r22, r1
     bfa:	71 05       	cpc	r23, r1
     bfc:	f1 f4       	brne	.+60     	; 0xc3a <dir_sdi+0x9e>
     bfe:	1a 86       	std	Y+10, r1	; 0x0a
     c00:	1b 86       	std	Y+11, r1	; 0x0b
     c02:	1c 86       	std	Y+12, r1	; 0x0c
     c04:	1d 86       	std	Y+13, r1	; 0x0d
     c06:	80 85       	ldd	r24, Z+8	; 0x08
     c08:	91 85       	ldd	r25, Z+9	; 0x09
     c0a:	08 17       	cp	r16, r24
     c0c:	19 07       	cpc	r17, r25
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <dir_sdi+0x76>
     c10:	70 c0       	rjmp	.+224    	; 0xcf2 <dir_sdi+0x156>
     c12:	82 a5       	ldd	r24, Z+42	; 0x2a
     c14:	93 a5       	ldd	r25, Z+43	; 0x2b
     c16:	a4 a5       	ldd	r26, Z+44	; 0x2c
     c18:	b5 a5       	ldd	r27, Z+45	; 0x2d
     c1a:	98 01       	movw	r18, r16
     c1c:	32 95       	swap	r19
     c1e:	22 95       	swap	r18
     c20:	2f 70       	andi	r18, 0x0F	; 15
     c22:	23 27       	eor	r18, r19
     c24:	3f 70       	andi	r19, 0x0F	; 15
     c26:	23 27       	eor	r18, r19
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	a1 1d       	adc	r26, r1
     c2e:	b1 1d       	adc	r27, r1
     c30:	8e 87       	std	Y+14, r24	; 0x0e
     c32:	9f 87       	std	Y+15, r25	; 0x0f
     c34:	a8 8b       	std	Y+16, r26	; 0x10
     c36:	b9 8b       	std	Y+17, r27	; 0x11
     c38:	44 c0       	rjmp	.+136    	; 0xcc2 <dir_sdi+0x126>
     c3a:	e2 80       	ldd	r14, Z+2	; 0x02
     c3c:	80 e1       	ldi	r24, 0x10	; 16
     c3e:	e8 9e       	mul	r14, r24
     c40:	70 01       	movw	r14, r0
     c42:	11 24       	eor	r1, r1
     c44:	0e 15       	cp	r16, r14
     c46:	1f 05       	cpc	r17, r15
     c48:	18 f1       	brcs	.+70     	; 0xc90 <dir_sdi+0xf4>
     c4a:	88 81       	ld	r24, Y
     c4c:	99 81       	ldd	r25, Y+1	; 0x01
     c4e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <get_fat>
     c52:	ab 01       	movw	r20, r22
     c54:	bc 01       	movw	r22, r24
     c56:	4f 3f       	cpi	r20, 0xFF	; 255
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	58 07       	cpc	r21, r24
     c5c:	68 07       	cpc	r22, r24
     c5e:	78 07       	cpc	r23, r24
     c60:	09 f4       	brne	.+2      	; 0xc64 <dir_sdi+0xc8>
     c62:	49 c0       	rjmp	.+146    	; 0xcf6 <dir_sdi+0x15a>
     c64:	42 30       	cpi	r20, 0x02	; 2
     c66:	51 05       	cpc	r21, r1
     c68:	61 05       	cpc	r22, r1
     c6a:	71 05       	cpc	r23, r1
     c6c:	08 f4       	brcc	.+2      	; 0xc70 <dir_sdi+0xd4>
     c6e:	45 c0       	rjmp	.+138    	; 0xcfa <dir_sdi+0x15e>
     c70:	e8 81       	ld	r30, Y
     c72:	f9 81       	ldd	r31, Y+1	; 0x01
     c74:	82 8d       	ldd	r24, Z+26	; 0x1a
     c76:	93 8d       	ldd	r25, Z+27	; 0x1b
     c78:	a4 8d       	ldd	r26, Z+28	; 0x1c
     c7a:	b5 8d       	ldd	r27, Z+29	; 0x1d
     c7c:	48 17       	cp	r20, r24
     c7e:	59 07       	cpc	r21, r25
     c80:	6a 07       	cpc	r22, r26
     c82:	7b 07       	cpc	r23, r27
     c84:	e0 f5       	brcc	.+120    	; 0xcfe <dir_sdi+0x162>
     c86:	0e 19       	sub	r16, r14
     c88:	1f 09       	sbc	r17, r15
     c8a:	0e 15       	cp	r16, r14
     c8c:	1f 05       	cpc	r17, r15
     c8e:	e8 f6       	brcc	.-70     	; 0xc4a <dir_sdi+0xae>
     c90:	4a 87       	std	Y+10, r20	; 0x0a
     c92:	5b 87       	std	Y+11, r21	; 0x0b
     c94:	6c 87       	std	Y+12, r22	; 0x0c
     c96:	7d 87       	std	Y+13, r23	; 0x0d
     c98:	88 81       	ld	r24, Y
     c9a:	99 81       	ldd	r25, Y+1	; 0x01
     c9c:	0e 94 bd 04 	call	0x97a	; 0x97a <clust2sect>
     ca0:	98 01       	movw	r18, r16
     ca2:	32 95       	swap	r19
     ca4:	22 95       	swap	r18
     ca6:	2f 70       	andi	r18, 0x0F	; 15
     ca8:	23 27       	eor	r18, r19
     caa:	3f 70       	andi	r19, 0x0F	; 15
     cac:	23 27       	eor	r18, r19
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	a1 1d       	adc	r26, r1
     cb8:	b1 1d       	adc	r27, r1
     cba:	8e 87       	std	Y+14, r24	; 0x0e
     cbc:	9f 87       	std	Y+15, r25	; 0x0f
     cbe:	a8 8b       	std	Y+16, r26	; 0x10
     cc0:	b9 8b       	std	Y+17, r27	; 0x11
     cc2:	0f 70       	andi	r16, 0x0F	; 15
     cc4:	11 27       	eor	r17, r17
     cc6:	00 0f       	add	r16, r16
     cc8:	11 1f       	adc	r17, r17
     cca:	02 95       	swap	r16
     ccc:	12 95       	swap	r17
     cce:	10 7f       	andi	r17, 0xF0	; 240
     cd0:	10 27       	eor	r17, r16
     cd2:	00 7f       	andi	r16, 0xF0	; 240
     cd4:	10 27       	eor	r17, r16
     cd6:	0a 5c       	subi	r16, 0xCA	; 202
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	88 81       	ld	r24, Y
     cdc:	99 81       	ldd	r25, Y+1	; 0x01
     cde:	08 0f       	add	r16, r24
     ce0:	19 1f       	adc	r17, r25
     ce2:	1b 8b       	std	Y+19, r17	; 0x13
     ce4:	0a 8b       	std	Y+18, r16	; 0x12
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0b c0       	rjmp	.+22     	; 0xd00 <dir_sdi+0x164>
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	09 c0       	rjmp	.+18     	; 0xd00 <dir_sdi+0x164>
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	07 c0       	rjmp	.+14     	; 0xd00 <dir_sdi+0x164>
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <dir_sdi+0x164>
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <dir_sdi+0x164>
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <dir_sdi+0x164>
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	08 95       	ret

00000d0e <put_fat>:
     d0e:	4f 92       	push	r4
     d10:	5f 92       	push	r5
     d12:	6f 92       	push	r6
     d14:	7f 92       	push	r7
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	ec 01       	movw	r28, r24
     d2c:	6a 01       	movw	r12, r20
     d2e:	7b 01       	movw	r14, r22
     d30:	28 01       	movw	r4, r16
     d32:	39 01       	movw	r6, r18
     d34:	42 30       	cpi	r20, 0x02	; 2
     d36:	51 05       	cpc	r21, r1
     d38:	61 05       	cpc	r22, r1
     d3a:	71 05       	cpc	r23, r1
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <put_fat+0x32>
     d3e:	d9 c0       	rjmp	.+434    	; 0xef2 <put_fat+0x1e4>
     d40:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d42:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d44:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d46:	bd 8d       	ldd	r27, Y+29	; 0x1d
     d48:	48 17       	cp	r20, r24
     d4a:	59 07       	cpc	r21, r25
     d4c:	6a 07       	cpc	r22, r26
     d4e:	7b 07       	cpc	r23, r27
     d50:	08 f0       	brcs	.+2      	; 0xd54 <put_fat+0x46>
     d52:	d1 c0       	rjmp	.+418    	; 0xef6 <put_fat+0x1e8>
     d54:	88 81       	ld	r24, Y
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	09 f4       	brne	.+2      	; 0xd5c <put_fat+0x4e>
     d5a:	63 c0       	rjmp	.+198    	; 0xe22 <put_fat+0x114>
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	09 f4       	brne	.+2      	; 0xd62 <put_fat+0x54>
     d60:	85 c0       	rjmp	.+266    	; 0xe6c <put_fat+0x15e>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f0       	breq	.+2      	; 0xd68 <put_fat+0x5a>
     d66:	bd c0       	rjmp	.+378    	; 0xee2 <put_fat+0x1d4>
     d68:	5a 01       	movw	r10, r20
     d6a:	b6 94       	lsr	r11
     d6c:	a7 94       	ror	r10
     d6e:	a4 0e       	add	r10, r20
     d70:	b5 1e       	adc	r11, r21
     d72:	c5 01       	movw	r24, r10
     d74:	89 2f       	mov	r24, r25
     d76:	99 27       	eor	r25, r25
     d78:	86 95       	lsr	r24
     d7a:	4e a1       	ldd	r20, Y+38	; 0x26
     d7c:	5f a1       	ldd	r21, Y+39	; 0x27
     d7e:	68 a5       	ldd	r22, Y+40	; 0x28
     d80:	79 a5       	ldd	r23, Y+41	; 0x29
     d82:	48 0f       	add	r20, r24
     d84:	59 1f       	adc	r21, r25
     d86:	61 1d       	adc	r22, r1
     d88:	71 1d       	adc	r23, r1
     d8a:	ce 01       	movw	r24, r28
     d8c:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     d90:	18 2f       	mov	r17, r24
     d92:	81 11       	cpse	r24, r1
     d94:	ab c0       	rjmp	.+342    	; 0xeec <put_fat+0x1de>
     d96:	c5 01       	movw	r24, r10
     d98:	91 70       	andi	r25, 0x01	; 1
     d9a:	c0 fe       	sbrs	r12, 0
     d9c:	23 c0       	rjmp	.+70     	; 0xde4 <put_fat+0xd6>
     d9e:	fe 01       	movw	r30, r28
     da0:	e8 0f       	add	r30, r24
     da2:	f9 1f       	adc	r31, r25
     da4:	86 a9       	ldd	r24, Z+54	; 0x36
     da6:	28 2f       	mov	r18, r24
     da8:	2f 70       	andi	r18, 0x0F	; 15
     daa:	30 e1       	ldi	r19, 0x10	; 16
     dac:	43 9e       	mul	r4, r19
     dae:	c0 01       	movw	r24, r0
     db0:	11 24       	eor	r1, r1
     db2:	82 2b       	or	r24, r18
     db4:	86 ab       	std	Z+54, r24	; 0x36
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	a8 1a       	sub	r10, r24
     dba:	b8 0a       	sbc	r11, r24
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	8c 83       	std	Y+4, r24	; 0x04
     dc0:	c5 01       	movw	r24, r10
     dc2:	89 2f       	mov	r24, r25
     dc4:	99 27       	eor	r25, r25
     dc6:	86 95       	lsr	r24
     dc8:	4e a1       	ldd	r20, Y+38	; 0x26
     dca:	5f a1       	ldd	r21, Y+39	; 0x27
     dcc:	68 a5       	ldd	r22, Y+40	; 0x28
     dce:	79 a5       	ldd	r23, Y+41	; 0x29
     dd0:	48 0f       	add	r20, r24
     dd2:	59 1f       	adc	r21, r25
     dd4:	61 1d       	adc	r22, r1
     dd6:	71 1d       	adc	r23, r1
     dd8:	ce 01       	movw	r24, r28
     dda:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     dde:	81 11       	cpse	r24, r1
     de0:	82 c0       	rjmp	.+260    	; 0xee6 <put_fat+0x1d8>
     de2:	8b c0       	rjmp	.+278    	; 0xefa <put_fat+0x1ec>
     de4:	fe 01       	movw	r30, r28
     de6:	e8 0f       	add	r30, r24
     de8:	f9 1f       	adc	r31, r25
     dea:	46 aa       	std	Z+54, r4	; 0x36
     dec:	3f ef       	ldi	r19, 0xFF	; 255
     dee:	a3 1a       	sub	r10, r19
     df0:	b3 0a       	sbc	r11, r19
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	8c 83       	std	Y+4, r24	; 0x04
     df6:	c5 01       	movw	r24, r10
     df8:	89 2f       	mov	r24, r25
     dfa:	99 27       	eor	r25, r25
     dfc:	86 95       	lsr	r24
     dfe:	4e a1       	ldd	r20, Y+38	; 0x26
     e00:	5f a1       	ldd	r21, Y+39	; 0x27
     e02:	68 a5       	ldd	r22, Y+40	; 0x28
     e04:	79 a5       	ldd	r23, Y+41	; 0x29
     e06:	48 0f       	add	r20, r24
     e08:	59 1f       	adc	r21, r25
     e0a:	61 1d       	adc	r22, r1
     e0c:	71 1d       	adc	r23, r1
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     e14:	81 11       	cpse	r24, r1
     e16:	69 c0       	rjmp	.+210    	; 0xeea <put_fat+0x1dc>
     e18:	7b c0       	rjmp	.+246    	; 0xf10 <put_fat+0x202>
     e1a:	ec 0f       	add	r30, r28
     e1c:	fd 1f       	adc	r31, r29
     e1e:	46 aa       	std	Z+54, r4	; 0x36
     e20:	65 c0       	rjmp	.+202    	; 0xeec <put_fat+0x1de>
     e22:	45 2f       	mov	r20, r21
     e24:	56 2f       	mov	r21, r22
     e26:	67 2f       	mov	r22, r23
     e28:	77 27       	eor	r23, r23
     e2a:	8e a1       	ldd	r24, Y+38	; 0x26
     e2c:	9f a1       	ldd	r25, Y+39	; 0x27
     e2e:	a8 a5       	ldd	r26, Y+40	; 0x28
     e30:	b9 a5       	ldd	r27, Y+41	; 0x29
     e32:	48 0f       	add	r20, r24
     e34:	59 1f       	adc	r21, r25
     e36:	6a 1f       	adc	r22, r26
     e38:	7b 1f       	adc	r23, r27
     e3a:	ce 01       	movw	r24, r28
     e3c:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     e40:	18 2f       	mov	r17, r24
     e42:	81 11       	cpse	r24, r1
     e44:	53 c0       	rjmp	.+166    	; 0xeec <put_fat+0x1de>
     e46:	cc 0c       	add	r12, r12
     e48:	dd 1c       	adc	r13, r13
     e4a:	ee 1c       	adc	r14, r14
     e4c:	ff 1c       	adc	r15, r15
     e4e:	e8 94       	clt
     e50:	c0 f8       	bld	r12, 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	d8 22       	and	r13, r24
     e56:	ee 24       	eor	r14, r14
     e58:	ff 24       	eor	r15, r15
     e5a:	36 e3       	ldi	r19, 0x36	; 54
     e5c:	c3 0e       	add	r12, r19
     e5e:	d1 1c       	adc	r13, r1
     e60:	fe 01       	movw	r30, r28
     e62:	ec 0d       	add	r30, r12
     e64:	fd 1d       	adc	r31, r13
     e66:	51 82       	std	Z+1, r5	; 0x01
     e68:	40 82       	st	Z, r4
     e6a:	40 c0       	rjmp	.+128    	; 0xeec <put_fat+0x1de>
     e6c:	8e a1       	ldd	r24, Y+38	; 0x26
     e6e:	9f a1       	ldd	r25, Y+39	; 0x27
     e70:	a8 a5       	ldd	r26, Y+40	; 0x28
     e72:	b9 a5       	ldd	r27, Y+41	; 0x29
     e74:	68 94       	set
     e76:	16 f8       	bld	r1, 6
     e78:	76 95       	lsr	r23
     e7a:	67 95       	ror	r22
     e7c:	57 95       	ror	r21
     e7e:	47 95       	ror	r20
     e80:	16 94       	lsr	r1
     e82:	d1 f7       	brne	.-12     	; 0xe78 <put_fat+0x16a>
     e84:	48 0f       	add	r20, r24
     e86:	59 1f       	adc	r21, r25
     e88:	6a 1f       	adc	r22, r26
     e8a:	7b 1f       	adc	r23, r27
     e8c:	ce 01       	movw	r24, r28
     e8e:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
     e92:	18 2f       	mov	r17, r24
     e94:	81 11       	cpse	r24, r1
     e96:	2a c0       	rjmp	.+84     	; 0xeec <put_fat+0x1de>
     e98:	cc 0c       	add	r12, r12
     e9a:	dd 1c       	adc	r13, r13
     e9c:	ee 1c       	adc	r14, r14
     e9e:	ff 1c       	adc	r15, r15
     ea0:	cc 0c       	add	r12, r12
     ea2:	dd 1c       	adc	r13, r13
     ea4:	ee 1c       	adc	r14, r14
     ea6:	ff 1c       	adc	r15, r15
     ea8:	8c ef       	ldi	r24, 0xFC	; 252
     eaa:	c8 22       	and	r12, r24
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	d8 22       	and	r13, r24
     eb0:	ee 24       	eor	r14, r14
     eb2:	ff 24       	eor	r15, r15
     eb4:	36 e3       	ldi	r19, 0x36	; 54
     eb6:	c3 0e       	add	r12, r19
     eb8:	d1 1c       	adc	r13, r1
     eba:	fe 01       	movw	r30, r28
     ebc:	ec 0d       	add	r30, r12
     ebe:	fd 1d       	adc	r31, r13
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	a2 81       	ldd	r26, Z+2	; 0x02
     ec6:	b3 81       	ldd	r27, Z+3	; 0x03
     ec8:	88 27       	eor	r24, r24
     eca:	99 27       	eor	r25, r25
     ecc:	aa 27       	eor	r26, r26
     ece:	b0 7f       	andi	r27, 0xF0	; 240
     ed0:	48 2a       	or	r4, r24
     ed2:	59 2a       	or	r5, r25
     ed4:	6a 2a       	or	r6, r26
     ed6:	7b 2a       	or	r7, r27
     ed8:	40 82       	st	Z, r4
     eda:	51 82       	std	Z+1, r5	; 0x01
     edc:	62 82       	std	Z+2, r6	; 0x02
     ede:	73 82       	std	Z+3, r7	; 0x03
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <put_fat+0x1de>
     ee2:	12 e0       	ldi	r17, 0x02	; 2
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <put_fat+0x1de>
     ee6:	18 2f       	mov	r17, r24
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <put_fat+0x1de>
     eea:	18 2f       	mov	r17, r24
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	8c 83       	std	Y+4, r24	; 0x04
     ef0:	1c c0       	rjmp	.+56     	; 0xf2a <put_fat+0x21c>
     ef2:	12 e0       	ldi	r17, 0x02	; 2
     ef4:	1a c0       	rjmp	.+52     	; 0xf2a <put_fat+0x21c>
     ef6:	12 e0       	ldi	r17, 0x02	; 2
     ef8:	18 c0       	rjmp	.+48     	; 0xf2a <put_fat+0x21c>
     efa:	f5 01       	movw	r30, r10
     efc:	f1 70       	andi	r31, 0x01	; 1
     efe:	68 94       	set
     f00:	13 f8       	bld	r1, 3
     f02:	76 94       	lsr	r7
     f04:	67 94       	ror	r6
     f06:	57 94       	ror	r5
     f08:	47 94       	ror	r4
     f0a:	16 94       	lsr	r1
     f0c:	d1 f7       	brne	.-12     	; 0xf02 <put_fat+0x1f4>
     f0e:	85 cf       	rjmp	.-246    	; 0xe1a <put_fat+0x10c>
     f10:	f5 01       	movw	r30, r10
     f12:	f1 70       	andi	r31, 0x01	; 1
     f14:	de 01       	movw	r26, r28
     f16:	ae 0f       	add	r26, r30
     f18:	bf 1f       	adc	r27, r31
     f1a:	d6 96       	adiw	r26, 0x36	; 54
     f1c:	9c 91       	ld	r25, X
     f1e:	90 7f       	andi	r25, 0xF0	; 240
     f20:	85 2d       	mov	r24, r5
     f22:	8f 70       	andi	r24, 0x0F	; 15
     f24:	49 2e       	mov	r4, r25
     f26:	48 2a       	or	r4, r24
     f28:	78 cf       	rjmp	.-272    	; 0xe1a <put_fat+0x10c>
     f2a:	81 2f       	mov	r24, r17
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	08 95       	ret

00000f4a <create_chain>:
     f4a:	2f 92       	push	r2
     f4c:	3f 92       	push	r3
     f4e:	4f 92       	push	r4
     f50:	5f 92       	push	r5
     f52:	6f 92       	push	r6
     f54:	7f 92       	push	r7
     f56:	8f 92       	push	r8
     f58:	9f 92       	push	r9
     f5a:	af 92       	push	r10
     f5c:	bf 92       	push	r11
     f5e:	cf 92       	push	r12
     f60:	df 92       	push	r13
     f62:	ef 92       	push	r14
     f64:	ff 92       	push	r15
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ec 01       	movw	r28, r24
     f70:	2a 01       	movw	r4, r20
     f72:	3b 01       	movw	r6, r22
     f74:	41 15       	cp	r20, r1
     f76:	51 05       	cpc	r21, r1
     f78:	61 05       	cpc	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	b9 f4       	brne	.+46     	; 0xfac <create_chain+0x62>
     f7e:	8a 84       	ldd	r8, Y+10	; 0x0a
     f80:	9b 84       	ldd	r9, Y+11	; 0x0b
     f82:	ac 84       	ldd	r10, Y+12	; 0x0c
     f84:	bd 84       	ldd	r11, Y+13	; 0x0d
     f86:	81 14       	cp	r8, r1
     f88:	91 04       	cpc	r9, r1
     f8a:	a1 04       	cpc	r10, r1
     f8c:	b1 04       	cpc	r11, r1
     f8e:	29 f1       	breq	.+74     	; 0xfda <create_chain+0x90>
     f90:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f92:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f94:	ac 8d       	ldd	r26, Y+28	; 0x1c
     f96:	bd 8d       	ldd	r27, Y+29	; 0x1d
     f98:	88 16       	cp	r8, r24
     f9a:	99 06       	cpc	r9, r25
     f9c:	aa 06       	cpc	r10, r26
     f9e:	bb 06       	cpc	r11, r27
     fa0:	00 f1       	brcs	.+64     	; 0xfe2 <create_chain+0x98>
     fa2:	81 2c       	mov	r8, r1
     fa4:	91 2c       	mov	r9, r1
     fa6:	54 01       	movw	r10, r8
     fa8:	83 94       	inc	r8
     faa:	1b c0       	rjmp	.+54     	; 0xfe2 <create_chain+0x98>
     fac:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <get_fat>
     fb0:	6b 01       	movw	r12, r22
     fb2:	7c 01       	movw	r14, r24
     fb4:	62 30       	cpi	r22, 0x02	; 2
     fb6:	71 05       	cpc	r23, r1
     fb8:	81 05       	cpc	r24, r1
     fba:	91 05       	cpc	r25, r1
     fbc:	08 f4       	brcc	.+2      	; 0xfc0 <create_chain+0x76>
     fbe:	91 c0       	rjmp	.+290    	; 0x10e2 <create_chain+0x198>
     fc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fc4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     fc6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     fc8:	c8 16       	cp	r12, r24
     fca:	d9 06       	cpc	r13, r25
     fcc:	ea 06       	cpc	r14, r26
     fce:	fb 06       	cpc	r15, r27
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <create_chain+0x8a>
     fd2:	8c c0       	rjmp	.+280    	; 0x10ec <create_chain+0x1a2>
     fd4:	53 01       	movw	r10, r6
     fd6:	42 01       	movw	r8, r4
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <create_chain+0x98>
     fda:	81 2c       	mov	r8, r1
     fdc:	91 2c       	mov	r9, r1
     fde:	54 01       	movw	r10, r8
     fe0:	83 94       	inc	r8
     fe2:	75 01       	movw	r14, r10
     fe4:	64 01       	movw	r12, r8
     fe6:	68 94       	set
     fe8:	22 24       	eor	r2, r2
     fea:	21 f8       	bld	r2, 1
     fec:	31 2c       	mov	r3, r1
     fee:	00 e0       	ldi	r16, 0x00	; 0
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	c8 1a       	sub	r12, r24
     ff6:	d8 0a       	sbc	r13, r24
     ff8:	e8 0a       	sbc	r14, r24
     ffa:	f8 0a       	sbc	r15, r24
     ffc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ffe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1000:	ac 8d       	ldd	r26, Y+28	; 0x1c
    1002:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1004:	c8 16       	cp	r12, r24
    1006:	d9 06       	cpc	r13, r25
    1008:	ea 06       	cpc	r14, r26
    100a:	fb 06       	cpc	r15, r27
    100c:	58 f0       	brcs	.+22     	; 0x1024 <create_chain+0xda>
    100e:	22 e0       	ldi	r18, 0x02	; 2
    1010:	82 16       	cp	r8, r18
    1012:	91 04       	cpc	r9, r1
    1014:	a1 04       	cpc	r10, r1
    1016:	b1 04       	cpc	r11, r1
    1018:	08 f4       	brcc	.+2      	; 0x101c <create_chain+0xd2>
    101a:	6d c0       	rjmp	.+218    	; 0x10f6 <create_chain+0x1ac>
    101c:	c2 2c       	mov	r12, r2
    101e:	d3 2c       	mov	r13, r3
    1020:	e0 2e       	mov	r14, r16
    1022:	f1 2e       	mov	r15, r17
    1024:	b7 01       	movw	r22, r14
    1026:	a6 01       	movw	r20, r12
    1028:	ce 01       	movw	r24, r28
    102a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <get_fat>
    102e:	61 15       	cp	r22, r1
    1030:	71 05       	cpc	r23, r1
    1032:	81 05       	cpc	r24, r1
    1034:	91 05       	cpc	r25, r1
    1036:	99 f0       	breq	.+38     	; 0x105e <create_chain+0x114>
    1038:	6f 3f       	cpi	r22, 0xFF	; 255
    103a:	2f ef       	ldi	r18, 0xFF	; 255
    103c:	72 07       	cpc	r23, r18
    103e:	82 07       	cpc	r24, r18
    1040:	92 07       	cpc	r25, r18
    1042:	09 f4       	brne	.+2      	; 0x1046 <create_chain+0xfc>
    1044:	5d c0       	rjmp	.+186    	; 0x1100 <create_chain+0x1b6>
    1046:	61 30       	cpi	r22, 0x01	; 1
    1048:	71 05       	cpc	r23, r1
    104a:	81 05       	cpc	r24, r1
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <create_chain+0x108>
    1050:	5c c0       	rjmp	.+184    	; 0x110a <create_chain+0x1c0>
    1052:	c8 14       	cp	r12, r8
    1054:	d9 04       	cpc	r13, r9
    1056:	ea 04       	cpc	r14, r10
    1058:	fb 04       	cpc	r15, r11
    105a:	59 f6       	brne	.-106    	; 0xff2 <create_chain+0xa8>
    105c:	5b c0       	rjmp	.+182    	; 0x1114 <create_chain+0x1ca>
    105e:	8c 2c       	mov	r8, r12
    1060:	9d 2c       	mov	r9, r13
    1062:	ae 2c       	mov	r10, r14
    1064:	bf 2c       	mov	r11, r15
    1066:	0f ef       	ldi	r16, 0xFF	; 255
    1068:	1f ef       	ldi	r17, 0xFF	; 255
    106a:	2f ef       	ldi	r18, 0xFF	; 255
    106c:	3f e0       	ldi	r19, 0x0F	; 15
    106e:	b7 01       	movw	r22, r14
    1070:	a6 01       	movw	r20, r12
    1072:	ce 01       	movw	r24, r28
    1074:	0e 94 87 06 	call	0xd0e	; 0xd0e <put_fat>
    1078:	81 11       	cpse	r24, r1
    107a:	2c c0       	rjmp	.+88     	; 0x10d4 <create_chain+0x18a>
    107c:	41 14       	cp	r4, r1
    107e:	51 04       	cpc	r5, r1
    1080:	61 04       	cpc	r6, r1
    1082:	71 04       	cpc	r7, r1
    1084:	59 f0       	breq	.+22     	; 0x109c <create_chain+0x152>
    1086:	0c 2d       	mov	r16, r12
    1088:	1d 2d       	mov	r17, r13
    108a:	2e 2d       	mov	r18, r14
    108c:	3f 2d       	mov	r19, r15
    108e:	b3 01       	movw	r22, r6
    1090:	a2 01       	movw	r20, r4
    1092:	ce 01       	movw	r24, r28
    1094:	0e 94 87 06 	call	0xd0e	; 0xd0e <put_fat>
    1098:	81 11       	cpse	r24, r1
    109a:	1c c0       	rjmp	.+56     	; 0x10d4 <create_chain+0x18a>
    109c:	8a 86       	std	Y+10, r8	; 0x0a
    109e:	9b 86       	std	Y+11, r9	; 0x0b
    10a0:	ac 86       	std	Y+12, r10	; 0x0c
    10a2:	bd 86       	std	Y+13, r11	; 0x0d
    10a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    10a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    10a8:	a8 89       	ldd	r26, Y+16	; 0x10
    10aa:	b9 89       	ldd	r27, Y+17	; 0x11
    10ac:	8f 3f       	cpi	r24, 0xFF	; 255
    10ae:	2f ef       	ldi	r18, 0xFF	; 255
    10b0:	92 07       	cpc	r25, r18
    10b2:	a2 07       	cpc	r26, r18
    10b4:	b2 07       	cpc	r27, r18
    10b6:	99 f1       	breq	.+102    	; 0x111e <create_chain+0x1d4>
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	a1 09       	sbc	r26, r1
    10bc:	b1 09       	sbc	r27, r1
    10be:	8e 87       	std	Y+14, r24	; 0x0e
    10c0:	9f 87       	std	Y+15, r25	; 0x0f
    10c2:	a8 8b       	std	Y+16, r26	; 0x10
    10c4:	b9 8b       	std	Y+17, r27	; 0x11
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	6c 2d       	mov	r22, r12
    10cc:	7d 2d       	mov	r23, r13
    10ce:	8e 2d       	mov	r24, r14
    10d0:	9f 2d       	mov	r25, r15
    10d2:	2e c0       	rjmp	.+92     	; 0x1130 <create_chain+0x1e6>
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	41 f1       	breq	.+80     	; 0x1128 <create_chain+0x1de>
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	27 c0       	rjmp	.+78     	; 0x1130 <create_chain+0x1e6>
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	22 c0       	rjmp	.+68     	; 0x1130 <create_chain+0x1e6>
    10ec:	6c 2d       	mov	r22, r12
    10ee:	7d 2d       	mov	r23, r13
    10f0:	8e 2d       	mov	r24, r14
    10f2:	9f 2d       	mov	r25, r15
    10f4:	1d c0       	rjmp	.+58     	; 0x1130 <create_chain+0x1e6>
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	70 e0       	ldi	r23, 0x00	; 0
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	18 c0       	rjmp	.+48     	; 0x1130 <create_chain+0x1e6>
    1100:	6f ef       	ldi	r22, 0xFF	; 255
    1102:	7f ef       	ldi	r23, 0xFF	; 255
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	9f ef       	ldi	r25, 0xFF	; 255
    1108:	13 c0       	rjmp	.+38     	; 0x1130 <create_chain+0x1e6>
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <create_chain+0x1e6>
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <create_chain+0x1e6>
    111e:	6c 2d       	mov	r22, r12
    1120:	7d 2d       	mov	r23, r13
    1122:	8e 2d       	mov	r24, r14
    1124:	9f 2d       	mov	r25, r15
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <create_chain+0x1e6>
    1128:	6f ef       	ldi	r22, 0xFF	; 255
    112a:	7f ef       	ldi	r23, 0xFF	; 255
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	9f ef       	ldi	r25, 0xFF	; 255
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	bf 90       	pop	r11
    1142:	af 90       	pop	r10
    1144:	9f 90       	pop	r9
    1146:	8f 90       	pop	r8
    1148:	7f 90       	pop	r7
    114a:	6f 90       	pop	r6
    114c:	5f 90       	pop	r5
    114e:	4f 90       	pop	r4
    1150:	3f 90       	pop	r3
    1152:	2f 90       	pop	r2
    1154:	08 95       	ret

00001156 <dir_next>:
    1156:	8f 92       	push	r8
    1158:	9f 92       	push	r9
    115a:	af 92       	push	r10
    115c:	bf 92       	push	r11
    115e:	cf 92       	push	r12
    1160:	df 92       	push	r13
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	dc 01       	movw	r26, r24
    1170:	14 96       	adiw	r26, 0x04	; 4
    1172:	cd 91       	ld	r28, X+
    1174:	dc 91       	ld	r29, X
    1176:	15 97       	sbiw	r26, 0x05	; 5
    1178:	21 96       	adiw	r28, 0x01	; 1
    117a:	09 f4       	brne	.+2      	; 0x117e <dir_next+0x28>
    117c:	02 c1       	rjmp	.+516    	; 0x1382 <dir_next+0x22c>
    117e:	1e 96       	adiw	r26, 0x0e	; 14
    1180:	8d 90       	ld	r8, X+
    1182:	9d 90       	ld	r9, X+
    1184:	ad 90       	ld	r10, X+
    1186:	bc 90       	ld	r11, X
    1188:	51 97       	sbiw	r26, 0x11	; 17
    118a:	81 14       	cp	r8, r1
    118c:	91 04       	cpc	r9, r1
    118e:	a1 04       	cpc	r10, r1
    1190:	b1 04       	cpc	r11, r1
    1192:	09 f4       	brne	.+2      	; 0x1196 <dir_next+0x40>
    1194:	f8 c0       	rjmp	.+496    	; 0x1386 <dir_next+0x230>
    1196:	7b 01       	movw	r14, r22
    1198:	8c 01       	movw	r16, r24
    119a:	6e 01       	movw	r12, r28
    119c:	bf e0       	ldi	r27, 0x0F	; 15
    119e:	cb 22       	and	r12, r27
    11a0:	dd 24       	eor	r13, r13
    11a2:	c1 14       	cp	r12, r1
    11a4:	d1 04       	cpc	r13, r1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <dir_next+0x54>
    11a8:	d0 c0       	rjmp	.+416    	; 0x134a <dir_next+0x1f4>
    11aa:	ef ef       	ldi	r30, 0xFF	; 255
    11ac:	8e 1a       	sub	r8, r30
    11ae:	9e 0a       	sbc	r9, r30
    11b0:	ae 0a       	sbc	r10, r30
    11b2:	be 0a       	sbc	r11, r30
    11b4:	dc 01       	movw	r26, r24
    11b6:	1e 96       	adiw	r26, 0x0e	; 14
    11b8:	8d 92       	st	X+, r8
    11ba:	9d 92       	st	X+, r9
    11bc:	ad 92       	st	X+, r10
    11be:	bc 92       	st	X, r11
    11c0:	51 97       	sbiw	r26, 0x11	; 17
    11c2:	1a 96       	adiw	r26, 0x0a	; 10
    11c4:	4d 91       	ld	r20, X+
    11c6:	5d 91       	ld	r21, X+
    11c8:	6d 91       	ld	r22, X+
    11ca:	7c 91       	ld	r23, X
    11cc:	1d 97       	sbiw	r26, 0x0d	; 13
    11ce:	41 15       	cp	r20, r1
    11d0:	51 05       	cpc	r21, r1
    11d2:	61 05       	cpc	r22, r1
    11d4:	71 05       	cpc	r23, r1
    11d6:	49 f4       	brne	.+18     	; 0x11ea <dir_next+0x94>
    11d8:	ed 91       	ld	r30, X+
    11da:	fc 91       	ld	r31, X
    11dc:	80 85       	ldd	r24, Z+8	; 0x08
    11de:	91 85       	ldd	r25, Z+9	; 0x09
    11e0:	c8 17       	cp	r28, r24
    11e2:	d9 07       	cpc	r29, r25
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <dir_next+0x92>
    11e6:	d1 c0       	rjmp	.+418    	; 0x138a <dir_next+0x234>
    11e8:	b0 c0       	rjmp	.+352    	; 0x134a <dir_next+0x1f4>
    11ea:	dc 01       	movw	r26, r24
    11ec:	ed 91       	ld	r30, X+
    11ee:	fc 91       	ld	r31, X
    11f0:	22 81       	ldd	r18, Z+2	; 0x02
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	31 09       	sbc	r19, r1
    11f8:	ce 01       	movw	r24, r28
    11fa:	92 95       	swap	r25
    11fc:	82 95       	swap	r24
    11fe:	8f 70       	andi	r24, 0x0F	; 15
    1200:	89 27       	eor	r24, r25
    1202:	9f 70       	andi	r25, 0x0F	; 15
    1204:	89 27       	eor	r24, r25
    1206:	28 23       	and	r18, r24
    1208:	39 23       	and	r19, r25
    120a:	23 2b       	or	r18, r19
    120c:	09 f0       	breq	.+2      	; 0x1210 <dir_next+0xba>
    120e:	9d c0       	rjmp	.+314    	; 0x134a <dir_next+0x1f4>
    1210:	cf 01       	movw	r24, r30
    1212:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <get_fat>
    1216:	4b 01       	movw	r8, r22
    1218:	5c 01       	movw	r10, r24
    121a:	62 30       	cpi	r22, 0x02	; 2
    121c:	71 05       	cpc	r23, r1
    121e:	81 05       	cpc	r24, r1
    1220:	91 05       	cpc	r25, r1
    1222:	08 f4       	brcc	.+2      	; 0x1226 <dir_next+0xd0>
    1224:	b4 c0       	rjmp	.+360    	; 0x138e <dir_next+0x238>
    1226:	6f 3f       	cpi	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	8f 4f       	sbci	r24, 0xFF	; 255
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	09 f4       	brne	.+2      	; 0x1232 <dir_next+0xdc>
    1230:	b0 c0       	rjmp	.+352    	; 0x1392 <dir_next+0x23c>
    1232:	d8 01       	movw	r26, r16
    1234:	ed 91       	ld	r30, X+
    1236:	fc 91       	ld	r31, X
    1238:	82 8d       	ldd	r24, Z+26	; 0x1a
    123a:	93 8d       	ldd	r25, Z+27	; 0x1b
    123c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    123e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1240:	88 16       	cp	r8, r24
    1242:	99 06       	cpc	r9, r25
    1244:	aa 06       	cpc	r10, r26
    1246:	bb 06       	cpc	r11, r27
    1248:	08 f4       	brcc	.+2      	; 0x124c <dir_next+0xf6>
    124a:	6d c0       	rjmp	.+218    	; 0x1326 <dir_next+0x1d0>
    124c:	ef 28       	or	r14, r15
    124e:	09 f4       	brne	.+2      	; 0x1252 <dir_next+0xfc>
    1250:	a2 c0       	rjmp	.+324    	; 0x1396 <dir_next+0x240>
    1252:	d8 01       	movw	r26, r16
    1254:	1a 96       	adiw	r26, 0x0a	; 10
    1256:	4d 91       	ld	r20, X+
    1258:	5d 91       	ld	r21, X+
    125a:	6d 91       	ld	r22, X+
    125c:	7c 91       	ld	r23, X
    125e:	1d 97       	sbiw	r26, 0x0d	; 13
    1260:	cf 01       	movw	r24, r30
    1262:	0e 94 a5 07 	call	0xf4a	; 0xf4a <create_chain>
    1266:	4b 01       	movw	r8, r22
    1268:	5c 01       	movw	r10, r24
    126a:	61 15       	cp	r22, r1
    126c:	71 05       	cpc	r23, r1
    126e:	81 05       	cpc	r24, r1
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <dir_next+0x120>
    1274:	92 c0       	rjmp	.+292    	; 0x139a <dir_next+0x244>
    1276:	61 30       	cpi	r22, 0x01	; 1
    1278:	71 05       	cpc	r23, r1
    127a:	81 05       	cpc	r24, r1
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <dir_next+0x12c>
    1280:	8e c0       	rjmp	.+284    	; 0x139e <dir_next+0x248>
    1282:	6f 3f       	cpi	r22, 0xFF	; 255
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	8f 4f       	sbci	r24, 0xFF	; 255
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	09 f4       	brne	.+2      	; 0x128e <dir_next+0x138>
    128c:	8a c0       	rjmp	.+276    	; 0x13a2 <dir_next+0x24c>
    128e:	d8 01       	movw	r26, r16
    1290:	8d 91       	ld	r24, X+
    1292:	9c 91       	ld	r25, X
    1294:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sync_window>
    1298:	81 11       	cpse	r24, r1
    129a:	85 c0       	rjmp	.+266    	; 0x13a6 <dir_next+0x250>
    129c:	f8 01       	movw	r30, r16
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	fc 01       	movw	r30, r24
    12a4:	f6 96       	adiw	r30, 0x36	; 54
    12a6:	8a 5c       	subi	r24, 0xCA	; 202
    12a8:	9d 4f       	sbci	r25, 0xFD	; 253
    12aa:	11 92       	st	Z+, r1
    12ac:	e8 17       	cp	r30, r24
    12ae:	f9 07       	cpc	r31, r25
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <dir_next+0x154>
    12b2:	d8 01       	movw	r26, r16
    12b4:	ed 90       	ld	r14, X+
    12b6:	fc 90       	ld	r15, X
    12b8:	b5 01       	movw	r22, r10
    12ba:	a4 01       	movw	r20, r8
    12bc:	c7 01       	movw	r24, r14
    12be:	0e 94 bd 04 	call	0x97a	; 0x97a <clust2sect>
    12c2:	f7 01       	movw	r30, r14
    12c4:	62 ab       	std	Z+50, r22	; 0x32
    12c6:	73 ab       	std	Z+51, r23	; 0x33
    12c8:	84 ab       	std	Z+52, r24	; 0x34
    12ca:	95 ab       	std	Z+53, r25	; 0x35
    12cc:	f1 2c       	mov	r15, r1
    12ce:	ee 24       	eor	r14, r14
    12d0:	e3 94       	inc	r14
    12d2:	17 c0       	rjmp	.+46     	; 0x1302 <dir_next+0x1ac>
    12d4:	e4 82       	std	Z+4, r14	; 0x04
    12d6:	d8 01       	movw	r26, r16
    12d8:	8d 91       	ld	r24, X+
    12da:	9c 91       	ld	r25, X
    12dc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sync_window>
    12e0:	81 11       	cpse	r24, r1
    12e2:	63 c0       	rjmp	.+198    	; 0x13aa <dir_next+0x254>
    12e4:	d8 01       	movw	r26, r16
    12e6:	ed 91       	ld	r30, X+
    12e8:	fc 91       	ld	r31, X
    12ea:	82 a9       	ldd	r24, Z+50	; 0x32
    12ec:	93 a9       	ldd	r25, Z+51	; 0x33
    12ee:	a4 a9       	ldd	r26, Z+52	; 0x34
    12f0:	b5 a9       	ldd	r27, Z+53	; 0x35
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	a1 1d       	adc	r26, r1
    12f6:	b1 1d       	adc	r27, r1
    12f8:	82 ab       	std	Z+50, r24	; 0x32
    12fa:	93 ab       	std	Z+51, r25	; 0x33
    12fc:	a4 ab       	std	Z+52, r26	; 0x34
    12fe:	b5 ab       	std	Z+53, r27	; 0x35
    1300:	f3 94       	inc	r15
    1302:	d8 01       	movw	r26, r16
    1304:	ed 91       	ld	r30, X+
    1306:	fc 91       	ld	r31, X
    1308:	82 81       	ldd	r24, Z+2	; 0x02
    130a:	f8 16       	cp	r15, r24
    130c:	18 f3       	brcs	.-58     	; 0x12d4 <dir_next+0x17e>
    130e:	82 a9       	ldd	r24, Z+50	; 0x32
    1310:	93 a9       	ldd	r25, Z+51	; 0x33
    1312:	a4 a9       	ldd	r26, Z+52	; 0x34
    1314:	b5 a9       	ldd	r27, Z+53	; 0x35
    1316:	8f 19       	sub	r24, r15
    1318:	91 09       	sbc	r25, r1
    131a:	a1 09       	sbc	r26, r1
    131c:	b1 09       	sbc	r27, r1
    131e:	82 ab       	std	Z+50, r24	; 0x32
    1320:	93 ab       	std	Z+51, r25	; 0x33
    1322:	a4 ab       	std	Z+52, r26	; 0x34
    1324:	b5 ab       	std	Z+53, r27	; 0x35
    1326:	f8 01       	movw	r30, r16
    1328:	82 86       	std	Z+10, r8	; 0x0a
    132a:	93 86       	std	Z+11, r9	; 0x0b
    132c:	a4 86       	std	Z+12, r10	; 0x0c
    132e:	b5 86       	std	Z+13, r11	; 0x0d
    1330:	b5 01       	movw	r22, r10
    1332:	a4 01       	movw	r20, r8
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	0e 94 bd 04 	call	0x97a	; 0x97a <clust2sect>
    133c:	d8 01       	movw	r26, r16
    133e:	1e 96       	adiw	r26, 0x0e	; 14
    1340:	6d 93       	st	X+, r22
    1342:	7d 93       	st	X+, r23
    1344:	8d 93       	st	X+, r24
    1346:	9c 93       	st	X, r25
    1348:	51 97       	sbiw	r26, 0x11	; 17
    134a:	f8 01       	movw	r30, r16
    134c:	d5 83       	std	Z+5, r29	; 0x05
    134e:	c4 83       	std	Z+4, r28	; 0x04
    1350:	cc 0c       	add	r12, r12
    1352:	dd 1c       	adc	r13, r13
    1354:	cc 0c       	add	r12, r12
    1356:	dd 1c       	adc	r13, r13
    1358:	cc 0c       	add	r12, r12
    135a:	dd 1c       	adc	r13, r13
    135c:	cc 0c       	add	r12, r12
    135e:	dd 1c       	adc	r13, r13
    1360:	cc 0c       	add	r12, r12
    1362:	dd 1c       	adc	r13, r13
    1364:	f6 e3       	ldi	r31, 0x36	; 54
    1366:	cf 0e       	add	r12, r31
    1368:	d1 1c       	adc	r13, r1
    136a:	d8 01       	movw	r26, r16
    136c:	8d 91       	ld	r24, X+
    136e:	9c 91       	ld	r25, X
    1370:	11 97       	sbiw	r26, 0x01	; 1
    1372:	c8 0e       	add	r12, r24
    1374:	d9 1e       	adc	r13, r25
    1376:	53 96       	adiw	r26, 0x13	; 19
    1378:	dc 92       	st	X, r13
    137a:	ce 92       	st	-X, r12
    137c:	52 97       	sbiw	r26, 0x12	; 18
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	15 c0       	rjmp	.+42     	; 0x13ac <dir_next+0x256>
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	13 c0       	rjmp	.+38     	; 0x13ac <dir_next+0x256>
    1386:	84 e0       	ldi	r24, 0x04	; 4
    1388:	11 c0       	rjmp	.+34     	; 0x13ac <dir_next+0x256>
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <dir_next+0x256>
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <dir_next+0x256>
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0b c0       	rjmp	.+22     	; 0x13ac <dir_next+0x256>
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <dir_next+0x256>
    139a:	87 e0       	ldi	r24, 0x07	; 7
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <dir_next+0x256>
    139e:	82 e0       	ldi	r24, 0x02	; 2
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <dir_next+0x256>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <dir_next+0x256>
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <dir_next+0x256>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	bf 90       	pop	r11
    13be:	af 90       	pop	r10
    13c0:	9f 90       	pop	r9
    13c2:	8f 90       	pop	r8
    13c4:	08 95       	ret

000013c6 <follow_path>:
    13c6:	2f 92       	push	r2
    13c8:	3f 92       	push	r3
    13ca:	4f 92       	push	r4
    13cc:	5f 92       	push	r5
    13ce:	6f 92       	push	r6
    13d0:	7f 92       	push	r7
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <follow_path+0x26>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <follow_path+0x28>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	8c 01       	movw	r16, r24
    13f4:	6b 01       	movw	r12, r22
    13f6:	db 01       	movw	r26, r22
    13f8:	8c 91       	ld	r24, X
    13fa:	8f 32       	cpi	r24, 0x2F	; 47
    13fc:	11 f0       	breq	.+4      	; 0x1402 <follow_path+0x3c>
    13fe:	8c 35       	cpi	r24, 0x5C	; 92
    1400:	49 f4       	brne	.+18     	; 0x1414 <follow_path+0x4e>
    1402:	bf ef       	ldi	r27, 0xFF	; 255
    1404:	cb 1a       	sub	r12, r27
    1406:	db 0a       	sbc	r13, r27
    1408:	f8 01       	movw	r30, r16
    140a:	16 82       	std	Z+6, r1	; 0x06
    140c:	17 82       	std	Z+7, r1	; 0x07
    140e:	10 86       	std	Z+8, r1	; 0x08
    1410:	11 86       	std	Z+9, r1	; 0x09
    1412:	0c c0       	rjmp	.+24     	; 0x142c <follow_path+0x66>
    1414:	d8 01       	movw	r26, r16
    1416:	ed 91       	ld	r30, X+
    1418:	fc 91       	ld	r31, X
    141a:	86 89       	ldd	r24, Z+22	; 0x16
    141c:	97 89       	ldd	r25, Z+23	; 0x17
    141e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1420:	b1 8d       	ldd	r27, Z+25	; 0x19
    1422:	f8 01       	movw	r30, r16
    1424:	86 83       	std	Z+6, r24	; 0x06
    1426:	97 83       	std	Z+7, r25	; 0x07
    1428:	a0 87       	std	Z+8, r26	; 0x08
    142a:	b1 87       	std	Z+9, r27	; 0x09
    142c:	d6 01       	movw	r26, r12
    142e:	8c 91       	ld	r24, X
    1430:	80 32       	cpi	r24, 0x20	; 32
    1432:	48 f4       	brcc	.+18     	; 0x1446 <follow_path+0x80>
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <dir_sdi>
    143e:	f8 01       	movw	r30, r16
    1440:	13 8a       	std	Z+19, r1	; 0x13
    1442:	12 8a       	std	Z+18, r1	; 0x12
    1444:	5d c1       	rjmp	.+698    	; 0x1700 <follow_path+0x33a>
    1446:	68 94       	set
    1448:	bb 24       	eor	r11, r11
    144a:	b5 f8       	bld	r11, 5
    144c:	0f 2e       	mov	r0, r31
    144e:	fe e2       	ldi	r31, 0x2E	; 46
    1450:	8f 2e       	mov	r8, r31
    1452:	f0 2d       	mov	r31, r0
    1454:	21 2c       	mov	r2, r1
    1456:	a1 2c       	mov	r10, r1
    1458:	91 2c       	mov	r9, r1
    145a:	68 94       	set
    145c:	77 24       	eor	r7, r7
    145e:	73 f8       	bld	r7, 3
    1460:	41 2c       	mov	r4, r1
    1462:	31 2c       	mov	r3, r1
    1464:	79 82       	std	Y+1, r7	; 0x01
    1466:	4a 82       	std	Y+2, r4	; 0x02
    1468:	1c 83       	std	Y+4, r17	; 0x04
    146a:	0b 83       	std	Y+3, r16	; 0x03
    146c:	57 2c       	mov	r5, r7
    146e:	d6 01       	movw	r26, r12
    1470:	2b 81       	ldd	r18, Y+3	; 0x03
    1472:	3c 81       	ldd	r19, Y+4	; 0x04
    1474:	fd 01       	movw	r30, r26
    1476:	8d 91       	ld	r24, X+
    1478:	8f 32       	cpi	r24, 0x2F	; 47
    147a:	e1 f3       	breq	.-8      	; 0x1474 <follow_path+0xae>
    147c:	8c 35       	cpi	r24, 0x5C	; 92
    147e:	d1 f3       	breq	.-12     	; 0x1474 <follow_path+0xae>
    1480:	3c 83       	std	Y+4, r19	; 0x04
    1482:	2b 83       	std	Y+3, r18	; 0x03
    1484:	d9 01       	movw	r26, r18
    1486:	54 96       	adiw	r26, 0x14	; 20
    1488:	6d 91       	ld	r22, X+
    148a:	7c 91       	ld	r23, X
    148c:	55 97       	sbiw	r26, 0x15	; 21
    148e:	db 01       	movw	r26, r22
    1490:	cb 01       	movw	r24, r22
    1492:	0b 96       	adiw	r24, 0x0b	; 11
    1494:	bd 92       	st	X+, r11
    1496:	a8 17       	cp	r26, r24
    1498:	b9 07       	cpc	r27, r25
    149a:	e1 f7       	brne	.-8      	; 0x1494 <follow_path+0xce>
    149c:	3c 83       	std	Y+4, r19	; 0x04
    149e:	2b 83       	std	Y+3, r18	; 0x03
    14a0:	80 81       	ld	r24, Z
    14a2:	8e 32       	cpi	r24, 0x2E	; 46
    14a4:	51 f0       	breq	.+20     	; 0x14ba <follow_path+0xf4>
    14a6:	6f 01       	movw	r12, r30
    14a8:	ea 2c       	mov	r14, r10
    14aa:	f9 2c       	mov	r15, r9
    14ac:	2a 2d       	mov	r18, r10
    14ae:	39 2d       	mov	r19, r9
    14b0:	65 2c       	mov	r6, r5
    14b2:	74 2c       	mov	r7, r4
    14b4:	03 2d       	mov	r16, r3
    14b6:	df 01       	movw	r26, r30
    14b8:	1d c0       	rjmp	.+58     	; 0x14f4 <follow_path+0x12e>
    14ba:	db 01       	movw	r26, r22
    14bc:	8c 92       	st	X, r8
    14be:	81 81       	ldd	r24, Z+1	; 0x01
    14c0:	8e 32       	cpi	r24, 0x2E	; 46
    14c2:	49 f4       	brne	.+18     	; 0x14d6 <follow_path+0x110>
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	8c 92       	st	X, r8
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	8e 32       	cpi	r24, 0x2E	; 46
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <follow_path+0x10a>
    14ce:	6f c0       	rjmp	.+222    	; 0x15ae <follow_path+0x1e8>
    14d0:	23 e0       	ldi	r18, 0x03	; 3
    14d2:	32 2d       	mov	r19, r2
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <follow_path+0x114>
    14d6:	22 e0       	ldi	r18, 0x02	; 2
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	8f 32       	cpi	r24, 0x2F	; 47
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <follow_path+0x11a>
    14de:	cf c0       	rjmp	.+414    	; 0x167e <follow_path+0x2b8>
    14e0:	8c 35       	cpi	r24, 0x5C	; 92
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <follow_path+0x120>
    14e4:	cc c0       	rjmp	.+408    	; 0x167e <follow_path+0x2b8>
    14e6:	81 32       	cpi	r24, 0x21	; 33
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <follow_path+0x126>
    14ea:	e2 c0       	rjmp	.+452    	; 0x16b0 <follow_path+0x2ea>
    14ec:	c3 c0       	rjmp	.+390    	; 0x1674 <follow_path+0x2ae>
    14ee:	fb 01       	movw	r30, r22
    14f0:	83 87       	std	Z+11, r24	; 0x0b
    14f2:	e0 c0       	rjmp	.+448    	; 0x16b4 <follow_path+0x2ee>
    14f4:	2f 5f       	subi	r18, 0xFF	; 255
    14f6:	3f 4f       	sbci	r19, 0xFF	; 255
    14f8:	1d 91       	ld	r17, X+
    14fa:	11 32       	cpi	r17, 0x21	; 33
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <follow_path+0x13a>
    14fe:	d0 c0       	rjmp	.+416    	; 0x16a0 <follow_path+0x2da>
    1500:	1f 32       	cpi	r17, 0x2F	; 47
    1502:	09 f4       	brne	.+2      	; 0x1506 <follow_path+0x140>
    1504:	d1 c0       	rjmp	.+418    	; 0x16a8 <follow_path+0x2e2>
    1506:	1c 35       	cpi	r17, 0x5C	; 92
    1508:	09 f4       	brne	.+2      	; 0x150c <follow_path+0x146>
    150a:	ce c0       	rjmp	.+412    	; 0x16a8 <follow_path+0x2e2>
    150c:	1e 32       	cpi	r17, 0x2E	; 46
    150e:	09 f4       	brne	.+2      	; 0x1512 <follow_path+0x14c>
    1510:	bb c0       	rjmp	.+374    	; 0x1688 <follow_path+0x2c2>
    1512:	e6 14       	cp	r14, r6
    1514:	f7 04       	cpc	r15, r7
    1516:	08 f0       	brcs	.+2      	; 0x151a <follow_path+0x154>
    1518:	cb c0       	rjmp	.+406    	; 0x16b0 <follow_path+0x2ea>
    151a:	0a c0       	rjmp	.+20     	; 0x1530 <follow_path+0x16a>
    151c:	00 0f       	add	r16, r16
    151e:	00 0f       	add	r16, r16
    1520:	e9 80       	ldd	r14, Y+1	; 0x01
    1522:	fa 80       	ldd	r15, Y+2	; 0x02
    1524:	0f 2e       	mov	r0, r31
    1526:	fb e0       	ldi	r31, 0x0B	; 11
    1528:	6f 2e       	mov	r6, r31
    152a:	f0 2d       	mov	r31, r0
    152c:	71 2c       	mov	r7, r1
    152e:	e2 cf       	rjmp	.-60     	; 0x14f4 <follow_path+0x12e>
    1530:	11 23       	and	r17, r17
    1532:	0c f4       	brge	.+2      	; 0x1536 <follow_path+0x170>
    1534:	bd c0       	rjmp	.+378    	; 0x16b0 <follow_path+0x2ea>
    1536:	41 2f       	mov	r20, r17
    1538:	50 e0       	ldi	r21, 0x00	; 0
    153a:	42 32       	cpi	r20, 0x22	; 34
    153c:	51 05       	cpc	r21, r1
    153e:	b9 f1       	breq	.+110    	; 0x15ae <follow_path+0x1e8>
    1540:	e0 e1       	ldi	r30, 0x10	; 16
    1542:	f1 e0       	ldi	r31, 0x01	; 1
    1544:	81 91       	ld	r24, Z+
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <follow_path+0x186>
    154a:	a4 c0       	rjmp	.+328    	; 0x1694 <follow_path+0x2ce>
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	48 17       	cp	r20, r24
    1550:	59 07       	cpc	r21, r25
    1552:	c1 f7       	brne	.-16     	; 0x1544 <follow_path+0x17e>
    1554:	2c c0       	rjmp	.+88     	; 0x15ae <follow_path+0x1e8>
    1556:	02 60       	ori	r16, 0x02	; 2
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <follow_path+0x1a0>
    155a:	8f e9       	ldi	r24, 0x9F	; 159
    155c:	81 0f       	add	r24, r17
    155e:	8a 31       	cpi	r24, 0x1A	; 26
    1560:	10 f4       	brcc	.+4      	; 0x1566 <follow_path+0x1a0>
    1562:	01 60       	ori	r16, 0x01	; 1
    1564:	10 52       	subi	r17, 0x20	; 32
    1566:	fb 01       	movw	r30, r22
    1568:	ee 0d       	add	r30, r14
    156a:	ff 1d       	adc	r31, r15
    156c:	10 83       	st	Z, r17
    156e:	f7 01       	movw	r30, r14
    1570:	31 96       	adiw	r30, 0x01	; 1
    1572:	7f 01       	movw	r14, r30
    1574:	bf cf       	rjmp	.-130    	; 0x14f4 <follow_path+0x12e>
    1576:	ef 28       	or	r14, r15
    1578:	09 f4       	brne	.+2      	; 0x157c <follow_path+0x1b6>
    157a:	9a c0       	rjmp	.+308    	; 0x16b0 <follow_path+0x2ea>
    157c:	db 01       	movw	r26, r22
    157e:	9c 91       	ld	r25, X
    1580:	95 3e       	cpi	r25, 0xE5	; 229
    1582:	11 f4       	brne	.+4      	; 0x1588 <follow_path+0x1c2>
    1584:	95 e0       	ldi	r25, 0x05	; 5
    1586:	9c 93       	st	X, r25
    1588:	b8 e0       	ldi	r27, 0x08	; 8
    158a:	6b 16       	cp	r6, r27
    158c:	71 04       	cpc	r7, r1
    158e:	11 f4       	brne	.+4      	; 0x1594 <follow_path+0x1ce>
    1590:	00 0f       	add	r16, r16
    1592:	00 0f       	add	r16, r16
    1594:	90 2f       	mov	r25, r16
    1596:	93 70       	andi	r25, 0x03	; 3
    1598:	91 30       	cpi	r25, 0x01	; 1
    159a:	09 f4       	brne	.+2      	; 0x159e <follow_path+0x1d8>
    159c:	80 61       	ori	r24, 0x10	; 16
    159e:	90 2f       	mov	r25, r16
    15a0:	9c 70       	andi	r25, 0x0C	; 12
    15a2:	94 30       	cpi	r25, 0x04	; 4
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <follow_path+0x1e2>
    15a6:	88 60       	ori	r24, 0x08	; 8
    15a8:	fb 01       	movw	r30, r22
    15aa:	83 87       	std	Z+11, r24	; 0x0b
    15ac:	83 c0       	rjmp	.+262    	; 0x16b4 <follow_path+0x2ee>
    15ae:	86 e0       	ldi	r24, 0x06	; 6
    15b0:	a7 c0       	rjmp	.+334    	; 0x1700 <follow_path+0x33a>
    15b2:	0b 81       	ldd	r16, Y+3	; 0x03
    15b4:	1c 81       	ldd	r17, Y+4	; 0x04
    15b6:	d8 01       	movw	r26, r16
    15b8:	1e 96       	adiw	r26, 0x0e	; 14
    15ba:	4d 91       	ld	r20, X+
    15bc:	5d 91       	ld	r21, X+
    15be:	6d 91       	ld	r22, X+
    15c0:	7c 91       	ld	r23, X
    15c2:	51 97       	sbiw	r26, 0x11	; 17
    15c4:	8d 91       	ld	r24, X+
    15c6:	9c 91       	ld	r25, X
    15c8:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
    15cc:	81 11       	cpse	r24, r1
    15ce:	84 c0       	rjmp	.+264    	; 0x16d8 <follow_path+0x312>
    15d0:	f8 01       	movw	r30, r16
    15d2:	62 89       	ldd	r22, Z+18	; 0x12
    15d4:	73 89       	ldd	r23, Z+19	; 0x13
    15d6:	db 01       	movw	r26, r22
    15d8:	9c 91       	ld	r25, X
    15da:	99 23       	and	r25, r25
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <follow_path+0x21a>
    15de:	89 c0       	rjmp	.+274    	; 0x16f2 <follow_path+0x32c>
    15e0:	1b 96       	adiw	r26, 0x0b	; 11
    15e2:	9c 91       	ld	r25, X
    15e4:	93 fd       	sbrc	r25, 3
    15e6:	12 c0       	rjmp	.+36     	; 0x160c <follow_path+0x246>
    15e8:	44 89       	ldd	r20, Z+20	; 0x14
    15ea:	55 89       	ldd	r21, Z+21	; 0x15
    15ec:	fb 01       	movw	r30, r22
    15ee:	da 01       	movw	r26, r20
    15f0:	9b 01       	movw	r18, r22
    15f2:	25 5f       	subi	r18, 0xF5	; 245
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	78 01       	movw	r14, r16
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <follow_path+0x23c>
    15fa:	e2 17       	cp	r30, r18
    15fc:	f3 07       	cpc	r31, r19
    15fe:	09 f4       	brne	.+2      	; 0x1602 <follow_path+0x23c>
    1600:	63 c0       	rjmp	.+198    	; 0x16c8 <follow_path+0x302>
    1602:	11 91       	ld	r17, Z+
    1604:	9d 91       	ld	r25, X+
    1606:	19 17       	cp	r17, r25
    1608:	c1 f3       	breq	.-16     	; 0x15fa <follow_path+0x234>
    160a:	87 01       	movw	r16, r14
    160c:	6a 2d       	mov	r22, r10
    160e:	79 2d       	mov	r23, r9
    1610:	c8 01       	movw	r24, r16
    1612:	0e 94 ab 08 	call	0x1156	; 0x1156 <dir_next>
    1616:	88 23       	and	r24, r24
    1618:	71 f2       	breq	.-100    	; 0x15b6 <follow_path+0x1f0>
    161a:	1c 83       	std	Y+4, r17	; 0x04
    161c:	0b 83       	std	Y+3, r16	; 0x03
    161e:	5e c0       	rjmp	.+188    	; 0x16dc <follow_path+0x316>
    1620:	95 ff       	sbrs	r25, 5
    1622:	0c c0       	rjmp	.+24     	; 0x163c <follow_path+0x276>
    1624:	eb 81       	ldd	r30, Y+3	; 0x03
    1626:	fc 81       	ldd	r31, Y+4	; 0x04
    1628:	16 82       	std	Z+6, r1	; 0x06
    162a:	17 82       	std	Z+7, r1	; 0x07
    162c:	10 86       	std	Z+8, r1	; 0x08
    162e:	11 86       	std	Z+9, r1	; 0x09
    1630:	13 8a       	std	Z+19, r1	; 0x13
    1632:	12 8a       	std	Z+18, r1	; 0x12
    1634:	92 ff       	sbrs	r25, 2
    1636:	1b cf       	rjmp	.-458    	; 0x146e <follow_path+0xa8>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	62 c0       	rjmp	.+196    	; 0x1700 <follow_path+0x33a>
    163c:	92 fd       	sbrc	r25, 2
    163e:	16 c0       	rjmp	.+44     	; 0x166c <follow_path+0x2a6>
    1640:	85 e0       	ldi	r24, 0x05	; 5
    1642:	5e c0       	rjmp	.+188    	; 0x1700 <follow_path+0x33a>
    1644:	db 01       	movw	r26, r22
    1646:	1b 96       	adiw	r26, 0x0b	; 11
    1648:	8c 91       	ld	r24, X
    164a:	84 ff       	sbrs	r24, 4
    164c:	11 c0       	rjmp	.+34     	; 0x1670 <follow_path+0x2aa>
    164e:	eb 81       	ldd	r30, Y+3	; 0x03
    1650:	fc 81       	ldd	r31, Y+4	; 0x04
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	0e 94 a5 00 	call	0x14a	; 0x14a <ld_clust>
    165a:	ab 81       	ldd	r26, Y+3	; 0x03
    165c:	bc 81       	ldd	r27, Y+4	; 0x04
    165e:	16 96       	adiw	r26, 0x06	; 6
    1660:	6d 93       	st	X+, r22
    1662:	7d 93       	st	X+, r23
    1664:	8d 93       	st	X+, r24
    1666:	9c 93       	st	X, r25
    1668:	19 97       	sbiw	r26, 0x09	; 9
    166a:	01 cf       	rjmp	.-510    	; 0x146e <follow_path+0xa8>
    166c:	84 e0       	ldi	r24, 0x04	; 4
    166e:	48 c0       	rjmp	.+144    	; 0x1700 <follow_path+0x33a>
    1670:	85 e0       	ldi	r24, 0x05	; 5
    1672:	46 c0       	rjmp	.+140    	; 0x1700 <follow_path+0x33a>
    1674:	6f 01       	movw	r12, r30
    1676:	c2 0e       	add	r12, r18
    1678:	d3 1e       	adc	r13, r19
    167a:	84 e2       	ldi	r24, 0x24	; 36
    167c:	38 cf       	rjmp	.-400    	; 0x14ee <follow_path+0x128>
    167e:	6f 01       	movw	r12, r30
    1680:	c2 0e       	add	r12, r18
    1682:	d3 1e       	adc	r13, r19
    1684:	8b 2d       	mov	r24, r11
    1686:	33 cf       	rjmp	.-410    	; 0x14ee <follow_path+0x128>
    1688:	e8 e0       	ldi	r30, 0x08	; 8
    168a:	6e 16       	cp	r6, r30
    168c:	71 04       	cpc	r7, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <follow_path+0x2cc>
    1690:	45 cf       	rjmp	.-374    	; 0x151c <follow_path+0x156>
    1692:	8d cf       	rjmp	.-230    	; 0x15ae <follow_path+0x1e8>
    1694:	8f eb       	ldi	r24, 0xBF	; 191
    1696:	81 0f       	add	r24, r17
    1698:	8a 31       	cpi	r24, 0x1A	; 26
    169a:	08 f4       	brcc	.+2      	; 0x169e <follow_path+0x2d8>
    169c:	5c cf       	rjmp	.-328    	; 0x1556 <follow_path+0x190>
    169e:	5d cf       	rjmp	.-326    	; 0x155a <follow_path+0x194>
    16a0:	c2 0e       	add	r12, r18
    16a2:	d3 1e       	adc	r13, r19
    16a4:	84 e0       	ldi	r24, 0x04	; 4
    16a6:	67 cf       	rjmp	.-306    	; 0x1576 <follow_path+0x1b0>
    16a8:	c2 0e       	add	r12, r18
    16aa:	d3 1e       	adc	r13, r19
    16ac:	83 2d       	mov	r24, r3
    16ae:	63 cf       	rjmp	.-314    	; 0x1576 <follow_path+0x1b0>
    16b0:	86 e0       	ldi	r24, 0x06	; 6
    16b2:	26 c0       	rjmp	.+76     	; 0x1700 <follow_path+0x33a>
    16b4:	6a 2d       	mov	r22, r10
    16b6:	79 2d       	mov	r23, r9
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <dir_sdi>
    16c0:	88 23       	and	r24, r24
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <follow_path+0x300>
    16c4:	76 cf       	rjmp	.-276    	; 0x15b2 <follow_path+0x1ec>
    16c6:	0a c0       	rjmp	.+20     	; 0x16dc <follow_path+0x316>
    16c8:	fc 82       	std	Y+4, r15	; 0x04
    16ca:	eb 82       	std	Y+3, r14	; 0x03
    16cc:	da 01       	movw	r26, r20
    16ce:	1b 96       	adiw	r26, 0x0b	; 11
    16d0:	9c 91       	ld	r25, X
    16d2:	92 ff       	sbrs	r25, 2
    16d4:	b7 cf       	rjmp	.-146    	; 0x1644 <follow_path+0x27e>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <follow_path+0x33a>
    16d8:	1c 83       	std	Y+4, r17	; 0x04
    16da:	0b 83       	std	Y+3, r16	; 0x03
    16dc:	ab 81       	ldd	r26, Y+3	; 0x03
    16de:	bc 81       	ldd	r27, Y+4	; 0x04
    16e0:	54 96       	adiw	r26, 0x14	; 20
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	55 97       	sbiw	r26, 0x15	; 21
    16e8:	93 85       	ldd	r25, Z+11	; 0x0b
    16ea:	84 30       	cpi	r24, 0x04	; 4
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <follow_path+0x32a>
    16ee:	98 cf       	rjmp	.-208    	; 0x1620 <follow_path+0x25a>
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <follow_path+0x33a>
    16f2:	1c 83       	std	Y+4, r17	; 0x04
    16f4:	0b 83       	std	Y+3, r16	; 0x03
    16f6:	04 88       	ldd	r0, Z+20	; 0x14
    16f8:	f5 89       	ldd	r31, Z+21	; 0x15
    16fa:	e0 2d       	mov	r30, r0
    16fc:	93 85       	ldd	r25, Z+11	; 0x0b
    16fe:	90 cf       	rjmp	.-224    	; 0x1620 <follow_path+0x25a>
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	7f 90       	pop	r7
    1722:	6f 90       	pop	r6
    1724:	5f 90       	pop	r5
    1726:	4f 90       	pop	r4
    1728:	3f 90       	pop	r3
    172a:	2f 90       	pop	r2
    172c:	08 95       	ret

0000172e <f_mount>:
    172e:	81 11       	cpse	r24, r1
    1730:	12 c0       	rjmp	.+36     	; 0x1756 <f_mount+0x28>
    1732:	e0 91 31 01 	lds	r30, 0x0131
    1736:	f0 91 32 01 	lds	r31, 0x0132
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f0       	breq	.+2      	; 0x1740 <f_mount+0x12>
    173e:	10 82       	st	Z, r1
    1740:	61 15       	cp	r22, r1
    1742:	71 05       	cpc	r23, r1
    1744:	11 f0       	breq	.+4      	; 0x174a <f_mount+0x1c>
    1746:	fb 01       	movw	r30, r22
    1748:	10 82       	st	Z, r1
    174a:	70 93 32 01 	sts	0x0132, r23
    174e:	60 93 31 01 	sts	0x0131, r22
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	08 95       	ret
    1756:	8b e0       	ldi	r24, 0x0B	; 11
    1758:	08 95       	ret

0000175a <f_open>:
    175a:	2f 92       	push	r2
    175c:	3f 92       	push	r3
    175e:	4f 92       	push	r4
    1760:	5f 92       	push	r5
    1762:	6f 92       	push	r6
    1764:	7f 92       	push	r7
    1766:	8f 92       	push	r8
    1768:	9f 92       	push	r9
    176a:	af 92       	push	r10
    176c:	bf 92       	push	r11
    176e:	cf 92       	push	r12
    1770:	df 92       	push	r13
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	ae 97       	sbiw	r28, 0x2e	; 46
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	7c a3       	std	Y+36, r23	; 0x24
    1790:	6b a3       	std	Y+35, r22	; 0x23
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	09 f4       	brne	.+2      	; 0x1798 <f_open+0x3e>
    1796:	63 c1       	rjmp	.+710    	; 0x1a5e <f_open+0x304>
    1798:	14 2f       	mov	r17, r20
    179a:	7c 01       	movw	r14, r24
    179c:	dc 01       	movw	r26, r24
    179e:	1d 92       	st	X+, r1
    17a0:	1c 92       	st	X, r1
    17a2:	4e 71       	andi	r20, 0x1E	; 30
    17a4:	be 01       	movw	r22, r28
    17a6:	6f 5f       	subi	r22, 0xFF	; 255
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	ce 01       	movw	r24, r28
    17ac:	83 96       	adiw	r24, 0x23	; 35
    17ae:	0e 94 c3 01 	call	0x386	; 0x386 <chk_mounted>
    17b2:	81 11       	cpse	r24, r1
    17b4:	9f c1       	rjmp	.+830    	; 0x1af4 <f_open+0x39a>
    17b6:	b1 2f       	mov	r27, r17
    17b8:	bf 71       	andi	r27, 0x1F	; 31
    17ba:	3b 2e       	mov	r3, r27
    17bc:	ce 01       	movw	r24, r28
    17be:	47 96       	adiw	r24, 0x17	; 23
    17c0:	9e 8b       	std	Y+22, r25	; 0x16
    17c2:	8d 8b       	std	Y+21, r24	; 0x15
    17c4:	6b a1       	ldd	r22, Y+35	; 0x23
    17c6:	7c a1       	ldd	r23, Y+36	; 0x24
    17c8:	46 97       	sbiw	r24, 0x16	; 22
    17ca:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <follow_path>
    17ce:	cb 88       	ldd	r12, Y+19	; 0x13
    17d0:	dc 88       	ldd	r13, Y+20	; 0x14
    17d2:	81 11       	cpse	r24, r1
    17d4:	50 c1       	rjmp	.+672    	; 0x1a76 <f_open+0x31c>
    17d6:	c1 14       	cp	r12, r1
    17d8:	d1 04       	cpc	r13, r1
    17da:	09 f0       	breq	.+2      	; 0x17de <f_open+0x84>
    17dc:	47 c1       	rjmp	.+654    	; 0x1a6c <f_open+0x312>
    17de:	41 c1       	rjmp	.+642    	; 0x1a62 <f_open+0x308>
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <f_open+0x8c>
    17e4:	7b c1       	rjmp	.+758    	; 0x1adc <f_open+0x382>
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	0e 94 ce 05 	call	0xb9c	; 0xb9c <dir_sdi>
    17f2:	81 11       	cpse	r24, r1
    17f4:	45 c1       	rjmp	.+650    	; 0x1a80 <f_open+0x326>
    17f6:	4f 85       	ldd	r20, Y+15	; 0x0f
    17f8:	58 89       	ldd	r21, Y+16	; 0x10
    17fa:	69 89       	ldd	r22, Y+17	; 0x11
    17fc:	7a 89       	ldd	r23, Y+18	; 0x12
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
    1806:	81 11       	cpse	r24, r1
    1808:	3b c1       	rjmp	.+630    	; 0x1a80 <f_open+0x326>
    180a:	eb 89       	ldd	r30, Y+19	; 0x13
    180c:	fc 89       	ldd	r31, Y+20	; 0x14
    180e:	80 81       	ld	r24, Z
    1810:	85 3e       	cpi	r24, 0xE5	; 229
    1812:	09 f4       	brne	.+2      	; 0x1816 <f_open+0xbc>
    1814:	3e c1       	rjmp	.+636    	; 0x1a92 <f_open+0x338>
    1816:	88 23       	and	r24, r24
    1818:	09 f4       	brne	.+2      	; 0x181c <f_open+0xc2>
    181a:	3b c1       	rjmp	.+630    	; 0x1a92 <f_open+0x338>
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	0e 94 ab 08 	call	0x1156	; 0x1156 <dir_next>
    1828:	88 23       	and	r24, r24
    182a:	29 f3       	breq	.-54     	; 0x17f6 <f_open+0x9c>
    182c:	29 c1       	rjmp	.+594    	; 0x1a80 <f_open+0x326>
    182e:	eb 89       	ldd	r30, Y+19	; 0x13
    1830:	fc 89       	ldd	r31, Y+20	; 0x14
    1832:	cf 01       	movw	r24, r30
    1834:	80 96       	adiw	r24, 0x20	; 32
    1836:	11 92       	st	Z+, r1
    1838:	e8 17       	cp	r30, r24
    183a:	f9 07       	cpc	r31, r25
    183c:	e1 f7       	brne	.-8      	; 0x1836 <f_open+0xdc>
    183e:	6d 89       	ldd	r22, Y+21	; 0x15
    1840:	7e 89       	ldd	r23, Y+22	; 0x16
    1842:	4b e0       	ldi	r20, 0x0B	; 11
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	8b 89       	ldd	r24, Y+19	; 0x13
    1848:	9c 89       	ldd	r25, Y+20	; 0x14
    184a:	0e 94 79 00 	call	0xf2	; 0xf2 <mem_cpy>
    184e:	e9 81       	ldd	r30, Y+1	; 0x01
    1850:	fa 81       	ldd	r31, Y+2	; 0x02
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	84 83       	std	Z+4, r24	; 0x04
    1856:	e3 2d       	mov	r30, r3
    1858:	e8 60       	ori	r30, 0x08	; 8
    185a:	3e 2e       	mov	r3, r30
    185c:	cb 88       	ldd	r12, Y+19	; 0x13
    185e:	dc 88       	ldd	r13, Y+20	; 0x14
    1860:	08 c0       	rjmp	.+16     	; 0x1872 <f_open+0x118>
    1862:	d6 01       	movw	r26, r12
    1864:	1b 96       	adiw	r26, 0x0b	; 11
    1866:	8c 91       	ld	r24, X
    1868:	81 71       	andi	r24, 0x11	; 17
    186a:	09 f0       	breq	.+2      	; 0x186e <f_open+0x114>
    186c:	1d c1       	rjmp	.+570    	; 0x1aa8 <f_open+0x34e>
    186e:	12 fd       	sbrc	r17, 2
    1870:	1d c1       	rjmp	.+570    	; 0x1aac <f_open+0x352>
    1872:	33 fe       	sbrs	r3, 3
    1874:	b7 c0       	rjmp	.+366    	; 0x19e4 <f_open+0x28a>
    1876:	0e 94 89 18 	call	0x3112	; 0x3112 <get_fattime>
    187a:	f6 01       	movw	r30, r12
    187c:	66 87       	std	Z+14, r22	; 0x0e
    187e:	77 87       	std	Z+15, r23	; 0x0f
    1880:	80 8b       	std	Z+16, r24	; 0x10
    1882:	91 8b       	std	Z+17, r25	; 0x11
    1884:	13 86       	std	Z+11, r1	; 0x0b
    1886:	14 8e       	std	Z+28, r1	; 0x1c
    1888:	15 8e       	std	Z+29, r1	; 0x1d
    188a:	16 8e       	std	Z+30, r1	; 0x1e
    188c:	17 8e       	std	Z+31, r1	; 0x1f
    188e:	e9 81       	ldd	r30, Y+1	; 0x01
    1890:	fa 81       	ldd	r31, Y+2	; 0x02
    1892:	fe a3       	std	Y+38, r31	; 0x26
    1894:	ed a3       	std	Y+37, r30	; 0x25
    1896:	b6 01       	movw	r22, r12
    1898:	cf 01       	movw	r24, r30
    189a:	0e 94 a5 00 	call	0x14a	; 0x14a <ld_clust>
    189e:	4b 01       	movw	r8, r22
    18a0:	5c 01       	movw	r10, r24
    18a2:	d6 01       	movw	r26, r12
    18a4:	5b 96       	adiw	r26, 0x1b	; 27
    18a6:	1c 92       	st	X, r1
    18a8:	1e 92       	st	-X, r1
    18aa:	5a 97       	sbiw	r26, 0x1a	; 26
    18ac:	55 96       	adiw	r26, 0x15	; 21
    18ae:	1c 92       	st	X, r1
    18b0:	1e 92       	st	-X, r1
    18b2:	54 97       	sbiw	r26, 0x14	; 20
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	ed a1       	ldd	r30, Y+37	; 0x25
    18b8:	fe a1       	ldd	r31, Y+38	; 0x26
    18ba:	84 83       	std	Z+4, r24	; 0x04
    18bc:	81 14       	cp	r8, r1
    18be:	91 04       	cpc	r9, r1
    18c0:	a1 04       	cpc	r10, r1
    18c2:	b1 04       	cpc	r11, r1
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <f_open+0x16e>
    18c6:	8e c0       	rjmp	.+284    	; 0x19e4 <f_open+0x28a>
    18c8:	22 a9       	ldd	r18, Z+50	; 0x32
    18ca:	33 a9       	ldd	r19, Z+51	; 0x33
    18cc:	44 a9       	ldd	r20, Z+52	; 0x34
    18ce:	55 a9       	ldd	r21, Z+53	; 0x35
    18d0:	2b a7       	std	Y+43, r18	; 0x2b
    18d2:	3c a7       	std	Y+44, r19	; 0x2c
    18d4:	4d a7       	std	Y+45, r20	; 0x2d
    18d6:	5e a7       	std	Y+46, r21	; 0x2e
    18d8:	b2 e0       	ldi	r27, 0x02	; 2
    18da:	8b 16       	cp	r8, r27
    18dc:	91 04       	cpc	r9, r1
    18de:	a1 04       	cpc	r10, r1
    18e0:	b1 04       	cpc	r11, r1
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <f_open+0x18c>
    18e4:	e8 c0       	rjmp	.+464    	; 0x1ab6 <f_open+0x35c>
    18e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    18e8:	93 8d       	ldd	r25, Z+27	; 0x1b
    18ea:	a4 8d       	ldd	r26, Z+28	; 0x1c
    18ec:	b5 8d       	ldd	r27, Z+29	; 0x1d
    18ee:	88 16       	cp	r8, r24
    18f0:	99 06       	cpc	r9, r25
    18f2:	aa 06       	cpc	r10, r26
    18f4:	bb 06       	cpc	r11, r27
    18f6:	08 f0       	brcs	.+2      	; 0x18fa <f_open+0x1a0>
    18f8:	e0 c0       	rjmp	.+448    	; 0x1aba <f_open+0x360>
    18fa:	8f a2       	std	Y+39, r8	; 0x27
    18fc:	98 a6       	std	Y+40, r9	; 0x28
    18fe:	a9 a6       	std	Y+41, r10	; 0x29
    1900:	ba a6       	std	Y+42, r11	; 0x2a
    1902:	22 24       	eor	r2, r2
    1904:	23 94       	inc	r2
    1906:	43 c0       	rjmp	.+134    	; 0x198e <f_open+0x234>
    1908:	4f a1       	ldd	r20, Y+39	; 0x27
    190a:	58 a5       	ldd	r21, Y+40	; 0x28
    190c:	69 a5       	ldd	r22, Y+41	; 0x29
    190e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1910:	8d a1       	ldd	r24, Y+37	; 0x25
    1912:	9e a1       	ldd	r25, Y+38	; 0x26
    1914:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <get_fat>
    1918:	2b 01       	movw	r4, r22
    191a:	3c 01       	movw	r6, r24
    191c:	61 15       	cp	r22, r1
    191e:	71 05       	cpc	r23, r1
    1920:	81 05       	cpc	r24, r1
    1922:	91 05       	cpc	r25, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <f_open+0x1ce>
    1926:	43 c0       	rjmp	.+134    	; 0x19ae <f_open+0x254>
    1928:	61 30       	cpi	r22, 0x01	; 1
    192a:	71 05       	cpc	r23, r1
    192c:	81 05       	cpc	r24, r1
    192e:	91 05       	cpc	r25, r1
    1930:	09 f4       	brne	.+2      	; 0x1934 <f_open+0x1da>
    1932:	c5 c0       	rjmp	.+394    	; 0x1abe <f_open+0x364>
    1934:	6f 3f       	cpi	r22, 0xFF	; 255
    1936:	7f 4f       	sbci	r23, 0xFF	; 255
    1938:	8f 4f       	sbci	r24, 0xFF	; 255
    193a:	9f 4f       	sbci	r25, 0xFF	; 255
    193c:	09 f4       	brne	.+2      	; 0x1940 <f_open+0x1e6>
    193e:	c1 c0       	rjmp	.+386    	; 0x1ac2 <f_open+0x368>
    1940:	00 e0       	ldi	r16, 0x00	; 0
    1942:	10 e0       	ldi	r17, 0x00	; 0
    1944:	98 01       	movw	r18, r16
    1946:	4f a1       	ldd	r20, Y+39	; 0x27
    1948:	58 a5       	ldd	r21, Y+40	; 0x28
    194a:	69 a5       	ldd	r22, Y+41	; 0x29
    194c:	7a a5       	ldd	r23, Y+42	; 0x2a
    194e:	8d a1       	ldd	r24, Y+37	; 0x25
    1950:	9e a1       	ldd	r25, Y+38	; 0x26
    1952:	0e 94 87 06 	call	0xd0e	; 0xd0e <put_fat>
    1956:	81 11       	cpse	r24, r1
    1958:	b5 c0       	rjmp	.+362    	; 0x1ac4 <f_open+0x36a>
    195a:	ed a1       	ldd	r30, Y+37	; 0x25
    195c:	fe a1       	ldd	r31, Y+38	; 0x26
    195e:	86 85       	ldd	r24, Z+14	; 0x0e
    1960:	97 85       	ldd	r25, Z+15	; 0x0f
    1962:	a0 89       	ldd	r26, Z+16	; 0x10
    1964:	b1 89       	ldd	r27, Z+17	; 0x11
    1966:	8f 3f       	cpi	r24, 0xFF	; 255
    1968:	ff ef       	ldi	r31, 0xFF	; 255
    196a:	9f 07       	cpc	r25, r31
    196c:	af 07       	cpc	r26, r31
    196e:	bf 07       	cpc	r27, r31
    1970:	51 f0       	breq	.+20     	; 0x1986 <f_open+0x22c>
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	a1 1d       	adc	r26, r1
    1976:	b1 1d       	adc	r27, r1
    1978:	ed a1       	ldd	r30, Y+37	; 0x25
    197a:	fe a1       	ldd	r31, Y+38	; 0x26
    197c:	86 87       	std	Z+14, r24	; 0x0e
    197e:	97 87       	std	Z+15, r25	; 0x0f
    1980:	a0 8b       	std	Z+16, r26	; 0x10
    1982:	b1 8b       	std	Z+17, r27	; 0x11
    1984:	25 82       	std	Z+5, r2	; 0x05
    1986:	4f a2       	std	Y+39, r4	; 0x27
    1988:	58 a6       	std	Y+40, r5	; 0x28
    198a:	69 a6       	std	Y+41, r6	; 0x29
    198c:	7a a6       	std	Y+42, r7	; 0x2a
    198e:	ed a1       	ldd	r30, Y+37	; 0x25
    1990:	fe a1       	ldd	r31, Y+38	; 0x26
    1992:	82 8d       	ldd	r24, Z+26	; 0x1a
    1994:	93 8d       	ldd	r25, Z+27	; 0x1b
    1996:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1998:	b5 8d       	ldd	r27, Z+29	; 0x1d
    199a:	2f a1       	ldd	r18, Y+39	; 0x27
    199c:	38 a5       	ldd	r19, Y+40	; 0x28
    199e:	49 a5       	ldd	r20, Y+41	; 0x29
    19a0:	5a a5       	ldd	r21, Y+42	; 0x2a
    19a2:	28 17       	cp	r18, r24
    19a4:	39 07       	cpc	r19, r25
    19a6:	4a 07       	cpc	r20, r26
    19a8:	5b 07       	cpc	r21, r27
    19aa:	08 f4       	brcc	.+2      	; 0x19ae <f_open+0x254>
    19ac:	ad cf       	rjmp	.-166    	; 0x1908 <f_open+0x1ae>
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	9a 81       	ldd	r25, Y+2	; 0x02
    19b2:	31 e0       	ldi	r19, 0x01	; 1
    19b4:	83 1a       	sub	r8, r19
    19b6:	91 08       	sbc	r9, r1
    19b8:	a1 08       	sbc	r10, r1
    19ba:	b1 08       	sbc	r11, r1
    19bc:	dc 01       	movw	r26, r24
    19be:	1a 96       	adiw	r26, 0x0a	; 10
    19c0:	8d 92       	st	X+, r8
    19c2:	9d 92       	st	X+, r9
    19c4:	ad 92       	st	X+, r10
    19c6:	bc 92       	st	X, r11
    19c8:	1d 97       	sbiw	r26, 0x0d	; 13
    19ca:	4b a5       	ldd	r20, Y+43	; 0x2b
    19cc:	5c a5       	ldd	r21, Y+44	; 0x2c
    19ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    19d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    19d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
    19d6:	88 23       	and	r24, r24
    19d8:	39 f0       	breq	.+14     	; 0x19e8 <f_open+0x28e>
    19da:	8c c0       	rjmp	.+280    	; 0x1af4 <f_open+0x39a>
    19dc:	11 ff       	sbrs	r17, 1
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <f_open+0x28a>
    19e0:	80 fd       	sbrc	r24, 0
    19e2:	74 c0       	rjmp	.+232    	; 0x1acc <f_open+0x372>
    19e4:	33 fe       	sbrs	r3, 3
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <f_open+0x294>
    19e8:	b3 2d       	mov	r27, r3
    19ea:	b0 62       	ori	r27, 0x20	; 32
    19ec:	3b 2e       	mov	r3, r27
    19ee:	e9 81       	ldd	r30, Y+1	; 0x01
    19f0:	fa 81       	ldd	r31, Y+2	; 0x02
    19f2:	82 a9       	ldd	r24, Z+50	; 0x32
    19f4:	93 a9       	ldd	r25, Z+51	; 0x33
    19f6:	a4 a9       	ldd	r26, Z+52	; 0x34
    19f8:	b5 a9       	ldd	r27, Z+53	; 0x35
    19fa:	f7 01       	movw	r30, r14
    19fc:	82 8f       	std	Z+26, r24	; 0x1a
    19fe:	93 8f       	std	Z+27, r25	; 0x1b
    1a00:	a4 8f       	std	Z+28, r26	; 0x1c
    1a02:	b5 8f       	std	Z+29, r27	; 0x1d
    1a04:	d7 8e       	std	Z+31, r13	; 0x1f
    1a06:	c6 8e       	std	Z+30, r12	; 0x1e
    1a08:	d7 01       	movw	r26, r14
    1a0a:	14 96       	adiw	r26, 0x04	; 4
    1a0c:	3c 92       	st	X, r3
    1a0e:	a9 80       	ldd	r10, Y+1	; 0x01
    1a10:	ba 80       	ldd	r11, Y+2	; 0x02
    1a12:	b6 01       	movw	r22, r12
    1a14:	c5 01       	movw	r24, r10
    1a16:	0e 94 a5 00 	call	0x14a	; 0x14a <ld_clust>
    1a1a:	f7 01       	movw	r30, r14
    1a1c:	66 87       	std	Z+14, r22	; 0x0e
    1a1e:	77 87       	std	Z+15, r23	; 0x0f
    1a20:	80 8b       	std	Z+16, r24	; 0x10
    1a22:	91 8b       	std	Z+17, r25	; 0x11
    1a24:	f6 01       	movw	r30, r12
    1a26:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a28:	95 8d       	ldd	r25, Z+29	; 0x1d
    1a2a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1a2c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1a2e:	f7 01       	movw	r30, r14
    1a30:	82 87       	std	Z+10, r24	; 0x0a
    1a32:	93 87       	std	Z+11, r25	; 0x0b
    1a34:	a4 87       	std	Z+12, r26	; 0x0c
    1a36:	b5 87       	std	Z+13, r27	; 0x0d
    1a38:	16 82       	std	Z+6, r1	; 0x06
    1a3a:	17 82       	std	Z+7, r1	; 0x07
    1a3c:	10 86       	std	Z+8, r1	; 0x08
    1a3e:	11 86       	std	Z+9, r1	; 0x09
    1a40:	16 8a       	std	Z+22, r1	; 0x16
    1a42:	17 8a       	std	Z+23, r1	; 0x17
    1a44:	10 8e       	std	Z+24, r1	; 0x18
    1a46:	11 8e       	std	Z+25, r1	; 0x19
    1a48:	b1 82       	std	Z+1, r11	; 0x01
    1a4a:	a0 82       	st	Z, r10
    1a4c:	d5 01       	movw	r26, r10
    1a4e:	16 96       	adiw	r26, 0x06	; 6
    1a50:	8d 91       	ld	r24, X+
    1a52:	9c 91       	ld	r25, X
    1a54:	17 97       	sbiw	r26, 0x07	; 7
    1a56:	93 83       	std	Z+3, r25	; 0x03
    1a58:	82 83       	std	Z+2, r24	; 0x02
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	4b c0       	rjmp	.+150    	; 0x1af4 <f_open+0x39a>
    1a5e:	89 e0       	ldi	r24, 0x09	; 9
    1a60:	49 c0       	rjmp	.+146    	; 0x1af4 <f_open+0x39a>
    1a62:	41 2f       	mov	r20, r17
    1a64:	4c 71       	andi	r20, 0x1C	; 28
    1a66:	c9 f5       	brne	.+114    	; 0x1ada <f_open+0x380>
    1a68:	86 e0       	ldi	r24, 0x06	; 6
    1a6a:	33 c0       	rjmp	.+102    	; 0x1ad2 <f_open+0x378>
    1a6c:	81 2f       	mov	r24, r17
    1a6e:	8c 71       	andi	r24, 0x1C	; 28
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <f_open+0x31a>
    1a72:	f7 ce       	rjmp	.-530    	; 0x1862 <f_open+0x108>
    1a74:	39 c0       	rjmp	.+114    	; 0x1ae8 <f_open+0x38e>
    1a76:	41 2f       	mov	r20, r17
    1a78:	4c 71       	andi	r20, 0x1C	; 28
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <f_open+0x324>
    1a7c:	b1 ce       	rjmp	.-670    	; 0x17e0 <f_open+0x86>
    1a7e:	29 c0       	rjmp	.+82     	; 0x1ad2 <f_open+0x378>
    1a80:	b3 2d       	mov	r27, r3
    1a82:	b8 60       	ori	r27, 0x08	; 8
    1a84:	3b 2e       	mov	r3, r27
    1a86:	cb 88       	ldd	r12, Y+19	; 0x13
    1a88:	dc 88       	ldd	r13, Y+20	; 0x14
    1a8a:	88 23       	and	r24, r24
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <f_open+0x336>
    1a8e:	f1 ce       	rjmp	.-542    	; 0x1872 <f_open+0x118>
    1a90:	20 c0       	rjmp	.+64     	; 0x1ad2 <f_open+0x378>
    1a92:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a94:	58 89       	ldd	r21, Y+16	; 0x10
    1a96:	69 89       	ldd	r22, Y+17	; 0x11
    1a98:	7a 89       	ldd	r23, Y+18	; 0x12
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	1b c0       	rjmp	.+54     	; 0x1adc <f_open+0x382>
    1aa6:	c3 ce       	rjmp	.-634    	; 0x182e <f_open+0xd4>
    1aa8:	87 e0       	ldi	r24, 0x07	; 7
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <f_open+0x354>
    1aac:	88 e0       	ldi	r24, 0x08	; 8
    1aae:	88 23       	and	r24, r24
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <f_open+0x35a>
    1ab2:	98 cf       	rjmp	.-208    	; 0x19e4 <f_open+0x28a>
    1ab4:	1f c0       	rjmp	.+62     	; 0x1af4 <f_open+0x39a>
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <f_open+0x36a>
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <f_open+0x36a>
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	01 c0       	rjmp	.+2      	; 0x1ac4 <f_open+0x36a>
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	88 23       	and	r24, r24
    1ac6:	09 f4       	brne	.+2      	; 0x1aca <f_open+0x370>
    1ac8:	8f cf       	rjmp	.-226    	; 0x19e8 <f_open+0x28e>
    1aca:	14 c0       	rjmp	.+40     	; 0x1af4 <f_open+0x39a>
    1acc:	87 e0       	ldi	r24, 0x07	; 7
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <f_open+0x378>
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	88 23       	and	r24, r24
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <f_open+0x37e>
    1ad6:	98 cf       	rjmp	.-208    	; 0x1a08 <f_open+0x2ae>
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <f_open+0x39a>
    1ada:	86 e0       	ldi	r24, 0x06	; 6
    1adc:	e3 2d       	mov	r30, r3
    1ade:	e8 60       	ori	r30, 0x08	; 8
    1ae0:	3e 2e       	mov	r3, r30
    1ae2:	cb 88       	ldd	r12, Y+19	; 0x13
    1ae4:	dc 88       	ldd	r13, Y+20	; 0x14
    1ae6:	f5 cf       	rjmp	.-22     	; 0x1ad2 <f_open+0x378>
    1ae8:	d6 01       	movw	r26, r12
    1aea:	1b 96       	adiw	r26, 0x0b	; 11
    1aec:	8c 91       	ld	r24, X
    1aee:	84 fd       	sbrc	r24, 4
    1af0:	ef cf       	rjmp	.-34     	; 0x1ad0 <f_open+0x376>
    1af2:	74 cf       	rjmp	.-280    	; 0x19dc <f_open+0x282>
    1af4:	ae 96       	adiw	r28, 0x2e	; 46
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	bf 90       	pop	r11
    1b12:	af 90       	pop	r10
    1b14:	9f 90       	pop	r9
    1b16:	8f 90       	pop	r8
    1b18:	7f 90       	pop	r7
    1b1a:	6f 90       	pop	r6
    1b1c:	5f 90       	pop	r5
    1b1e:	4f 90       	pop	r4
    1b20:	3f 90       	pop	r3
    1b22:	2f 90       	pop	r2
    1b24:	08 95       	ret

00001b26 <f_write>:
    1b26:	2f 92       	push	r2
    1b28:	3f 92       	push	r3
    1b2a:	4f 92       	push	r4
    1b2c:	5f 92       	push	r5
    1b2e:	6f 92       	push	r6
    1b30:	7f 92       	push	r7
    1b32:	8f 92       	push	r8
    1b34:	9f 92       	push	r9
    1b36:	af 92       	push	r10
    1b38:	bf 92       	push	r11
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	ec 01       	movw	r28, r24
    1b4c:	4b 01       	movw	r8, r22
    1b4e:	6a 01       	movw	r12, r20
    1b50:	59 01       	movw	r10, r18
    1b52:	f9 01       	movw	r30, r18
    1b54:	11 82       	std	Z+1, r1	; 0x01
    1b56:	10 82       	st	Z, r1
    1b58:	0e 94 9e 01 	call	0x33c	; 0x33c <validate>
    1b5c:	81 11       	cpse	r24, r1
    1b5e:	74 c1       	rjmp	.+744    	; 0x1e48 <f_write+0x322>
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	88 23       	and	r24, r24
    1b64:	0c f4       	brge	.+2      	; 0x1b68 <f_write+0x42>
    1b66:	6d c1       	rjmp	.+730    	; 0x1e42 <f_write+0x31c>
    1b68:	81 ff       	sbrs	r24, 1
    1b6a:	6d c1       	rjmp	.+730    	; 0x1e46 <f_write+0x320>
    1b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b70:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b72:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b74:	ac 01       	movw	r20, r24
    1b76:	bd 01       	movw	r22, r26
    1b78:	4c 0d       	add	r20, r12
    1b7a:	5d 1d       	adc	r21, r13
    1b7c:	61 1d       	adc	r22, r1
    1b7e:	71 1d       	adc	r23, r1
    1b80:	48 17       	cp	r20, r24
    1b82:	59 07       	cpc	r21, r25
    1b84:	6a 07       	cpc	r22, r26
    1b86:	7b 07       	cpc	r23, r27
    1b88:	08 f4       	brcc	.+2      	; 0x1b8c <f_write+0x66>
    1b8a:	45 c1       	rjmp	.+650    	; 0x1e16 <f_write+0x2f0>
    1b8c:	c1 14       	cp	r12, r1
    1b8e:	d1 04       	cpc	r13, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <f_write+0x6e>
    1b92:	41 c1       	rjmp	.+642    	; 0x1e16 <f_write+0x2f0>
    1b94:	4e 81       	ldd	r20, Y+6	; 0x06
    1b96:	5f 81       	ldd	r21, Y+7	; 0x07
    1b98:	68 85       	ldd	r22, Y+8	; 0x08
    1b9a:	79 85       	ldd	r23, Y+9	; 0x09
    1b9c:	db 01       	movw	r26, r22
    1b9e:	ca 01       	movw	r24, r20
    1ba0:	91 70       	andi	r25, 0x01	; 1
    1ba2:	aa 27       	eor	r26, r26
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	89 2b       	or	r24, r25
    1ba8:	8a 2b       	or	r24, r26
    1baa:	8b 2b       	or	r24, r27
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <f_write+0x8a>
    1bae:	eb c0       	rjmp	.+470    	; 0x1d86 <f_write+0x260>
    1bb0:	e8 81       	ld	r30, Y
    1bb2:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb4:	12 81       	ldd	r17, Z+2	; 0x02
    1bb6:	11 50       	subi	r17, 0x01	; 1
    1bb8:	db 01       	movw	r26, r22
    1bba:	ca 01       	movw	r24, r20
    1bbc:	07 2e       	mov	r0, r23
    1bbe:	79 e0       	ldi	r23, 0x09	; 9
    1bc0:	b6 95       	lsr	r27
    1bc2:	a7 95       	ror	r26
    1bc4:	97 95       	ror	r25
    1bc6:	87 95       	ror	r24
    1bc8:	7a 95       	dec	r23
    1bca:	d1 f7       	brne	.-12     	; 0x1bc0 <f_write+0x9a>
    1bcc:	70 2d       	mov	r23, r0
    1bce:	18 23       	and	r17, r24
    1bd0:	f1 f5       	brne	.+124    	; 0x1c4e <f_write+0x128>
    1bd2:	45 2b       	or	r20, r21
    1bd4:	46 2b       	or	r20, r22
    1bd6:	47 2b       	or	r20, r23
    1bd8:	a1 f4       	brne	.+40     	; 0x1c02 <f_write+0xdc>
    1bda:	6e 85       	ldd	r22, Y+14	; 0x0e
    1bdc:	7f 85       	ldd	r23, Y+15	; 0x0f
    1bde:	88 89       	ldd	r24, Y+16	; 0x10
    1be0:	99 89       	ldd	r25, Y+17	; 0x11
    1be2:	61 15       	cp	r22, r1
    1be4:	71 05       	cpc	r23, r1
    1be6:	81 05       	cpc	r24, r1
    1be8:	91 05       	cpc	r25, r1
    1bea:	c1 f4       	brne	.+48     	; 0x1c1c <f_write+0xf6>
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	ba 01       	movw	r22, r20
    1bf2:	cf 01       	movw	r24, r30
    1bf4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <create_chain>
    1bf8:	6e 87       	std	Y+14, r22	; 0x0e
    1bfa:	7f 87       	std	Y+15, r23	; 0x0f
    1bfc:	88 8b       	std	Y+16, r24	; 0x10
    1bfe:	99 8b       	std	Y+17, r25	; 0x11
    1c00:	07 c0       	rjmp	.+14     	; 0x1c10 <f_write+0xea>
    1c02:	4a 89       	ldd	r20, Y+18	; 0x12
    1c04:	5b 89       	ldd	r21, Y+19	; 0x13
    1c06:	6c 89       	ldd	r22, Y+20	; 0x14
    1c08:	7d 89       	ldd	r23, Y+21	; 0x15
    1c0a:	cf 01       	movw	r24, r30
    1c0c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <create_chain>
    1c10:	61 15       	cp	r22, r1
    1c12:	71 05       	cpc	r23, r1
    1c14:	81 05       	cpc	r24, r1
    1c16:	91 05       	cpc	r25, r1
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <f_write+0xf6>
    1c1a:	fd c0       	rjmp	.+506    	; 0x1e16 <f_write+0x2f0>
    1c1c:	61 30       	cpi	r22, 0x01	; 1
    1c1e:	71 05       	cpc	r23, r1
    1c20:	81 05       	cpc	r24, r1
    1c22:	91 05       	cpc	r25, r1
    1c24:	29 f4       	brne	.+10     	; 0x1c30 <f_write+0x10a>
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	80 68       	ori	r24, 0x80	; 128
    1c2a:	8c 83       	std	Y+4, r24	; 0x04
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	0c c1       	rjmp	.+536    	; 0x1e48 <f_write+0x322>
    1c30:	6f 3f       	cpi	r22, 0xFF	; 255
    1c32:	ff ef       	ldi	r31, 0xFF	; 255
    1c34:	7f 07       	cpc	r23, r31
    1c36:	8f 07       	cpc	r24, r31
    1c38:	9f 07       	cpc	r25, r31
    1c3a:	29 f4       	brne	.+10     	; 0x1c46 <f_write+0x120>
    1c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	8c 83       	std	Y+4, r24	; 0x04
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	01 c1       	rjmp	.+514    	; 0x1e48 <f_write+0x322>
    1c46:	6a 8b       	std	Y+18, r22	; 0x12
    1c48:	7b 8b       	std	Y+19, r23	; 0x13
    1c4a:	8c 8b       	std	Y+20, r24	; 0x14
    1c4c:	9d 8b       	std	Y+21, r25	; 0x15
    1c4e:	e8 81       	ld	r30, Y
    1c50:	f9 81       	ldd	r31, Y+1	; 0x01
    1c52:	42 a9       	ldd	r20, Z+50	; 0x32
    1c54:	53 a9       	ldd	r21, Z+51	; 0x33
    1c56:	64 a9       	ldd	r22, Z+52	; 0x34
    1c58:	75 a9       	ldd	r23, Z+53	; 0x35
    1c5a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c5c:	9f 89       	ldd	r25, Y+23	; 0x17
    1c5e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1c60:	b9 8d       	ldd	r27, Y+25	; 0x19
    1c62:	48 17       	cp	r20, r24
    1c64:	59 07       	cpc	r21, r25
    1c66:	6a 07       	cpc	r22, r26
    1c68:	7b 07       	cpc	r23, r27
    1c6a:	51 f4       	brne	.+20     	; 0x1c80 <f_write+0x15a>
    1c6c:	cf 01       	movw	r24, r30
    1c6e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sync_window>
    1c72:	88 23       	and	r24, r24
    1c74:	29 f0       	breq	.+10     	; 0x1c80 <f_write+0x15a>
    1c76:	8c 81       	ldd	r24, Y+4	; 0x04
    1c78:	80 68       	ori	r24, 0x80	; 128
    1c7a:	8c 83       	std	Y+4, r24	; 0x04
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	e4 c0       	rjmp	.+456    	; 0x1e48 <f_write+0x322>
    1c80:	28 80       	ld	r2, Y
    1c82:	39 80       	ldd	r3, Y+1	; 0x01
    1c84:	4a 89       	ldd	r20, Y+18	; 0x12
    1c86:	5b 89       	ldd	r21, Y+19	; 0x13
    1c88:	6c 89       	ldd	r22, Y+20	; 0x14
    1c8a:	7d 89       	ldd	r23, Y+21	; 0x15
    1c8c:	c1 01       	movw	r24, r2
    1c8e:	0e 94 bd 04 	call	0x97a	; 0x97a <clust2sect>
    1c92:	61 15       	cp	r22, r1
    1c94:	71 05       	cpc	r23, r1
    1c96:	81 05       	cpc	r24, r1
    1c98:	91 05       	cpc	r25, r1
    1c9a:	29 f4       	brne	.+10     	; 0x1ca6 <f_write+0x180>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	80 68       	ori	r24, 0x80	; 128
    1ca0:	8c 83       	std	Y+4, r24	; 0x04
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	d1 c0       	rjmp	.+418    	; 0x1e48 <f_write+0x322>
    1ca6:	2b 01       	movw	r4, r22
    1ca8:	3c 01       	movw	r6, r24
    1caa:	41 0e       	add	r4, r17
    1cac:	51 1c       	adc	r5, r1
    1cae:	61 1c       	adc	r6, r1
    1cb0:	71 1c       	adc	r7, r1
    1cb2:	76 01       	movw	r14, r12
    1cb4:	ef 2c       	mov	r14, r15
    1cb6:	ff 24       	eor	r15, r15
    1cb8:	e6 94       	lsr	r14
    1cba:	e1 14       	cp	r14, r1
    1cbc:	f1 04       	cpc	r15, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <f_write+0x19c>
    1cc0:	41 c0       	rjmp	.+130    	; 0x1d44 <f_write+0x21e>
    1cc2:	f1 01       	movw	r30, r2
    1cc4:	42 81       	ldd	r20, Z+2	; 0x02
    1cc6:	24 2f       	mov	r18, r20
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	c7 01       	movw	r24, r14
    1ccc:	81 0f       	add	r24, r17
    1cce:	91 1d       	adc	r25, r1
    1cd0:	28 17       	cp	r18, r24
    1cd2:	39 07       	cpc	r19, r25
    1cd4:	18 f4       	brcc	.+6      	; 0x1cdc <f_write+0x1b6>
    1cd6:	79 01       	movw	r14, r18
    1cd8:	e1 1a       	sub	r14, r17
    1cda:	f1 08       	sbc	r15, r1
    1cdc:	0e 2d       	mov	r16, r14
    1cde:	a3 01       	movw	r20, r6
    1ce0:	92 01       	movw	r18, r4
    1ce2:	b4 01       	movw	r22, r8
    1ce4:	f1 01       	movw	r30, r2
    1ce6:	81 81       	ldd	r24, Z+1	; 0x01
    1ce8:	0e 94 91 14 	call	0x2922	; 0x2922 <disk_write>
    1cec:	88 23       	and	r24, r24
    1cee:	29 f0       	breq	.+10     	; 0x1cfa <f_write+0x1d4>
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	80 68       	ori	r24, 0x80	; 128
    1cf4:	8c 83       	std	Y+4, r24	; 0x04
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	a7 c0       	rjmp	.+334    	; 0x1e48 <f_write+0x322>
    1cfa:	e8 81       	ld	r30, Y
    1cfc:	f9 81       	ldd	r31, Y+1	; 0x01
    1cfe:	82 a9       	ldd	r24, Z+50	; 0x32
    1d00:	93 a9       	ldd	r25, Z+51	; 0x33
    1d02:	a4 a9       	ldd	r26, Z+52	; 0x34
    1d04:	b5 a9       	ldd	r27, Z+53	; 0x35
    1d06:	84 19       	sub	r24, r4
    1d08:	95 09       	sbc	r25, r5
    1d0a:	a6 09       	sbc	r26, r6
    1d0c:	b7 09       	sbc	r27, r7
    1d0e:	a7 01       	movw	r20, r14
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	84 17       	cp	r24, r20
    1d16:	95 07       	cpc	r25, r21
    1d18:	a6 07       	cpc	r26, r22
    1d1a:	b7 07       	cpc	r27, r23
    1d1c:	78 f4       	brcc	.+30     	; 0x1d3c <f_write+0x216>
    1d1e:	98 2f       	mov	r25, r24
    1d20:	88 27       	eor	r24, r24
    1d22:	99 0f       	add	r25, r25
    1d24:	b4 01       	movw	r22, r8
    1d26:	68 0f       	add	r22, r24
    1d28:	79 1f       	adc	r23, r25
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	52 e0       	ldi	r21, 0x02	; 2
    1d2e:	cf 01       	movw	r24, r30
    1d30:	c6 96       	adiw	r24, 0x36	; 54
    1d32:	0e 94 79 00 	call	0xf2	; 0xf2 <mem_cpy>
    1d36:	e8 81       	ld	r30, Y
    1d38:	f9 81       	ldd	r31, Y+1	; 0x01
    1d3a:	14 82       	std	Z+4, r1	; 0x04
    1d3c:	fe 2c       	mov	r15, r14
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 0c       	add	r15, r15
    1d42:	50 c0       	rjmp	.+160    	; 0x1de4 <f_write+0x2be>
    1d44:	4e 81       	ldd	r20, Y+6	; 0x06
    1d46:	5f 81       	ldd	r21, Y+7	; 0x07
    1d48:	68 85       	ldd	r22, Y+8	; 0x08
    1d4a:	79 85       	ldd	r23, Y+9	; 0x09
    1d4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d50:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d52:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d54:	48 17       	cp	r20, r24
    1d56:	59 07       	cpc	r21, r25
    1d58:	6a 07       	cpc	r22, r26
    1d5a:	7b 07       	cpc	r23, r27
    1d5c:	80 f0       	brcs	.+32     	; 0x1d7e <f_write+0x258>
    1d5e:	c1 01       	movw	r24, r2
    1d60:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sync_window>
    1d64:	88 23       	and	r24, r24
    1d66:	29 f0       	breq	.+10     	; 0x1d72 <f_write+0x24c>
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	80 68       	ori	r24, 0x80	; 128
    1d6c:	8c 83       	std	Y+4, r24	; 0x04
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	6b c0       	rjmp	.+214    	; 0x1e48 <f_write+0x322>
    1d72:	e8 81       	ld	r30, Y
    1d74:	f9 81       	ldd	r31, Y+1	; 0x01
    1d76:	42 aa       	std	Z+50, r4	; 0x32
    1d78:	53 aa       	std	Z+51, r5	; 0x33
    1d7a:	64 aa       	std	Z+52, r6	; 0x34
    1d7c:	75 aa       	std	Z+53, r7	; 0x35
    1d7e:	4e 8a       	std	Y+22, r4	; 0x16
    1d80:	5f 8a       	std	Y+23, r5	; 0x17
    1d82:	68 8e       	std	Y+24, r6	; 0x18
    1d84:	79 8e       	std	Y+25, r7	; 0x19
    1d86:	2e 81       	ldd	r18, Y+6	; 0x06
    1d88:	3f 81       	ldd	r19, Y+7	; 0x07
    1d8a:	31 70       	andi	r19, 0x01	; 1
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	92 e0       	ldi	r25, 0x02	; 2
    1d90:	82 1b       	sub	r24, r18
    1d92:	93 0b       	sbc	r25, r19
    1d94:	76 01       	movw	r14, r12
    1d96:	8c 15       	cp	r24, r12
    1d98:	9d 05       	cpc	r25, r13
    1d9a:	08 f4       	brcc	.+2      	; 0x1d9e <f_write+0x278>
    1d9c:	7c 01       	movw	r14, r24
    1d9e:	4e 89       	ldd	r20, Y+22	; 0x16
    1da0:	5f 89       	ldd	r21, Y+23	; 0x17
    1da2:	68 8d       	ldd	r22, Y+24	; 0x18
    1da4:	79 8d       	ldd	r23, Y+25	; 0x19
    1da6:	88 81       	ld	r24, Y
    1da8:	99 81       	ldd	r25, Y+1	; 0x01
    1daa:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
    1dae:	88 23       	and	r24, r24
    1db0:	29 f0       	breq	.+10     	; 0x1dbc <f_write+0x296>
    1db2:	8c 81       	ldd	r24, Y+4	; 0x04
    1db4:	80 68       	ori	r24, 0x80	; 128
    1db6:	8c 83       	std	Y+4, r24	; 0x04
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	46 c0       	rjmp	.+140    	; 0x1e48 <f_write+0x322>
    1dbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc0:	a8 85       	ldd	r26, Y+8	; 0x08
    1dc2:	b9 85       	ldd	r27, Y+9	; 0x09
    1dc4:	91 70       	andi	r25, 0x01	; 1
    1dc6:	aa 27       	eor	r26, r26
    1dc8:	bb 27       	eor	r27, r27
    1dca:	c6 96       	adiw	r24, 0x36	; 54
    1dcc:	28 81       	ld	r18, Y
    1dce:	39 81       	ldd	r19, Y+1	; 0x01
    1dd0:	a7 01       	movw	r20, r14
    1dd2:	b4 01       	movw	r22, r8
    1dd4:	82 0f       	add	r24, r18
    1dd6:	93 1f       	adc	r25, r19
    1dd8:	0e 94 79 00 	call	0xf2	; 0xf2 <mem_cpy>
    1ddc:	e8 81       	ld	r30, Y
    1dde:	f9 81       	ldd	r31, Y+1	; 0x01
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	24 83       	std	Z+4, r18	; 0x04
    1de4:	8e 0c       	add	r8, r14
    1de6:	9f 1c       	adc	r9, r15
    1de8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dea:	9f 81       	ldd	r25, Y+7	; 0x07
    1dec:	a8 85       	ldd	r26, Y+8	; 0x08
    1dee:	b9 85       	ldd	r27, Y+9	; 0x09
    1df0:	8e 0d       	add	r24, r14
    1df2:	9f 1d       	adc	r25, r15
    1df4:	a1 1d       	adc	r26, r1
    1df6:	b1 1d       	adc	r27, r1
    1df8:	8e 83       	std	Y+6, r24	; 0x06
    1dfa:	9f 83       	std	Y+7, r25	; 0x07
    1dfc:	a8 87       	std	Y+8, r26	; 0x08
    1dfe:	b9 87       	std	Y+9, r27	; 0x09
    1e00:	f5 01       	movw	r30, r10
    1e02:	80 81       	ld	r24, Z
    1e04:	91 81       	ldd	r25, Z+1	; 0x01
    1e06:	8e 0d       	add	r24, r14
    1e08:	9f 1d       	adc	r25, r15
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	80 83       	st	Z, r24
    1e0e:	ce 18       	sub	r12, r14
    1e10:	df 08       	sbc	r13, r15
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <f_write+0x2f0>
    1e14:	bf ce       	rjmp	.-642    	; 0x1b94 <f_write+0x6e>
    1e16:	8e 81       	ldd	r24, Y+6	; 0x06
    1e18:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1a:	a8 85       	ldd	r26, Y+8	; 0x08
    1e1c:	b9 85       	ldd	r27, Y+9	; 0x09
    1e1e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e20:	5b 85       	ldd	r21, Y+11	; 0x0b
    1e22:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e24:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e26:	48 17       	cp	r20, r24
    1e28:	59 07       	cpc	r21, r25
    1e2a:	6a 07       	cpc	r22, r26
    1e2c:	7b 07       	cpc	r23, r27
    1e2e:	20 f4       	brcc	.+8      	; 0x1e38 <f_write+0x312>
    1e30:	8a 87       	std	Y+10, r24	; 0x0a
    1e32:	9b 87       	std	Y+11, r25	; 0x0b
    1e34:	ac 87       	std	Y+12, r26	; 0x0c
    1e36:	bd 87       	std	Y+13, r27	; 0x0d
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	80 62       	ori	r24, 0x20	; 32
    1e3c:	8c 83       	std	Y+4, r24	; 0x04
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <f_write+0x322>
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <f_write+0x322>
    1e46:	87 e0       	ldi	r24, 0x07	; 7
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	ff 90       	pop	r15
    1e52:	ef 90       	pop	r14
    1e54:	df 90       	pop	r13
    1e56:	cf 90       	pop	r12
    1e58:	bf 90       	pop	r11
    1e5a:	af 90       	pop	r10
    1e5c:	9f 90       	pop	r9
    1e5e:	8f 90       	pop	r8
    1e60:	7f 90       	pop	r7
    1e62:	6f 90       	pop	r6
    1e64:	5f 90       	pop	r5
    1e66:	4f 90       	pop	r4
    1e68:	3f 90       	pop	r3
    1e6a:	2f 90       	pop	r2
    1e6c:	08 95       	ret

00001e6e <f_sync>:
    1e6e:	0f 93       	push	r16
    1e70:	1f 93       	push	r17
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	ec 01       	movw	r28, r24
    1e78:	0e 94 9e 01 	call	0x33c	; 0x33c <validate>
    1e7c:	98 2f       	mov	r25, r24
    1e7e:	81 11       	cpse	r24, r1
    1e80:	91 c0       	rjmp	.+290    	; 0x1fa4 <f_sync+0x136>
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	85 ff       	sbrs	r24, 5
    1e86:	8e c0       	rjmp	.+284    	; 0x1fa4 <f_sync+0x136>
    1e88:	4a 8d       	ldd	r20, Y+26	; 0x1a
    1e8a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    1e8c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1e8e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1e90:	88 81       	ld	r24, Y
    1e92:	99 81       	ldd	r25, Y+1	; 0x01
    1e94:	0e 94 65 01 	call	0x2ca	; 0x2ca <move_window>
    1e98:	98 2f       	mov	r25, r24
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	83 c0       	rjmp	.+262    	; 0x1fa4 <f_sync+0x136>
    1e9e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1ea0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	83 85       	ldd	r24, Z+11	; 0x0b
    1ea6:	80 62       	ori	r24, 0x20	; 32
    1ea8:	83 87       	std	Z+11, r24	; 0x0b
    1eaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eac:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eae:	ac 85       	ldd	r26, Y+12	; 0x0c
    1eb0:	bd 85       	ldd	r27, Y+13	; 0x0d
    1eb2:	84 8f       	std	Z+28, r24	; 0x1c
    1eb4:	95 8f       	std	Z+29, r25	; 0x1d
    1eb6:	a6 8f       	std	Z+30, r26	; 0x1e
    1eb8:	b7 8f       	std	Z+31, r27	; 0x1f
    1eba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ebc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ebe:	a8 89       	ldd	r26, Y+16	; 0x10
    1ec0:	b9 89       	ldd	r27, Y+17	; 0x11
    1ec2:	93 8f       	std	Z+27, r25	; 0x1b
    1ec4:	82 8f       	std	Z+26, r24	; 0x1a
    1ec6:	b5 8b       	std	Z+21, r27	; 0x15
    1ec8:	a4 8b       	std	Z+20, r26	; 0x14
    1eca:	0e 94 89 18 	call	0x3112	; 0x3112 <get_fattime>
    1ece:	f8 01       	movw	r30, r16
    1ed0:	66 8b       	std	Z+22, r22	; 0x16
    1ed2:	77 8b       	std	Z+23, r23	; 0x17
    1ed4:	80 8f       	std	Z+24, r24	; 0x18
    1ed6:	91 8f       	std	Z+25, r25	; 0x19
    1ed8:	13 8a       	std	Z+19, r1	; 0x13
    1eda:	12 8a       	std	Z+18, r1	; 0x12
    1edc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ede:	8f 7d       	andi	r24, 0xDF	; 223
    1ee0:	8c 83       	std	Y+4, r24	; 0x04
    1ee2:	e8 81       	ld	r30, Y
    1ee4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	84 83       	std	Z+4, r24	; 0x04
    1eea:	09 90       	ld	r0, Y+
    1eec:	d8 81       	ld	r29, Y
    1eee:	c0 2d       	mov	r28, r0
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <sync_window>
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	81 11       	cpse	r24, r1
    1efa:	54 c0       	rjmp	.+168    	; 0x1fa4 <f_sync+0x136>
    1efc:	88 81       	ld	r24, Y
    1efe:	83 30       	cpi	r24, 0x03	; 3
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <f_sync+0x96>
    1f02:	46 c0       	rjmp	.+140    	; 0x1f90 <f_sync+0x122>
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	88 23       	and	r24, r24
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <f_sync+0x9e>
    1f0a:	42 c0       	rjmp	.+132    	; 0x1f90 <f_sync+0x122>
    1f0c:	1a aa       	std	Y+50, r1	; 0x32
    1f0e:	1b aa       	std	Y+51, r1	; 0x33
    1f10:	1c aa       	std	Y+52, r1	; 0x34
    1f12:	1d aa       	std	Y+53, r1	; 0x35
    1f14:	be 01       	movw	r22, r28
    1f16:	6a 5c       	subi	r22, 0xCA	; 202
    1f18:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1a:	fb 01       	movw	r30, r22
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	8a 5c       	subi	r24, 0xCA	; 202
    1f20:	9d 4f       	sbci	r25, 0xFD	; 253
    1f22:	11 92       	st	Z+, r1
    1f24:	e8 17       	cp	r30, r24
    1f26:	f9 07       	cpc	r31, r25
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <f_sync+0xb4>
    1f2a:	85 e5       	ldi	r24, 0x55	; 85
    1f2c:	9a ea       	ldi	r25, 0xAA	; 170
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ec 5c       	subi	r30, 0xCC	; 204
    1f32:	fd 4f       	sbci	r31, 0xFD	; 253
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	82 e5       	ldi	r24, 0x52	; 82
    1f3a:	92 e5       	ldi	r25, 0x52	; 82
    1f3c:	a1 e6       	ldi	r26, 0x61	; 97
    1f3e:	b1 e4       	ldi	r27, 0x41	; 65
    1f40:	8e ab       	std	Y+54, r24	; 0x36
    1f42:	9f ab       	std	Y+55, r25	; 0x37
    1f44:	a8 af       	std	Y+56, r26	; 0x38
    1f46:	b9 af       	std	Y+57, r27	; 0x39
    1f48:	82 e7       	ldi	r24, 0x72	; 114
    1f4a:	92 e7       	ldi	r25, 0x72	; 114
    1f4c:	a1 e4       	ldi	r26, 0x41	; 65
    1f4e:	b1 e6       	ldi	r27, 0x61	; 97
    1f50:	7a 97       	sbiw	r30, 0x1a	; 26
    1f52:	80 83       	st	Z, r24
    1f54:	91 83       	std	Z+1, r25	; 0x01
    1f56:	a2 83       	std	Z+2, r26	; 0x02
    1f58:	b3 83       	std	Z+3, r27	; 0x03
    1f5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f5e:	a8 89       	ldd	r26, Y+16	; 0x10
    1f60:	b9 89       	ldd	r27, Y+17	; 0x11
    1f62:	34 96       	adiw	r30, 0x04	; 4
    1f64:	80 83       	st	Z, r24
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	a2 83       	std	Z+2, r26	; 0x02
    1f6a:	b3 83       	std	Z+3, r27	; 0x03
    1f6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f70:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f72:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f74:	34 96       	adiw	r30, 0x04	; 4
    1f76:	80 83       	st	Z, r24
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	a2 83       	std	Z+2, r26	; 0x02
    1f7c:	b3 83       	std	Z+3, r27	; 0x03
    1f7e:	2a 89       	ldd	r18, Y+18	; 0x12
    1f80:	3b 89       	ldd	r19, Y+19	; 0x13
    1f82:	4c 89       	ldd	r20, Y+20	; 0x14
    1f84:	5d 89       	ldd	r21, Y+21	; 0x15
    1f86:	01 e0       	ldi	r16, 0x01	; 1
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	0e 94 91 14 	call	0x2922	; 0x2922 <disk_write>
    1f8e:	1d 82       	std	Y+5, r1	; 0x05
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	0e 94 fd 14 	call	0x29fa	; 0x29fa <disk_ioctl>
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	01 c0       	rjmp	.+2      	; 0x1fa4 <f_sync+0x136>
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	89 2f       	mov	r24, r25
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	08 95       	ret

00001fb0 <f_close>:
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	ec 01       	movw	r28, r24
    1fb6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <f_sync>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <f_close+0x12>
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    1fc0:	18 82       	st	Y, r1
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <f_putc+0x6>
    1fce:	00 d0       	rcall	.+0      	; 0x1fd0 <f_putc+0x8>
    1fd0:	1f 92       	push	r1
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	fb 01       	movw	r30, r22
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
	btw = 1;
#endif
	f_write(fp, s, btw, &bw);		/* Write the char to the file */
    1fda:	9e 01       	movw	r18, r28
    1fdc:	2f 5f       	subi	r18, 0xFF	; 255
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	be 01       	movw	r22, r28
    1fe6:	6d 5f       	subi	r22, 0xFD	; 253
    1fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fea:	cf 01       	movw	r24, r30
    1fec:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <f_write>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	19 f0       	breq	.+6      	; 0x1ffe <f_putc+0x36>
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255
    1ffa:	9f ef       	ldi	r25, 0xFF	; 255
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <f_putc+0x3a>
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	08 95       	ret

00002012 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	ec 01       	movw	r28, r24
	int n;


	for (n = 0; *str; str++, n++) {
    2020:	88 81       	ld	r24, Y
    2022:	88 23       	and	r24, r24
    2024:	91 f0       	breq	.+36     	; 0x204a <f_puts+0x38>
    2026:	8b 01       	movw	r16, r22
    2028:	21 96       	adiw	r28, 0x01	; 1
    202a:	e1 2c       	mov	r14, r1
    202c:	f1 2c       	mov	r15, r1
		if (f_putc(*str, fp) == EOF) return EOF;
    202e:	b8 01       	movw	r22, r16
    2030:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    2034:	8f 3f       	cpi	r24, 0xFF	; 255
    2036:	2f ef       	ldi	r18, 0xFF	; 255
    2038:	92 07       	cpc	r25, r18
    203a:	51 f0       	breq	.+20     	; 0x2050 <f_puts+0x3e>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	e8 1a       	sub	r14, r24
    2040:	f8 0a       	sbc	r15, r24
    2042:	89 91       	ld	r24, Y+
    2044:	81 11       	cpse	r24, r1
    2046:	f3 cf       	rjmp	.-26     	; 0x202e <f_puts+0x1c>
    2048:	02 c0       	rjmp	.+4      	; 0x204e <f_puts+0x3c>
    204a:	e1 2c       	mov	r14, r1
    204c:	f1 2c       	mov	r15, r1
		if (f_putc(*str, fp) == EOF) return EOF;
	}
	return n;
    204e:	c7 01       	movw	r24, r14
}
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	08 95       	ret

0000205e <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    205e:	2f 92       	push	r2
    2060:	3f 92       	push	r3
    2062:	4f 92       	push	r4
    2064:	5f 92       	push	r5
    2066:	6f 92       	push	r6
    2068:	7f 92       	push	r7
    206a:	8f 92       	push	r8
    206c:	9f 92       	push	r9
    206e:	af 92       	push	r10
    2070:	bf 92       	push	r11
    2072:	cf 92       	push	r12
    2074:	df 92       	push	r13
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	66 97       	sbiw	r28, 0x16	; 22
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	4b a4       	ldd	r4, Y+43	; 0x2b
    2094:	5c a4       	ldd	r5, Y+44	; 0x2c
    2096:	6d a4       	ldd	r6, Y+45	; 0x2d
    2098:	7e a4       	ldd	r7, Y+46	; 0x2e
	ULONG v;
	TCHAR c, d, s[16], *p;
	int res, chc, cc;


	va_start(arp, str);
    209a:	9e 01       	movw	r18, r28
    209c:	21 5d       	subi	r18, 0xD1	; 209
    209e:	3f 4f       	sbci	r19, 0xFF	; 255
    20a0:	3e 8b       	std	Y+22, r19	; 0x16
    20a2:	2d 8b       	std	Y+21, r18	; 0x15

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    20a4:	83 01       	movw	r16, r6
    20a6:	0f 5f       	subi	r16, 0xFF	; 255
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	d3 01       	movw	r26, r6
    20ac:	8c 91       	ld	r24, X
		if (c == 0) break;			/* End of string */
    20ae:	88 23       	and	r24, r24
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <f_printf+0x56>
    20b2:	c8 c1       	rjmp	.+912    	; 0x2444 <f_printf+0x3e6>
    20b4:	e1 2c       	mov	r14, r1
    20b6:	f1 2c       	mov	r15, r1
    20b8:	21 2c       	mov	r2, r1
    20ba:	31 2c       	mov	r3, r1
    20bc:	08 c0       	rjmp	.+16     	; 0x20ce <f_printf+0x70>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
    20be:	83 01       	movw	r16, r6
    20c0:	0f 5f       	subi	r16, 0xFF	; 255
    20c2:	1f 4f       	sbci	r17, 0xFF	; 255
    20c4:	f3 01       	movw	r30, r6
    20c6:	80 81       	ld	r24, Z
		if (c == 0) break;			/* End of string */
    20c8:	88 23       	and	r24, r24
    20ca:	09 f4       	brne	.+2      	; 0x20ce <f_printf+0x70>
    20cc:	ec c1       	rjmp	.+984    	; 0x24a6 <f_printf+0x448>
		if (c != '%') {				/* Non escape character */
    20ce:	85 32       	cpi	r24, 0x25	; 37
    20d0:	39 f0       	breq	.+14     	; 0x20e0 <f_printf+0x82>
			cc = f_putc(c, fp);
    20d2:	b2 01       	movw	r22, r4
    20d4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
			if (cc != EOF) cc = 1;
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	09 f0       	breq	.+2      	; 0x20de <f_printf+0x80>
    20dc:	ab c1       	rjmp	.+854    	; 0x2434 <f_printf+0x3d6>
    20de:	a2 c1       	rjmp	.+836    	; 0x2424 <f_printf+0x3c6>
			continue;
		}
		w = f = 0;
		c = *str++;
    20e0:	d3 01       	movw	r26, r6
    20e2:	11 96       	adiw	r26, 0x01	; 1
    20e4:	bc 90       	ld	r11, X
		if (c == '0') {				/* Flag: '0' padding */
    20e6:	b0 e3       	ldi	r27, 0x30	; 48
    20e8:	bb 12       	cpse	r11, r27
    20ea:	09 c0       	rjmp	.+18     	; 0x20fe <f_printf+0xa0>
			f = 1; c = *str++;
    20ec:	f3 01       	movw	r30, r6
    20ee:	b2 80       	ldd	r11, Z+2	; 0x02
    20f0:	93 01       	movw	r18, r6
    20f2:	2d 5f       	subi	r18, 0xFD	; 253
    20f4:	3f 4f       	sbci	r19, 0xFF	; 255
    20f6:	39 01       	movw	r6, r18
    20f8:	99 24       	eor	r9, r9
    20fa:	93 94       	inc	r9
    20fc:	11 c0       	rjmp	.+34     	; 0x2120 <f_printf+0xc2>
		} else {
			if (c == '-') {			/* Flag: left justified */
    20fe:	3d e2       	ldi	r19, 0x2D	; 45
    2100:	b3 16       	cp	r11, r19
    2102:	29 f0       	breq	.+10     	; 0x210e <f_printf+0xb0>
			cc = f_putc(c, fp);
			if (cc != EOF) cc = 1;
			continue;
		}
		w = f = 0;
		c = *str++;
    2104:	42 e0       	ldi	r20, 0x02	; 2
    2106:	64 0e       	add	r6, r20
    2108:	71 1c       	adc	r7, r1
		if (c != '%') {				/* Non escape character */
			cc = f_putc(c, fp);
			if (cc != EOF) cc = 1;
			continue;
		}
		w = f = 0;
    210a:	91 2c       	mov	r9, r1
    210c:	09 c0       	rjmp	.+18     	; 0x2120 <f_printf+0xc2>
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
    210e:	d3 01       	movw	r26, r6
    2110:	12 96       	adiw	r26, 0x02	; 2
    2112:	bc 90       	ld	r11, X
    2114:	f3 01       	movw	r30, r6
    2116:	33 96       	adiw	r30, 0x03	; 3
    2118:	3f 01       	movw	r6, r30
    211a:	68 94       	set
    211c:	99 24       	eor	r9, r9
    211e:	91 f8       	bld	r9, 1
			}
		}
		while (IsDigit(c)) {		/* Precision */
    2120:	80 ed       	ldi	r24, 0xD0	; 208
    2122:	8b 0d       	add	r24, r11
    2124:	8a 30       	cpi	r24, 0x0A	; 10
    2126:	f0 f4       	brcc	.+60     	; 0x2164 <f_printf+0x106>
    2128:	00 e0       	ldi	r16, 0x00	; 0
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	8b 2d       	mov	r24, r11
			w = w * 10 + c - '0';
    212e:	98 01       	movw	r18, r16
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	00 0f       	add	r16, r16
    2136:	11 1f       	adc	r17, r17
    2138:	00 0f       	add	r16, r16
    213a:	11 1f       	adc	r17, r17
    213c:	00 0f       	add	r16, r16
    213e:	11 1f       	adc	r17, r17
    2140:	02 0f       	add	r16, r18
    2142:	13 1f       	adc	r17, r19
    2144:	08 0f       	add	r16, r24
    2146:	11 1d       	adc	r17, r1
    2148:	00 53       	subi	r16, 0x30	; 48
    214a:	11 09       	sbc	r17, r1
			c = *str++;
    214c:	ff ef       	ldi	r31, 0xFF	; 255
    214e:	6f 1a       	sub	r6, r31
    2150:	7f 0a       	sbc	r7, r31
    2152:	f3 01       	movw	r30, r6
    2154:	31 97       	sbiw	r30, 0x01	; 1
    2156:	80 81       	ld	r24, Z
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *str++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    2158:	90 ed       	ldi	r25, 0xD0	; 208
    215a:	98 0f       	add	r25, r24
    215c:	9a 30       	cpi	r25, 0x0A	; 10
    215e:	38 f3       	brcs	.-50     	; 0x212e <f_printf+0xd0>
    2160:	b8 2e       	mov	r11, r24
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <f_printf+0x10a>
    2164:	00 e0       	ldi	r16, 0x00	; 0
    2166:	10 e0       	ldi	r17, 0x00	; 0
			w = w * 10 + c - '0';
			c = *str++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    2168:	8b 2d       	mov	r24, r11
    216a:	8f 7d       	andi	r24, 0xDF	; 223
    216c:	8c 34       	cpi	r24, 0x4C	; 76
    216e:	41 f4       	brne	.+16     	; 0x2180 <f_printf+0x122>
			f |= 4; c = *str++;
    2170:	29 2d       	mov	r18, r9
    2172:	24 60       	ori	r18, 0x04	; 4
    2174:	92 2e       	mov	r9, r18
    2176:	d3 01       	movw	r26, r6
    2178:	bc 90       	ld	r11, X
    217a:	f3 01       	movw	r30, r6
    217c:	31 96       	adiw	r30, 0x01	; 1
    217e:	3f 01       	movw	r6, r30
		}
		if (!c) break;
    2180:	bb 20       	and	r11, r11
    2182:	09 f4       	brne	.+2      	; 0x2186 <f_printf+0x128>
    2184:	4b c1       	rjmp	.+662    	; 0x241c <f_printf+0x3be>
		d = c;
		if (IsLower(d)) d -= 0x20;
    2186:	8f e9       	ldi	r24, 0x9F	; 159
    2188:	8b 0d       	add	r24, r11
    218a:	8a 31       	cpi	r24, 0x1A	; 26
    218c:	18 f4       	brcc	.+6      	; 0x2194 <f_printf+0x136>
    218e:	20 ee       	ldi	r18, 0xE0	; 224
    2190:	2b 0d       	add	r18, r11
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <f_printf+0x138>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *str++;
		}
		if (!c) break;
		d = c;
    2194:	2b 2d       	mov	r18, r11
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    2196:	82 2f       	mov	r24, r18
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	fc 01       	movw	r30, r24
    219c:	e2 54       	subi	r30, 0x42	; 66
    219e:	f1 09       	sbc	r31, r1
    21a0:	e7 31       	cpi	r30, 0x17	; 23
    21a2:	f1 05       	cpc	r31, r1
    21a4:	08 f0       	brcs	.+2      	; 0x21a8 <f_printf+0x14a>
    21a6:	65 c0       	rjmp	.+202    	; 0x2272 <f_printf+0x214>
    21a8:	ec 5c       	subi	r30, 0xCC	; 204
    21aa:	ff 4f       	sbci	r31, 0xFF	; 255
    21ac:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    21b0:	ed 89       	ldd	r30, Y+21	; 0x15
    21b2:	fe 89       	ldd	r31, Y+22	; 0x16
    21b4:	a0 80       	ld	r10, Z
    21b6:	b1 80       	ldd	r11, Z+1	; 0x01
    21b8:	9f 01       	movw	r18, r30
    21ba:	2e 5f       	subi	r18, 0xFE	; 254
    21bc:	3f 4f       	sbci	r19, 0xFF	; 255
    21be:	3e 8b       	std	Y+22, r19	; 0x16
    21c0:	2d 8b       	std	Y+21, r18	; 0x15
			for (j = 0; p[j]; j++) ;
    21c2:	d5 01       	movw	r26, r10
    21c4:	8c 91       	ld	r24, X
    21c6:	88 23       	and	r24, r24
    21c8:	59 f0       	breq	.+22     	; 0x21e0 <f_printf+0x182>
    21ca:	f5 01       	movw	r30, r10
    21cc:	31 96       	adiw	r30, 0x01	; 1
    21ce:	c1 2c       	mov	r12, r1
    21d0:	d1 2c       	mov	r13, r1
    21d2:	bf ef       	ldi	r27, 0xFF	; 255
    21d4:	cb 1a       	sub	r12, r27
    21d6:	db 0a       	sbc	r13, r27
    21d8:	81 91       	ld	r24, Z+
    21da:	81 11       	cpse	r24, r1
    21dc:	fa cf       	rjmp	.-12     	; 0x21d2 <f_printf+0x174>
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <f_printf+0x186>
    21e0:	c1 2c       	mov	r12, r1
    21e2:	d1 2c       	mov	r13, r1
			chc = 0;
			if (!(f & 2)) {
    21e4:	91 fc       	sbrc	r9, 1
    21e6:	18 c0       	rjmp	.+48     	; 0x2218 <f_printf+0x1ba>
				while (j++ < w) chc += (cc = f_putc(' ', fp));
    21e8:	c6 01       	movw	r24, r12
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	c0 16       	cp	r12, r16
    21ee:	d1 06       	cpc	r13, r17
    21f0:	b0 f4       	brcc	.+44     	; 0x221e <f_printf+0x1c0>
    21f2:	e1 2c       	mov	r14, r1
    21f4:	f1 2c       	mov	r15, r1
    21f6:	b2 01       	movw	r22, r4
    21f8:	80 e2       	ldi	r24, 0x20	; 32
    21fa:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    21fe:	e8 0e       	add	r14, r24
    2200:	f9 1e       	adc	r15, r25
    2202:	ef ef       	ldi	r30, 0xFF	; 255
    2204:	ce 1a       	sub	r12, r30
    2206:	de 0a       	sbc	r13, r30
    2208:	c0 16       	cp	r12, r16
    220a:	d1 06       	cpc	r13, r17
    220c:	a0 f3       	brcs	.-24     	; 0x21f6 <f_printf+0x198>
    220e:	68 01       	movw	r12, r16
    2210:	ff ef       	ldi	r31, 0xFF	; 255
    2212:	cf 1a       	sub	r12, r31
    2214:	df 0a       	sbc	r13, r31
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <f_printf+0x1c6>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			chc = 0;
    2218:	e1 2c       	mov	r14, r1
    221a:	f1 2c       	mov	r15, r1
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <f_printf+0x1c6>
			if (!(f & 2)) {
				while (j++ < w) chc += (cc = f_putc(' ', fp));
    221e:	6c 01       	movw	r12, r24
    2220:	e1 2c       	mov	r14, r1
    2222:	f1 2c       	mov	r15, r1
			}
			chc += (cc = f_puts(p, fp));
    2224:	b2 01       	movw	r22, r4
    2226:	c5 01       	movw	r24, r10
    2228:	0e 94 09 10 	call	0x2012	; 0x2012 <f_puts>
    222c:	e8 0e       	add	r14, r24
    222e:	f9 1e       	adc	r15, r25
			while (j++ < w) chc += (cc = f_putc(' ', fp));
    2230:	c0 16       	cp	r12, r16
    2232:	d1 06       	cpc	r13, r17
    2234:	60 f4       	brcc	.+24     	; 0x224e <f_printf+0x1f0>
    2236:	b2 01       	movw	r22, r4
    2238:	80 e2       	ldi	r24, 0x20	; 32
    223a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    223e:	e8 0e       	add	r14, r24
    2240:	f9 1e       	adc	r15, r25
    2242:	2f ef       	ldi	r18, 0xFF	; 255
    2244:	c2 1a       	sub	r12, r18
    2246:	d2 0a       	sbc	r13, r18
    2248:	c0 16       	cp	r12, r16
    224a:	d1 06       	cpc	r13, r17
    224c:	a0 f3       	brcs	.-24     	; 0x2236 <f_printf+0x1d8>
			if (cc != EOF) cc = chc;
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	09 f0       	breq	.+2      	; 0x2254 <f_printf+0x1f6>
    2252:	dc c0       	rjmp	.+440    	; 0x240c <f_printf+0x3ae>
    2254:	e7 c0       	rjmp	.+462    	; 0x2424 <f_printf+0x3c6>
			continue;
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fp); continue;
    2256:	0d 89       	ldd	r16, Y+21	; 0x15
    2258:	1e 89       	ldd	r17, Y+22	; 0x16
    225a:	0e 5f       	subi	r16, 0xFE	; 254
    225c:	1f 4f       	sbci	r17, 0xFF	; 255
    225e:	b2 01       	movw	r22, r4
    2260:	ad 89       	ldd	r26, Y+21	; 0x15
    2262:	be 89       	ldd	r27, Y+22	; 0x16
    2264:	8c 91       	ld	r24, X
    2266:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    226a:	7c 01       	movw	r14, r24
    226c:	1e 8b       	std	Y+22, r17	; 0x16
    226e:	0d 8b       	std	Y+21, r16	; 0x15
    2270:	cd c0       	rjmp	.+410    	; 0x240c <f_printf+0x3ae>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
    2272:	b2 01       	movw	r22, r4
    2274:	8b 2d       	mov	r24, r11
    2276:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    227a:	7c 01       	movw	r14, r24
    227c:	c7 c0       	rjmp	.+398    	; 0x240c <f_printf+0x3ae>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    227e:	92 fe       	sbrs	r9, 2
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <f_printf+0x242>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    2282:	aa e0       	ldi	r26, 0x0A	; 10
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <f_printf+0x22a>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    2286:	a0 e1       	ldi	r26, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    2288:	ed 89       	ldd	r30, Y+21	; 0x15
    228a:	fe 89       	ldd	r31, Y+22	; 0x16
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	34 96       	adiw	r30, 0x04	; 4
    2296:	fe 8b       	std	Y+22, r31	; 0x16
    2298:	ed 8b       	std	Y+21, r30	; 0x15
		if (d == 'D' && (v & 0x80000000)) {
    229a:	24 34       	cpi	r18, 0x44	; 68
    229c:	41 f5       	brne	.+80     	; 0x22ee <f_printf+0x290>
    229e:	1b c0       	rjmp	.+54     	; 0x22d6 <f_printf+0x278>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    22a0:	aa e0       	ldi	r26, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    22a2:	24 34       	cpi	r18, 0x44	; 68
    22a4:	71 f4       	brne	.+28     	; 0x22c2 <f_printf+0x264>
    22a6:	ed 89       	ldd	r30, Y+21	; 0x15
    22a8:	fe 89       	ldd	r31, Y+22	; 0x16
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	9f 01       	movw	r18, r30
    22b0:	2e 5f       	subi	r18, 0xFE	; 254
    22b2:	3f 4f       	sbci	r19, 0xFF	; 255
    22b4:	3e 8b       	std	Y+22, r19	; 0x16
    22b6:	2d 8b       	std	Y+21, r18	; 0x15
    22b8:	07 2e       	mov	r0, r23
    22ba:	00 0c       	add	r0, r0
    22bc:	88 0b       	sbc	r24, r24
    22be:	99 0b       	sbc	r25, r25
    22c0:	0a c0       	rjmp	.+20     	; 0x22d6 <f_printf+0x278>
    22c2:	ed 89       	ldd	r30, Y+21	; 0x15
    22c4:	fe 89       	ldd	r31, Y+22	; 0x16
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	32 96       	adiw	r30, 0x02	; 2
    22d0:	fe 8b       	std	Y+22, r31	; 0x16
    22d2:	ed 8b       	std	Y+21, r30	; 0x15
    22d4:	0c c0       	rjmp	.+24     	; 0x22ee <f_printf+0x290>
		if (d == 'D' && (v & 0x80000000)) {
    22d6:	99 23       	and	r25, r25
    22d8:	54 f4       	brge	.+20     	; 0x22ee <f_printf+0x290>
			v = 0 - v;
    22da:	90 95       	com	r25
    22dc:	80 95       	com	r24
    22de:	70 95       	com	r23
    22e0:	61 95       	neg	r22
    22e2:	7f 4f       	sbci	r23, 0xFF	; 255
    22e4:	8f 4f       	sbci	r24, 0xFF	; 255
    22e6:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    22e8:	f9 2d       	mov	r31, r9
    22ea:	f8 60       	ori	r31, 0x08	; 8
    22ec:	9f 2e       	mov	r9, r31
    22ee:	9e 01       	movw	r18, r28
    22f0:	2f 5f       	subi	r18, 0xFF	; 255
    22f2:	3f 4f       	sbci	r19, 0xFF	; 255
    22f4:	79 01       	movw	r14, r18
		}
		i = 0;
    22f6:	c1 2c       	mov	r12, r1
    22f8:	d1 2c       	mov	r13, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    22fa:	2a 2f       	mov	r18, r26
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	29 8b       	std	Y+17, r18	; 0x11
    2304:	3a 8b       	std	Y+18, r19	; 0x12
    2306:	4b 8b       	std	Y+19, r20	; 0x13
    2308:	5c 8b       	std	Y+20, r21	; 0x14
    230a:	2b 2d       	mov	r18, r11
    230c:	58 01       	movw	r10, r16
    230e:	09 2d       	mov	r16, r9
    2310:	12 2f       	mov	r17, r18
    2312:	29 89       	ldd	r18, Y+17	; 0x11
    2314:	3a 89       	ldd	r19, Y+18	; 0x12
    2316:	4b 89       	ldd	r20, Y+19	; 0x13
    2318:	5c 89       	ldd	r21, Y+20	; 0x14
    231a:	0e 94 8e 18 	call	0x311c	; 0x311c <__udivmodsi4>
    231e:	f6 2f       	mov	r31, r22
    2320:	e6 2f       	mov	r30, r22
    2322:	62 2f       	mov	r22, r18
    2324:	73 2f       	mov	r23, r19
    2326:	84 2f       	mov	r24, r20
    2328:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    232a:	fa 30       	cpi	r31, 0x0A	; 10
    232c:	30 f0       	brcs	.+12     	; 0x233a <f_printf+0x2dc>
    232e:	18 37       	cpi	r17, 0x78	; 120
    2330:	11 f0       	breq	.+4      	; 0x2336 <f_printf+0x2d8>
    2332:	e7 e0       	ldi	r30, 0x07	; 7
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <f_printf+0x2da>
    2336:	e7 e2       	ldi	r30, 0x27	; 39
    2338:	ef 0f       	add	r30, r31
			s[i++] = d + '0';
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	c3 1a       	sub	r12, r19
    233e:	d3 0a       	sbc	r13, r19
    2340:	e0 5d       	subi	r30, 0xD0	; 208
    2342:	d7 01       	movw	r26, r14
    2344:	ed 93       	st	X+, r30
    2346:	7d 01       	movw	r14, r26
		} while (v && i < sizeof s / sizeof s[0]);
    2348:	61 15       	cp	r22, r1
    234a:	71 05       	cpc	r23, r1
    234c:	81 05       	cpc	r24, r1
    234e:	91 05       	cpc	r25, r1
    2350:	21 f0       	breq	.+8      	; 0x235a <f_printf+0x2fc>
    2352:	b0 e1       	ldi	r27, 0x10	; 16
    2354:	cb 16       	cp	r12, r27
    2356:	d1 04       	cpc	r13, r1
    2358:	e1 f6       	brne	.-72     	; 0x2312 <f_printf+0x2b4>
    235a:	90 2e       	mov	r9, r16
    235c:	85 01       	movw	r16, r10
		if (f & 8) s[i++] = '-';
    235e:	93 fe       	sbrs	r9, 3
    2360:	0c c0       	rjmp	.+24     	; 0x237a <f_printf+0x31c>
    2362:	e1 e0       	ldi	r30, 0x01	; 1
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	ec 0f       	add	r30, r28
    2368:	fd 1f       	adc	r31, r29
    236a:	ec 0d       	add	r30, r12
    236c:	fd 1d       	adc	r31, r13
    236e:	2d e2       	ldi	r18, 0x2D	; 45
    2370:	20 83       	st	Z, r18
    2372:	a6 01       	movw	r20, r12
    2374:	4f 5f       	subi	r20, 0xFF	; 255
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	6a 01       	movw	r12, r20
		j = i; d = (f & 1) ? '0' : ' ';
    237a:	90 fc       	sbrc	r9, 0
    237c:	03 c0       	rjmp	.+6      	; 0x2384 <f_printf+0x326>
    237e:	50 e2       	ldi	r21, 0x20	; 32
    2380:	59 8b       	std	Y+17, r21	; 0x11
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <f_printf+0x32a>
    2384:	80 e3       	ldi	r24, 0x30	; 48
    2386:	89 8b       	std	Y+17, r24	; 0x11
		chc = 0;
		while (!(f & 2) && j++ < w) chc += (cc = f_putc(d, fp));
    2388:	91 fc       	sbrc	r9, 1
    238a:	17 c0       	rjmp	.+46     	; 0x23ba <f_printf+0x35c>
    238c:	46 01       	movw	r8, r12
    238e:	9f ef       	ldi	r25, 0xFF	; 255
    2390:	89 1a       	sub	r8, r25
    2392:	99 0a       	sbc	r9, r25
    2394:	c0 16       	cp	r12, r16
    2396:	d1 06       	cpc	r13, r17
    2398:	08 f4       	brcc	.+2      	; 0x239c <f_printf+0x33e>
    239a:	5e c0       	rjmp	.+188    	; 0x2458 <f_printf+0x3fa>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		chc = 0;
    239c:	e1 2c       	mov	r14, r1
    239e:	f1 2c       	mov	r15, r1
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <f_printf+0x362>
    23a2:	af ef       	ldi	r26, 0xFF	; 255
    23a4:	aa 1a       	sub	r10, r26
    23a6:	ba 0a       	sbc	r11, r26
		while (!(f & 2) && j++ < w) chc += (cc = f_putc(d, fp));
    23a8:	a0 16       	cp	r10, r16
    23aa:	b1 06       	cpc	r11, r17
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <f_printf+0x352>
    23ae:	4d c0       	rjmp	.+154    	; 0x244a <f_printf+0x3ec>
    23b0:	48 01       	movw	r8, r16
    23b2:	bf ef       	ldi	r27, 0xFF	; 255
    23b4:	8b 1a       	sub	r8, r27
    23b6:	9b 0a       	sbc	r9, r27
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <f_printf+0x362>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    23ba:	46 01       	movw	r8, r12
		chc = 0;
    23bc:	e1 2c       	mov	r14, r1
    23be:	f1 2c       	mov	r15, r1
    23c0:	aa 24       	eor	r10, r10
    23c2:	a3 94       	inc	r10
    23c4:	b1 2c       	mov	r11, r1
    23c6:	ac 0e       	add	r10, r28
    23c8:	bd 1e       	adc	r11, r29
    23ca:	ac 0c       	add	r10, r12
    23cc:	bd 1c       	adc	r11, r13
		while (!(f & 2) && j++ < w) chc += (cc = f_putc(d, fp));
		do chc += (cc = f_putc(s[--i], fp)); while(i);
    23ce:	e1 e0       	ldi	r30, 0x01	; 1
    23d0:	ce 1a       	sub	r12, r30
    23d2:	d1 08       	sbc	r13, r1
    23d4:	b2 01       	movw	r22, r4
    23d6:	d5 01       	movw	r26, r10
    23d8:	8e 91       	ld	r24, -X
    23da:	5d 01       	movw	r10, r26
    23dc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    23e0:	e8 0e       	add	r14, r24
    23e2:	f9 1e       	adc	r15, r25
    23e4:	c1 14       	cp	r12, r1
    23e6:	d1 04       	cpc	r13, r1
    23e8:	91 f7       	brne	.-28     	; 0x23ce <f_printf+0x370>
		while (j++ < w) chc += (cc = f_putc(' ', fp));
    23ea:	80 16       	cp	r8, r16
    23ec:	91 06       	cpc	r9, r17
    23ee:	60 f4       	brcc	.+24     	; 0x2408 <f_printf+0x3aa>
    23f0:	b2 01       	movw	r22, r4
    23f2:	80 e2       	ldi	r24, 0x20	; 32
    23f4:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    23f8:	e8 0e       	add	r14, r24
    23fa:	f9 1e       	adc	r15, r25
    23fc:	bf ef       	ldi	r27, 0xFF	; 255
    23fe:	8b 1a       	sub	r8, r27
    2400:	9b 0a       	sbc	r9, r27
    2402:	80 16       	cp	r8, r16
    2404:	91 06       	cpc	r9, r17
    2406:	a0 f3       	brcs	.-24     	; 0x23f0 <f_printf+0x392>
		if (cc != EOF) cc = chc;
    2408:	01 96       	adiw	r24, 0x01	; 1
    240a:	61 f0       	breq	.+24     	; 0x2424 <f_printf+0x3c6>
	int res, chc, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    240c:	2e 0c       	add	r2, r14
    240e:	3f 1c       	adc	r3, r15
    2410:	ff ef       	ldi	r31, 0xFF	; 255
    2412:	ef 16       	cp	r14, r31
    2414:	ff 06       	cpc	r15, r31
    2416:	09 f0       	breq	.+2      	; 0x241a <f_printf+0x3bc>
    2418:	52 ce       	rjmp	.-860    	; 0x20be <f_printf+0x60>
    241a:	04 c0       	rjmp	.+8      	; 0x2424 <f_printf+0x3c6>
		while (j++ < w) chc += (cc = f_putc(' ', fp));
		if (cc != EOF) cc = chc;
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
    241c:	ef 20       	and	r14, r15
    241e:	e0 94       	com	r14
    2420:	09 f0       	breq	.+2      	; 0x2424 <f_printf+0x3c6>
    2422:	41 c0       	rjmp	.+130    	; 0x24a6 <f_printf+0x448>
    2424:	22 24       	eor	r2, r2
    2426:	2a 94       	dec	r2
    2428:	32 2c       	mov	r3, r2
    242a:	3d c0       	rjmp	.+122    	; 0x24a6 <f_printf+0x448>
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    242c:	92 fc       	sbrc	r9, 2
    242e:	2b cf       	rjmp	.-426    	; 0x2286 <f_printf+0x228>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    2430:	a0 e1       	ldi	r26, 0x10	; 16
    2432:	47 cf       	rjmp	.-370    	; 0x22c2 <f_printf+0x264>
	int res, chc, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	23 1a       	sub	r2, r19
    2438:	33 0a       	sbc	r3, r19
    243a:	38 01       	movw	r6, r16
		c = *str++;
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			cc = f_putc(c, fp);
			if (cc != EOF) cc = 1;
    243c:	ee 24       	eor	r14, r14
    243e:	e3 94       	inc	r14
    2440:	f1 2c       	mov	r15, r1
    2442:	3d ce       	rjmp	.-902    	; 0x20be <f_printf+0x60>
	int res, chc, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
    2444:	21 2c       	mov	r2, r1
    2446:	31 2c       	mov	r3, r1
    2448:	2e c0       	rjmp	.+92     	; 0x24a6 <f_printf+0x448>
			s[i++] = d + '0';
		} while (v && i < sizeof s / sizeof s[0]);
		if (f & 8) s[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		chc = 0;
		while (!(f & 2) && j++ < w) chc += (cc = f_putc(d, fp));
    244a:	b2 01       	movw	r22, r4
    244c:	89 2d       	mov	r24, r9
    244e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    2452:	e8 0e       	add	r14, r24
    2454:	f9 1e       	adc	r15, r25
    2456:	a5 cf       	rjmp	.-182    	; 0x23a2 <f_printf+0x344>
    2458:	b2 01       	movw	r22, r4
    245a:	89 89       	ldd	r24, Y+17	; 0x11
    245c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <f_putc>
    2460:	7c 01       	movw	r14, r24
    2462:	56 01       	movw	r10, r12
    2464:	99 88       	ldd	r9, Y+17	; 0x11
    2466:	9d cf       	rjmp	.-198    	; 0x23a2 <f_printf+0x344>
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    2468:	ad 89       	ldd	r26, Y+21	; 0x15
    246a:	be 89       	ldd	r27, Y+22	; 0x16
    246c:	6d 91       	ld	r22, X+
    246e:	7d 91       	ld	r23, X+
    2470:	8d 91       	ld	r24, X+
    2472:	9c 91       	ld	r25, X
    2474:	13 97       	sbiw	r26, 0x03	; 3
    2476:	14 96       	adiw	r26, 0x04	; 4
    2478:	be 8b       	std	Y+22, r27	; 0x16
    247a:	ad 8b       	std	Y+21, r26	; 0x15
			if (cc != EOF) cc = chc;
			continue;
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fp); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    247c:	a2 e0       	ldi	r26, 0x02	; 2
    247e:	37 cf       	rjmp	.-402    	; 0x22ee <f_printf+0x290>
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    2480:	92 fc       	sbrc	r9, 2
    2482:	f2 cf       	rjmp	.-28     	; 0x2468 <f_printf+0x40a>
			if (cc != EOF) cc = chc;
			continue;
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fp); continue;
		case 'B' :					/* Binary */
			r = 2; break;
    2484:	a2 e0       	ldi	r26, 0x02	; 2
    2486:	0d cf       	rjmp	.-486    	; 0x22a2 <f_printf+0x244>
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    2488:	ed 89       	ldd	r30, Y+21	; 0x15
    248a:	fe 89       	ldd	r31, Y+22	; 0x16
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	34 96       	adiw	r30, 0x04	; 4
    2496:	fe 8b       	std	Y+22, r31	; 0x16
    2498:	ed 8b       	std	Y+21, r30	; 0x15
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fp); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    249a:	a8 e0       	ldi	r26, 0x08	; 8
    249c:	28 cf       	rjmp	.-432    	; 0x22ee <f_printf+0x290>
		default:					/* Unknown type (pass-through) */
			cc = f_putc(c, fp); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (ULONG)va_arg(arp, long) : ((d == 'D') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int));
    249e:	92 fc       	sbrc	r9, 2
    24a0:	f3 cf       	rjmp	.-26     	; 0x2488 <f_printf+0x42a>
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fp); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
    24a2:	a8 e0       	ldi	r26, 0x08	; 8
    24a4:	0e cf       	rjmp	.-484    	; 0x22c2 <f_printf+0x264>
		if (cc != EOF) cc = chc;
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
}
    24a6:	c1 01       	movw	r24, r2
    24a8:	66 96       	adiw	r28, 0x16	; 22
    24aa:	0f b6       	in	r0, 0x3f	; 63
    24ac:	f8 94       	cli
    24ae:	de bf       	out	0x3e, r29	; 62
    24b0:	0f be       	out	0x3f, r0	; 63
    24b2:	cd bf       	out	0x3d, r28	; 61
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	1f 91       	pop	r17
    24ba:	0f 91       	pop	r16
    24bc:	ff 90       	pop	r15
    24be:	ef 90       	pop	r14
    24c0:	df 90       	pop	r13
    24c2:	cf 90       	pop	r12
    24c4:	bf 90       	pop	r11
    24c6:	af 90       	pop	r10
    24c8:	9f 90       	pop	r9
    24ca:	8f 90       	pop	r8
    24cc:	7f 90       	pop	r7
    24ce:	6f 90       	pop	r6
    24d0:	5f 90       	pop	r5
    24d2:	4f 90       	pop	r4
    24d4:	3f 90       	pop	r3
    24d6:	2f 90       	pop	r2
    24d8:	08 95       	ret

000024da <power_off>:
}

static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
    24da:	1c bc       	out	0x2c, r1	; 44

   DDRB  &= ~(SS | SCK | MOSI);   /* Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up */
    24dc:	84 b1       	in	r24, 0x04	; 4
    24de:	83 7d       	andi	r24, 0xD3	; 211
    24e0:	84 b9       	out	0x04, r24	; 4
   PORTB &= ~(SS | SCK | MOSI);
    24e2:	85 b1       	in	r24, 0x05	; 5
    24e4:	83 7d       	andi	r24, 0xD3	; 211
    24e6:	85 b9       	out	0x05, r24	; 5
    24e8:	08 95       	ret

000024ea <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    24ea:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    24ec:	0d b4       	in	r0, 0x2d	; 45
    24ee:	07 fe       	sbrs	r0, 7
    24f0:	fd cf       	rjmp	.-6      	; 0x24ec <xchg_spi+0x2>
	return SPDR;
    24f2:	8e b5       	in	r24, 0x2e	; 46
}
    24f4:	08 95       	ret

000024f6 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    24f6:	2a 9a       	sbi	0x05, 2	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    24f8:	8f ef       	ldi	r24, 0xFF	; 255
    24fa:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    24fe:	08 95       	ret

00002500 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    2500:	2a 98       	cbi	0x05, 2	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
    2508:	82 e3       	ldi	r24, 0x32	; 50
    250a:	80 93 34 01 	sts	0x0134, r24
	do
		d = xchg_spi(0xFF);
    250e:	8f ef       	ldi	r24, 0xFF	; 255
    2510:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	while (d != 0xFF && Timer2);
    2514:	8f 3f       	cpi	r24, 0xFF	; 255
    2516:	49 f0       	breq	.+18     	; 0x252a <select+0x2a>
    2518:	80 91 34 01 	lds	r24, 0x0134
    251c:	81 11       	cpse	r24, r1
    251e:	f7 cf       	rjmp	.-18     	; 0x250e <select+0xe>
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
	deselect();
    2520:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>
	return 0;	/* Timeout */
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
    252e:	08 95       	ret

00002530 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    2530:	0f 93       	push	r16
    2532:	1f 93       	push	r17
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	ec 01       	movw	r28, r24
    253a:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    253c:	84 e1       	ldi	r24, 0x14	; 20
    253e:	80 93 35 01 	sts	0x0135, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    2542:	8f ef       	ldi	r24, 0xFF	; 255
    2544:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    2548:	8f 3f       	cpi	r24, 0xFF	; 255
    254a:	39 f4       	brne	.+14     	; 0x255a <rcvr_datablock+0x2a>
    254c:	90 91 35 01 	lds	r25, 0x0135
    2550:	91 11       	cpse	r25, r1
    2552:	f7 cf       	rjmp	.-18     	; 0x2542 <rcvr_datablock+0x12>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	20 c0       	rjmp	.+64     	; 0x259a <rcvr_datablock+0x6a>
    255a:	8e 3f       	cpi	r24, 0xFE	; 254
    255c:	e1 f4       	brne	.+56     	; 0x2596 <rcvr_datablock+0x66>
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    255e:	8f ef       	ldi	r24, 0xFF	; 255
    2560:	8e bd       	out	0x2e, r24	; 46
    2562:	0d b4       	in	r0, 0x2d	; 45
    2564:	07 fe       	sbrs	r0, 7
    2566:	fd cf       	rjmp	.-6      	; 0x2562 <rcvr_datablock+0x32>
    2568:	9e b5       	in	r25, 0x2e	; 46
    256a:	98 83       	st	Y, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    256c:	8e bd       	out	0x2e, r24	; 46
    256e:	0d b4       	in	r0, 0x2d	; 45
    2570:	07 fe       	sbrs	r0, 7
    2572:	fd cf       	rjmp	.-6      	; 0x256e <rcvr_datablock+0x3e>
    2574:	22 96       	adiw	r28, 0x02	; 2
    2576:	9e b5       	in	r25, 0x2e	; 46
    2578:	fe 01       	movw	r30, r28
    257a:	31 97       	sbiw	r30, 0x01	; 1
    257c:	90 83       	st	Z, r25
	} while (cnt -= 2);
    257e:	02 50       	subi	r16, 0x02	; 2
    2580:	11 09       	sbc	r17, r1
    2582:	71 f7       	brne	.-36     	; 0x2560 <rcvr_datablock+0x30>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    2584:	8f ef       	ldi	r24, 0xFF	; 255
    2586:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	xchg_spi(0xFF);
    258a:	8f ef       	ldi	r24, 0xFF	; 255
    258c:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>

	return 1;						/* Return with success */
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <rcvr_datablock+0x6a>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	08 95       	ret

000025a4 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    25a4:	ff 92       	push	r15
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	c8 2f       	mov	r28, r24
    25b0:	d4 2f       	mov	r29, r20
    25b2:	15 2f       	mov	r17, r21
    25b4:	06 2f       	mov	r16, r22
    25b6:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    25b8:	88 23       	and	r24, r24
    25ba:	4c f4       	brge	.+18     	; 0x25ce <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	ba 01       	movw	r22, r20
    25c2:	87 e3       	ldi	r24, 0x37	; 55
    25c4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
		if (res > 1) return res;
    25c8:	82 30       	cpi	r24, 0x02	; 2
    25ca:	b0 f5       	brcc	.+108    	; 0x2638 <send_cmd+0x94>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    25cc:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    25ce:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>
	if (!select()) return 0xFF;
    25d2:	0e 94 80 12 	call	0x2500	; 0x2500 <select>
    25d6:	89 2b       	or	r24, r25
    25d8:	29 f1       	breq	.+74     	; 0x2624 <send_cmd+0x80>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    25da:	8c 2f       	mov	r24, r28
    25dc:	80 64       	ori	r24, 0x40	; 64
    25de:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    25e2:	8f 2d       	mov	r24, r15
    25e4:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    25e8:	80 2f       	mov	r24, r16
    25ea:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    25ee:	81 2f       	mov	r24, r17
    25f0:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    25f4:	8d 2f       	mov	r24, r29
    25f6:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    25fa:	cc 23       	and	r28, r28
    25fc:	c9 f0       	breq	.+50     	; 0x2630 <send_cmd+0x8c>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    25fe:	c8 30       	cpi	r28, 0x08	; 8
    2600:	99 f0       	breq	.+38     	; 0x2628 <send_cmd+0x84>
	xchg_spi(n);
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    2608:	cc 30       	cpi	r28, 0x0C	; 12
    260a:	19 f4       	brne	.+6      	; 0x2612 <send_cmd+0x6e>
    260c:	8f ef       	ldi	r24, 0xFF	; 255
    260e:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    2612:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    2614:	8f ef       	ldi	r24, 0xFF	; 255
    2616:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	while ((res & 0x80) && --n);
    261a:	88 23       	and	r24, r24
    261c:	6c f4       	brge	.+26     	; 0x2638 <send_cmd+0x94>
    261e:	c1 50       	subi	r28, 0x01	; 1
    2620:	c9 f7       	brne	.-14     	; 0x2614 <send_cmd+0x70>
    2622:	0a c0       	rjmp	.+20     	; 0x2638 <send_cmd+0x94>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	08 c0       	rjmp	.+16     	; 0x2638 <send_cmd+0x94>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    2628:	87 e8       	ldi	r24, 0x87	; 135
    262a:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    262e:	f1 cf       	rjmp	.-30     	; 0x2612 <send_cmd+0x6e>
    2630:	85 e9       	ldi	r24, 0x95	; 149
    2632:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    2636:	ed cf       	rjmp	.-38     	; 0x2612 <send_cmd+0x6e>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	08 95       	ret

00002644 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	ec 01       	movw	r28, r24
    264c:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    264e:	92 e3       	ldi	r25, 0x32	; 50
    2650:	90 93 34 01 	sts	0x0134, r25
	do
		d = xchg_spi(0xFF);
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	while (d != 0xFF && Timer2);
    265a:	8f 3f       	cpi	r24, 0xFF	; 255
    265c:	31 f0       	breq	.+12     	; 0x266a <xmit_datablock+0x26>
    265e:	90 91 34 01 	lds	r25, 0x0134
    2662:	91 11       	cpse	r25, r1
    2664:	f7 cf       	rjmp	.-18     	; 0x2654 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	2a c0       	rjmp	.+84     	; 0x26be <xmit_datablock+0x7a>

	xchg_spi(token);					/* Xmit data token */
    266a:	81 2f       	mov	r24, r17
    266c:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    2670:	1d 3f       	cpi	r17, 0xFD	; 253
    2672:	19 f1       	breq	.+70     	; 0x26ba <xmit_datablock+0x76>
    2674:	9e 01       	movw	r18, r28
    2676:	3e 5f       	subi	r19, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2678:	88 81       	ld	r24, Y
    267a:	8e bd       	out	0x2e, r24	; 46
    267c:	0d b4       	in	r0, 0x2d	; 45
    267e:	07 fe       	sbrs	r0, 7
    2680:	fd cf       	rjmp	.-6      	; 0x267c <xmit_datablock+0x38>
    2682:	22 96       	adiw	r28, 0x02	; 2
    2684:	fe 01       	movw	r30, r28
    2686:	31 97       	sbiw	r30, 0x01	; 1
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    2688:	80 81       	ld	r24, Z
    268a:	8e bd       	out	0x2e, r24	; 46
    268c:	0d b4       	in	r0, 0x2d	; 45
    268e:	07 fe       	sbrs	r0, 7
    2690:	fd cf       	rjmp	.-6      	; 0x268c <xmit_datablock+0x48>
	} while (cnt -= 2);
    2692:	c2 17       	cp	r28, r18
    2694:	d3 07       	cpc	r29, r19
    2696:	81 f7       	brne	.-32     	; 0x2678 <xmit_datablock+0x34>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    2698:	8f ef       	ldi	r24, 0xFF	; 255
    269a:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
		xchg_spi(0xFF);
    269e:	8f ef       	ldi	r24, 0xFF	; 255
    26a0:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
    26a6:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    26aa:	28 2f       	mov	r18, r24
    26ac:	2f 71       	andi	r18, 0x1F	; 31
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	25 30       	cpi	r18, 0x05	; 5
    26b4:	21 f0       	breq	.+8      	; 0x26be <xmit_datablock+0x7a>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <xmit_datablock+0x7a>
			return 0;
	}

	return 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
}
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	08 95       	ret

000026c6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    26c6:	cf 92       	push	r12
    26c8:	df 92       	push	r13
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <disk_initialize+0x12>
    26d8:	00 d0       	rcall	.+0      	; 0x26da <disk_initialize+0x14>
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    26de:	81 11       	cpse	r24, r1
    26e0:	ac c0       	rjmp	.+344    	; 0x283a <disk_initialize+0x174>
	power_off();						/* Turn off the socket power to reset the card */
    26e2:	0e 94 6d 12 	call	0x24da	; 0x24da <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    26e6:	80 91 00 01 	lds	r24, 0x0100
    26ea:	81 ff       	sbrs	r24, 1
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <disk_initialize+0x2e>
    26ee:	80 91 00 01 	lds	r24, 0x0100
    26f2:	b0 c0       	rjmp	.+352    	; 0x2854 <disk_initialize+0x18e>
}

static
void power_on (void)
{
   PORTB |= SS | MOSI;		/* Configure SCK/MOSI/CS as output */
    26f4:	85 b1       	in	r24, 0x05	; 5
    26f6:	8c 60       	ori	r24, 0x0C	; 12
    26f8:	85 b9       	out	0x05, r24	; 5
   DDRB  |= SS | SCK | MOSI;
    26fa:	84 b1       	in	r24, 0x04	; 4
    26fc:	8c 62       	ori	r24, 0x2C	; 44
    26fe:	84 b9       	out	0x04, r24	; 4

	SPCR = 0x52;			/* Enable SPI function in mode 0 */
    2700:	82 e5       	ldi	r24, 0x52	; 82
    2702:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x01;			/* SPI 2x mode */
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	9d bd       	out	0x2d, r25	; 45

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    2708:	8c bd       	out	0x2c, r24	; 44
    270a:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    270c:	8f ef       	ldi	r24, 0xFF	; 255
    270e:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    2712:	11 50       	subi	r17, 0x01	; 1
    2714:	d9 f7       	brne	.-10     	; 0x270c <disk_initialize+0x46>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	ba 01       	movw	r22, r20
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	09 f0       	breq	.+2      	; 0x2728 <disk_initialize+0x62>
    2726:	91 c0       	rjmp	.+290    	; 0x284a <disk_initialize+0x184>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2728:	84 e6       	ldi	r24, 0x64	; 100
    272a:	80 93 35 01 	sts	0x0135, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    272e:	4a ea       	ldi	r20, 0xAA	; 170
    2730:	51 e0       	ldi	r21, 0x01	; 1
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	70 e0       	ldi	r23, 0x00	; 0
    2736:	88 e0       	ldi	r24, 0x08	; 8
    2738:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	09 f0       	breq	.+2      	; 0x2742 <disk_initialize+0x7c>
    2740:	43 c0       	rjmp	.+134    	; 0x27c8 <disk_initialize+0x102>
    2742:	ce 01       	movw	r24, r28
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	6c 01       	movw	r12, r24
    2748:	7e 01       	movw	r14, r28
    274a:	95 e0       	ldi	r25, 0x05	; 5
    274c:	e9 0e       	add	r14, r25
    274e:	f1 1c       	adc	r15, r1
    2750:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    2758:	f8 01       	movw	r30, r16
    275a:	81 93       	st	Z+, r24
    275c:	8f 01       	movw	r16, r30
    275e:	ee 15       	cp	r30, r14
    2760:	ff 05       	cpc	r31, r15
    2762:	b9 f7       	brne	.-18     	; 0x2752 <disk_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	81 30       	cpi	r24, 0x01	; 1
    2768:	09 f0       	breq	.+2      	; 0x276c <disk_initialize+0xa6>
    276a:	6f c0       	rjmp	.+222    	; 0x284a <disk_initialize+0x184>
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	8a 3a       	cpi	r24, 0xAA	; 170
    2770:	09 f0       	breq	.+2      	; 0x2774 <disk_initialize+0xae>
    2772:	6b c0       	rjmp	.+214    	; 0x284a <disk_initialize+0x184>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2774:	80 91 35 01 	lds	r24, 0x0135
    2778:	88 23       	and	r24, r24
    277a:	49 f0       	breq	.+18     	; 0x278e <disk_initialize+0xc8>
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	60 e0       	ldi	r22, 0x00	; 0
    2782:	70 e4       	ldi	r23, 0x40	; 64
    2784:	89 ea       	ldi	r24, 0xA9	; 169
    2786:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    278a:	81 11       	cpse	r24, r1
    278c:	f3 cf       	rjmp	.-26     	; 0x2774 <disk_initialize+0xae>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    278e:	80 91 35 01 	lds	r24, 0x0135
    2792:	88 23       	and	r24, r24
    2794:	09 f4       	brne	.+2      	; 0x2798 <disk_initialize+0xd2>
    2796:	59 c0       	rjmp	.+178    	; 0x284a <disk_initialize+0x184>
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	ba 01       	movw	r22, r20
    279e:	8a e3       	ldi	r24, 0x3A	; 58
    27a0:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    27a4:	81 11       	cpse	r24, r1
    27a6:	51 c0       	rjmp	.+162    	; 0x284a <disk_initialize+0x184>
    27a8:	76 01       	movw	r14, r12
    27aa:	14 e0       	ldi	r17, 0x04	; 4
    27ac:	1c 0d       	add	r17, r12
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    27ae:	8f ef       	ldi	r24, 0xFF	; 255
    27b0:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    27b4:	f7 01       	movw	r30, r14
    27b6:	81 93       	st	Z+, r24
    27b8:	7f 01       	movw	r14, r30
    27ba:	1e 13       	cpse	r17, r30
    27bc:	f8 cf       	rjmp	.-16     	; 0x27ae <disk_initialize+0xe8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	86 fd       	sbrc	r24, 6
    27c2:	3d c0       	rjmp	.+122    	; 0x283e <disk_initialize+0x178>
    27c4:	84 e0       	ldi	r24, 0x04	; 4
    27c6:	3c c0       	rjmp	.+120    	; 0x2840 <disk_initialize+0x17a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	50 e0       	ldi	r21, 0x00	; 0
    27cc:	ba 01       	movw	r22, r20
    27ce:	89 ea       	ldi	r24, 0xA9	; 169
    27d0:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    27d4:	82 30       	cpi	r24, 0x02	; 2
    27d6:	18 f0       	brcs	.+6      	; 0x27de <disk_initialize+0x118>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    27d8:	01 e0       	ldi	r16, 0x01	; 1
    27da:	11 e0       	ldi	r17, 0x01	; 1
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <disk_initialize+0x11c>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    27de:	02 e0       	ldi	r16, 0x02	; 2
    27e0:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    27e2:	90 91 35 01 	lds	r25, 0x0135
    27e6:	99 23       	and	r25, r25
    27e8:	41 f0       	breq	.+16     	; 0x27fa <disk_initialize+0x134>
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	ba 01       	movw	r22, r20
    27f0:	81 2f       	mov	r24, r17
    27f2:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    27f6:	81 11       	cpse	r24, r1
    27f8:	f4 cf       	rjmp	.-24     	; 0x27e2 <disk_initialize+0x11c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    27fa:	80 91 35 01 	lds	r24, 0x0135
    27fe:	88 23       	and	r24, r24
    2800:	21 f1       	breq	.+72     	; 0x284a <disk_initialize+0x184>
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	52 e0       	ldi	r21, 0x02	; 2
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	80 e1       	ldi	r24, 0x10	; 16
    280c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2810:	81 11       	cpse	r24, r1
    2812:	1b c0       	rjmp	.+54     	; 0x284a <disk_initialize+0x184>
				ty = 0;
		}
	}
	CardType = ty;
    2814:	00 93 33 01 	sts	0x0133, r16
	deselect();
    2818:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>

	if (ty) {			/* Initialization succeded */
    281c:	00 23       	and	r16, r16
    281e:	41 f0       	breq	.+16     	; 0x2830 <disk_initialize+0x16a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    2820:	80 91 00 01 	lds	r24, 0x0100
    2824:	8e 7f       	andi	r24, 0xFE	; 254
    2826:	80 93 00 01 	sts	0x0100, r24
		FCLK_FAST();
    282a:	80 e5       	ldi	r24, 0x50	; 80
    282c:	8c bd       	out	0x2c, r24	; 44
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <disk_initialize+0x16e>
	} else {			/* Initialization failed */
		power_off();
    2830:	0e 94 6d 12 	call	0x24da	; 0x24da <power_off>
	}

	return Stat;
    2834:	80 91 00 01 	lds	r24, 0x0100
    2838:	0d c0       	rjmp	.+26     	; 0x2854 <disk_initialize+0x18e>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	0b c0       	rjmp	.+22     	; 0x2854 <disk_initialize+0x18e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    283e:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2840:	80 93 33 01 	sts	0x0133, r24
	deselect();
    2844:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>
    2848:	eb cf       	rjmp	.-42     	; 0x2820 <disk_initialize+0x15a>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    284a:	10 92 33 01 	sts	0x0133, r1
	deselect();
    284e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>
    2852:	ee cf       	rjmp	.-36     	; 0x2830 <disk_initialize+0x16a>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
    286c:	08 95       	ret

0000286e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    286e:	81 11       	cpse	r24, r1
    2870:	03 c0       	rjmp	.+6      	; 0x2878 <disk_status+0xa>
	return Stat;
    2872:	80 91 00 01 	lds	r24, 0x0100
    2876:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2878:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    287a:	08 95       	ret

0000287c <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    287c:	0f 93       	push	r16
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	eb 01       	movw	r28, r22
	if (pdrv || !count) return RES_PARERR;
    2884:	81 11       	cpse	r24, r1
    2886:	44 c0       	rjmp	.+136    	; 0x2910 <disk_read+0x94>
    2888:	00 23       	and	r16, r16
    288a:	09 f4       	brne	.+2      	; 0x288e <disk_read+0x12>
    288c:	43 c0       	rjmp	.+134    	; 0x2914 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    288e:	80 91 00 01 	lds	r24, 0x0100
    2892:	80 fd       	sbrc	r24, 0
    2894:	41 c0       	rjmp	.+130    	; 0x2918 <disk_read+0x9c>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2896:	80 91 33 01 	lds	r24, 0x0133
    289a:	83 fd       	sbrc	r24, 3
    289c:	09 c0       	rjmp	.+18     	; 0x28b0 <disk_read+0x34>
    289e:	01 2e       	mov	r0, r17
    28a0:	19 e0       	ldi	r17, 0x09	; 9
    28a2:	22 0f       	add	r18, r18
    28a4:	33 1f       	adc	r19, r19
    28a6:	44 1f       	adc	r20, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	1a 95       	dec	r17
    28ac:	d1 f7       	brne	.-12     	; 0x28a2 <disk_read+0x26>
    28ae:	10 2d       	mov	r17, r0

	if (count == 1) {	/* Single block read */
    28b0:	01 30       	cpi	r16, 0x01	; 1
    28b2:	81 f4       	brne	.+32     	; 0x28d4 <disk_read+0x58>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
    28b4:	ba 01       	movw	r22, r20
    28b6:	a9 01       	movw	r20, r18
    28b8:	81 e1       	ldi	r24, 0x11	; 17
    28ba:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    28be:	81 11       	cpse	r24, r1
    28c0:	20 c0       	rjmp	.+64     	; 0x2902 <disk_read+0x86>
			&& rcvr_datablock(buff, 512))
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	72 e0       	ldi	r23, 0x02	; 2
    28c6:	ce 01       	movw	r24, r28
    28c8:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    28cc:	89 2b       	or	r24, r25
    28ce:	c9 f0       	breq	.+50     	; 0x2902 <disk_read+0x86>
    28d0:	00 e0       	ldi	r16, 0x00	; 0
    28d2:	17 c0       	rjmp	.+46     	; 0x2902 <disk_read+0x86>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
    28d4:	ba 01       	movw	r22, r20
    28d6:	a9 01       	movw	r20, r18
    28d8:	82 e1       	ldi	r24, 0x12	; 18
    28da:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    28de:	81 11       	cpse	r24, r1
    28e0:	10 c0       	rjmp	.+32     	; 0x2902 <disk_read+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	72 e0       	ldi	r23, 0x02	; 2
    28e6:	ce 01       	movw	r24, r28
    28e8:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    28ec:	89 2b       	or	r24, r25
    28ee:	19 f0       	breq	.+6      	; 0x28f6 <disk_read+0x7a>
				buff += 512;
    28f0:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    28f2:	01 50       	subi	r16, 0x01	; 1
    28f4:	b1 f7       	brne	.-20     	; 0x28e2 <disk_read+0x66>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	ba 01       	movw	r22, r20
    28fc:	8c e0       	ldi	r24, 0x0C	; 12
    28fe:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
		}
	}
	deselect();
    2902:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>

	return count ? RES_ERROR : RES_OK;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	01 11       	cpse	r16, r1
    290a:	07 c0       	rjmp	.+14     	; 0x291a <disk_read+0x9e>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	05 c0       	rjmp	.+10     	; 0x291a <disk_read+0x9e>
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (pdrv || !count) return RES_PARERR;
    2910:	84 e0       	ldi	r24, 0x04	; 4
    2912:	03 c0       	rjmp	.+6      	; 0x291a <disk_read+0x9e>
    2914:	84 e0       	ldi	r24, 0x04	; 4
    2916:	01 c0       	rjmp	.+2      	; 0x291a <disk_read+0x9e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2918:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	0f 91       	pop	r16
    2920:	08 95       	ret

00002922 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
    2922:	cf 92       	push	r12
    2924:	df 92       	push	r13
    2926:	ef 92       	push	r14
    2928:	ff 92       	push	r15
    292a:	0f 93       	push	r16
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	eb 01       	movw	r28, r22
    2932:	69 01       	movw	r12, r18
    2934:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    2936:	81 11       	cpse	r24, r1
    2938:	51 c0       	rjmp	.+162    	; 0x29dc <disk_write+0xba>
    293a:	00 23       	and	r16, r16
    293c:	09 f4       	brne	.+2      	; 0x2940 <disk_write+0x1e>
    293e:	50 c0       	rjmp	.+160    	; 0x29e0 <disk_write+0xbe>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2940:	80 91 00 01 	lds	r24, 0x0100
    2944:	80 fd       	sbrc	r24, 0
    2946:	4e c0       	rjmp	.+156    	; 0x29e4 <disk_write+0xc2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2948:	80 91 00 01 	lds	r24, 0x0100
    294c:	82 fd       	sbrc	r24, 2
    294e:	4c c0       	rjmp	.+152    	; 0x29e8 <disk_write+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2950:	80 91 33 01 	lds	r24, 0x0133
    2954:	83 fd       	sbrc	r24, 3
    2956:	09 c0       	rjmp	.+18     	; 0x296a <disk_write+0x48>
    2958:	0b 2e       	mov	r0, r27
    295a:	b9 e0       	ldi	r27, 0x09	; 9
    295c:	cc 0c       	add	r12, r12
    295e:	dd 1c       	adc	r13, r13
    2960:	ee 1c       	adc	r14, r14
    2962:	ff 1c       	adc	r15, r15
    2964:	ba 95       	dec	r27
    2966:	d1 f7       	brne	.-12     	; 0x295c <disk_write+0x3a>
    2968:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    296a:	01 30       	cpi	r16, 0x01	; 1
    296c:	79 f4       	brne	.+30     	; 0x298c <disk_write+0x6a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    296e:	b7 01       	movw	r22, r14
    2970:	a6 01       	movw	r20, r12
    2972:	88 e1       	ldi	r24, 0x18	; 24
    2974:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2978:	81 11       	cpse	r24, r1
    297a:	29 c0       	rjmp	.+82     	; 0x29ce <disk_write+0xac>
			&& xmit_datablock(buff, 0xFE))
    297c:	6e ef       	ldi	r22, 0xFE	; 254
    297e:	ce 01       	movw	r24, r28
    2980:	0e 94 22 13 	call	0x2644	; 0x2644 <xmit_datablock>
    2984:	89 2b       	or	r24, r25
    2986:	19 f1       	breq	.+70     	; 0x29ce <disk_write+0xac>
    2988:	00 e0       	ldi	r16, 0x00	; 0
    298a:	21 c0       	rjmp	.+66     	; 0x29ce <disk_write+0xac>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    298c:	86 70       	andi	r24, 0x06	; 6
    298e:	39 f0       	breq	.+14     	; 0x299e <disk_write+0x7c>
    2990:	40 2f       	mov	r20, r16
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	87 e9       	ldi	r24, 0x97	; 151
    299a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    299e:	b7 01       	movw	r22, r14
    29a0:	a6 01       	movw	r20, r12
    29a2:	89 e1       	ldi	r24, 0x19	; 25
    29a4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    29a8:	81 11       	cpse	r24, r1
    29aa:	11 c0       	rjmp	.+34     	; 0x29ce <disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    29ac:	6c ef       	ldi	r22, 0xFC	; 252
    29ae:	ce 01       	movw	r24, r28
    29b0:	0e 94 22 13 	call	0x2644	; 0x2644 <xmit_datablock>
    29b4:	89 2b       	or	r24, r25
    29b6:	19 f0       	breq	.+6      	; 0x29be <disk_write+0x9c>
				buff += 512;
    29b8:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    29ba:	01 50       	subi	r16, 0x01	; 1
    29bc:	b9 f7       	brne	.-18     	; 0x29ac <disk_write+0x8a>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    29be:	6d ef       	ldi	r22, 0xFD	; 253
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 22 13 	call	0x2644	; 0x2644 <xmit_datablock>
    29c8:	89 2b       	or	r24, r25
    29ca:	09 f4       	brne	.+2      	; 0x29ce <disk_write+0xac>
				count = 1;
    29cc:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    29ce:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>

	return count ? RES_ERROR : RES_OK;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	01 11       	cpse	r16, r1
    29d6:	09 c0       	rjmp	.+18     	; 0x29ea <disk_write+0xc8>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	07 c0       	rjmp	.+14     	; 0x29ea <disk_write+0xc8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	BYTE count			/* Sector count (1..255) */
)
{
	if (pdrv || !count) return RES_PARERR;
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <disk_write+0xc8>
    29e0:	84 e0       	ldi	r24, 0x04	; 4
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <disk_write+0xc8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    29e4:	83 e0       	ldi	r24, 0x03	; 3
    29e6:	01 c0       	rjmp	.+2      	; 0x29ea <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    29e8:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    29ea:	df 91       	pop	r29
    29ec:	cf 91       	pop	r28
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	ef 90       	pop	r14
    29f4:	df 90       	pop	r13
    29f6:	cf 90       	pop	r12
    29f8:	08 95       	ret

000029fa <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    29fa:	ef 92       	push	r14
    29fc:	ff 92       	push	r15
    29fe:	0f 93       	push	r16
    2a00:	1f 93       	push	r17
    2a02:	cf 93       	push	r28
    2a04:	df 93       	push	r29
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	60 97       	sbiw	r28, 0x10	; 16
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD *dp, st, ed, csize;


	if (pdrv) return RES_PARERR;
    2a16:	81 11       	cpse	r24, r1
    2a18:	99 c1       	rjmp	.+818    	; 0x2d4c <disk_ioctl+0x352>
    2a1a:	7a 01       	movw	r14, r20

	res = RES_ERROR;

	if (cmd == CTRL_POWER) {
    2a1c:	65 30       	cpi	r22, 0x05	; 5
    2a1e:	81 f4       	brne	.+32     	; 0x2a40 <disk_ioctl+0x46>
		switch (ptr[0]) {
    2a20:	fa 01       	movw	r30, r20
    2a22:	80 81       	ld	r24, Z
    2a24:	88 23       	and	r24, r24
    2a26:	19 f0       	breq	.+6      	; 0x2a2e <disk_ioctl+0x34>
    2a28:	81 30       	cpi	r24, 0x01	; 1
    2a2a:	29 f0       	breq	.+10     	; 0x2a36 <disk_ioctl+0x3c>
    2a2c:	91 c1       	rjmp	.+802    	; 0x2d50 <disk_ioctl+0x356>
		case 0:		/* Sub control code (POWER_OFF) */
			power_off();		/* Power off */
    2a2e:	0e 94 6d 12 	call	0x24da	; 0x24da <power_off>
			res = RES_OK;
    2a32:	80 e0       	ldi	r24, 0x00	; 0
			break;
    2a34:	90 c1       	rjmp	.+800    	; 0x2d56 <disk_ioctl+0x35c>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	fa 01       	movw	r30, r20
    2a3a:	81 83       	std	Z+1, r24	; 0x01
			res = RES_OK;
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
			break;
    2a3e:	8b c1       	rjmp	.+790    	; 0x2d56 <disk_ioctl+0x35c>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    2a40:	80 91 00 01 	lds	r24, 0x0100
    2a44:	80 fd       	sbrc	r24, 0
    2a46:	86 c1       	rjmp	.+780    	; 0x2d54 <disk_ioctl+0x35a>

		switch (cmd) {
    2a48:	06 2f       	mov	r16, r22
    2a4a:	10 e0       	ldi	r17, 0x00	; 0
    2a4c:	0f 30       	cpi	r16, 0x0F	; 15
    2a4e:	11 05       	cpc	r17, r1
    2a50:	08 f0       	brcs	.+2      	; 0x2a54 <disk_ioctl+0x5a>
    2a52:	63 c1       	rjmp	.+710    	; 0x2d1a <disk_ioctl+0x320>
    2a54:	f8 01       	movw	r30, r16
    2a56:	e5 5b       	subi	r30, 0xB5	; 181
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__tablejump2__>
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select()) res = RES_OK;
    2a5e:	0e 94 80 12 	call	0x2500	; 0x2500 <select>
    2a62:	11 e0       	ldi	r17, 0x01	; 1
    2a64:	89 2b       	or	r24, r25
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <disk_ioctl+0x70>
    2a68:	6d c1       	rjmp	.+730    	; 0x2d44 <disk_ioctl+0x34a>
    2a6a:	10 e0       	ldi	r17, 0x00	; 0
    2a6c:	6b c1       	rjmp	.+726    	; 0x2d44 <disk_ioctl+0x34a>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	ba 01       	movw	r22, r20
    2a74:	89 e0       	ldi	r24, 0x09	; 9
    2a76:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2a7a:	81 11       	cpse	r24, r1
    2a7c:	50 c1       	rjmp	.+672    	; 0x2d1e <disk_ioctl+0x324>
    2a7e:	60 e1       	ldi	r22, 0x10	; 16
    2a80:	70 e0       	ldi	r23, 0x00	; 0
    2a82:	ce 01       	movw	r24, r28
    2a84:	01 96       	adiw	r24, 0x01	; 1
    2a86:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    2a8a:	89 2b       	or	r24, r25
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <disk_ioctl+0x96>
    2a8e:	49 c1       	rjmp	.+658    	; 0x2d22 <disk_ioctl+0x328>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	82 95       	swap	r24
    2a94:	86 95       	lsr	r24
    2a96:	86 95       	lsr	r24
    2a98:	83 70       	andi	r24, 0x03	; 3
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	31 f5       	brne	.+76     	; 0x2aea <disk_ioctl+0xf0>
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    2a9e:	88 85       	ldd	r24, Y+8	; 0x08
    2aa0:	8f 73       	andi	r24, 0x3F	; 63
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	a0 e0       	ldi	r26, 0x00	; 0
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	99 27       	eor	r25, r25
    2aac:	88 27       	eor	r24, r24
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	a1 1d       	adc	r26, r1
    2ab2:	b1 1d       	adc	r27, r1
    2ab4:	29 85       	ldd	r18, Y+9	; 0x09
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	32 2f       	mov	r19, r18
    2aba:	22 27       	eor	r18, r18
    2abc:	4a 85       	ldd	r20, Y+10	; 0x0a
    2abe:	24 0f       	add	r18, r20
    2ac0:	31 1d       	adc	r19, r1
    2ac2:	82 0f       	add	r24, r18
    2ac4:	93 1f       	adc	r25, r19
    2ac6:	a1 1d       	adc	r26, r1
    2ac8:	b1 1d       	adc	r27, r1
					*(DWORD*)buff = csize << 10;
    2aca:	07 2e       	mov	r0, r23
    2acc:	7a e0       	ldi	r23, 0x0A	; 10
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	aa 1f       	adc	r26, r26
    2ad4:	bb 1f       	adc	r27, r27
    2ad6:	7a 95       	dec	r23
    2ad8:	d1 f7       	brne	.-12     	; 0x2ace <disk_ioctl+0xd4>
    2ada:	70 2d       	mov	r23, r0
    2adc:	f7 01       	movw	r30, r14
    2ade:	80 83       	st	Z, r24
    2ae0:	91 83       	std	Z+1, r25	; 0x01
    2ae2:	a2 83       	std	Z+2, r26	; 0x02
    2ae4:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
				}
				res = RES_OK;
    2ae6:	10 e0       	ldi	r17, 0x00	; 0
    2ae8:	2d c1       	rjmp	.+602    	; 0x2d44 <disk_ioctl+0x34a>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2aea:	29 85       	ldd	r18, Y+9	; 0x09
    2aec:	22 95       	swap	r18
    2aee:	26 95       	lsr	r18
    2af0:	26 95       	lsr	r18
    2af2:	23 70       	andi	r18, 0x03	; 3
    2af4:	88 85       	ldd	r24, Y+8	; 0x08
    2af6:	f4 e0       	ldi	r31, 0x04	; 4
    2af8:	8f 9f       	mul	r24, r31
    2afa:	c0 01       	movw	r24, r0
    2afc:	11 24       	eor	r1, r1
    2afe:	82 0f       	add	r24, r18
    2b00:	91 1d       	adc	r25, r1
    2b02:	9c 01       	movw	r18, r24
    2b04:	2f 5f       	subi	r18, 0xFF	; 255
    2b06:	3f 4f       	sbci	r19, 0xFF	; 255
    2b08:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0a:	83 70       	andi	r24, 0x03	; 3
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	98 2f       	mov	r25, r24
    2b10:	88 27       	eor	r24, r24
    2b12:	99 0f       	add	r25, r25
    2b14:	99 0f       	add	r25, r25
    2b16:	82 0f       	add	r24, r18
    2b18:	93 1f       	adc	r25, r19
    2b1a:	a0 e0       	ldi	r26, 0x00	; 0
    2b1c:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    2b1e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b20:	3f 70       	andi	r19, 0x0F	; 15
    2b22:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b24:	22 1f       	adc	r18, r18
    2b26:	22 27       	eor	r18, r18
    2b28:	22 1f       	adc	r18, r18
    2b2a:	32 0f       	add	r19, r18
    2b2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b2e:	23 70       	andi	r18, 0x03	; 3
    2b30:	22 0f       	add	r18, r18
    2b32:	23 0f       	add	r18, r19
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = csize << (n - 9);
    2b34:	27 50       	subi	r18, 0x07	; 7
    2b36:	04 c0       	rjmp	.+8      	; 0x2b40 <disk_ioctl+0x146>
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	aa 1f       	adc	r26, r26
    2b3e:	bb 1f       	adc	r27, r27
    2b40:	2a 95       	dec	r18
    2b42:	d2 f7       	brpl	.-12     	; 0x2b38 <disk_ioctl+0x13e>
    2b44:	f7 01       	movw	r30, r14
    2b46:	80 83       	st	Z, r24
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	a2 83       	std	Z+2, r26	; 0x02
    2b4c:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    2b4e:	10 e0       	ldi	r17, 0x00	; 0
    2b50:	f9 c0       	rjmp	.+498    	; 0x2d44 <disk_ioctl+0x34a>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDv2? */
    2b52:	10 91 33 01 	lds	r17, 0x0133
    2b56:	12 ff       	sbrs	r17, 2
    2b58:	2e c0       	rjmp	.+92     	; 0x2bb6 <disk_ioctl+0x1bc>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	50 e0       	ldi	r21, 0x00	; 0
    2b5e:	ba 01       	movw	r22, r20
    2b60:	8d e8       	ldi	r24, 0x8D	; 141
    2b62:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2b66:	81 11       	cpse	r24, r1
    2b68:	de c0       	rjmp	.+444    	; 0x2d26 <disk_ioctl+0x32c>
					xchg_spi(0xFF);
    2b6a:	8f ef       	ldi	r24, 0xFF	; 255
    2b6c:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    2b70:	60 e1       	ldi	r22, 0x10	; 16
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	ce 01       	movw	r24, r28
    2b76:	01 96       	adiw	r24, 0x01	; 1
    2b78:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    2b7c:	89 2b       	or	r24, r25
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <disk_ioctl+0x188>
    2b80:	d4 c0       	rjmp	.+424    	; 0x2d2a <disk_ioctl+0x330>
    2b82:	10 e3       	ldi	r17, 0x30	; 48
						for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    2b84:	8f ef       	ldi	r24, 0xFF	; 255
    2b86:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    2b8a:	11 50       	subi	r17, 0x01	; 1
    2b8c:	d9 f7       	brne	.-10     	; 0x2b84 <disk_ioctl+0x18a>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
    2b8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b90:	22 95       	swap	r18
    2b92:	2f 70       	andi	r18, 0x0F	; 15
    2b94:	80 e1       	ldi	r24, 0x10	; 16
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 e0       	ldi	r26, 0x00	; 0
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	04 c0       	rjmp	.+8      	; 0x2ba6 <disk_ioctl+0x1ac>
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	aa 1f       	adc	r26, r26
    2ba4:	bb 1f       	adc	r27, r27
    2ba6:	2a 95       	dec	r18
    2ba8:	d2 f7       	brpl	.-12     	; 0x2b9e <disk_ioctl+0x1a4>
    2baa:	f7 01       	movw	r30, r14
    2bac:	80 83       	st	Z, r24
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	a2 83       	std	Z+2, r26	; 0x02
    2bb2:	b3 83       	std	Z+3, r27	; 0x03
    2bb4:	c7 c0       	rjmp	.+398    	; 0x2d44 <disk_ioctl+0x34a>
						res = RES_OK;
					}
				}
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	50 e0       	ldi	r21, 0x00	; 0
    2bba:	ba 01       	movw	r22, r20
    2bbc:	89 e0       	ldi	r24, 0x09	; 9
    2bbe:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2bc2:	81 11       	cpse	r24, r1
    2bc4:	b4 c0       	rjmp	.+360    	; 0x2d2e <disk_ioctl+0x334>
    2bc6:	60 e1       	ldi	r22, 0x10	; 16
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	ce 01       	movw	r24, r28
    2bcc:	01 96       	adiw	r24, 0x01	; 1
    2bce:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    2bd2:	89 2b       	or	r24, r25
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <disk_ioctl+0x1de>
    2bd6:	ad c0       	rjmp	.+346    	; 0x2d32 <disk_ioctl+0x338>
					if (CardType & CT_SD1) {	/* SDv1 */
    2bd8:	11 ff       	sbrs	r17, 1
    2bda:	20 c0       	rjmp	.+64     	; 0x2c1c <disk_ioctl+0x222>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    2bdc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bde:	88 1f       	adc	r24, r24
    2be0:	88 27       	eor	r24, r24
    2be2:	88 1f       	adc	r24, r24
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bea:	2f 73       	andi	r18, 0x3F	; 63
    2bec:	82 0f       	add	r24, r18
    2bee:	91 1d       	adc	r25, r1
    2bf0:	82 0f       	add	r24, r18
    2bf2:	91 1d       	adc	r25, r1
    2bf4:	2e 85       	ldd	r18, Y+14	; 0x0e
    2bf6:	22 95       	swap	r18
    2bf8:	26 95       	lsr	r18
    2bfa:	26 95       	lsr	r18
    2bfc:	23 70       	andi	r18, 0x03	; 3
    2bfe:	21 50       	subi	r18, 0x01	; 1
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <disk_ioctl+0x20c>
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	2a 95       	dec	r18
    2c08:	e2 f7       	brpl	.-8      	; 0x2c02 <disk_ioctl+0x208>
    2c0a:	a0 e0       	ldi	r26, 0x00	; 0
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	f7 01       	movw	r30, r14
    2c10:	80 83       	st	Z, r24
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	a2 83       	std	Z+2, r26	; 0x02
    2c16:	b3 83       	std	Z+3, r27	; 0x03
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
    2c18:	10 e0       	ldi	r17, 0x00	; 0
    2c1a:	94 c0       	rjmp	.+296    	; 0x2d44 <disk_ioctl+0x34a>
			} else {					/* SDv1 or MMCv3 */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDv1 */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMCv3 */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    2c1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c1e:	28 2f       	mov	r18, r24
    2c20:	23 70       	andi	r18, 0x03	; 3
    2c22:	82 95       	swap	r24
    2c24:	86 95       	lsr	r24
    2c26:	87 70       	andi	r24, 0x07	; 7
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	f8 e0       	ldi	r31, 0x08	; 8
    2c2c:	2f 9f       	mul	r18, r31
    2c2e:	80 0d       	add	r24, r0
    2c30:	91 1d       	adc	r25, r1
    2c32:	11 24       	eor	r1, r1
    2c34:	01 96       	adiw	r24, 0x01	; 1
    2c36:	2b 85       	ldd	r18, Y+11	; 0x0b
    2c38:	2c 77       	andi	r18, 0x7C	; 124
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	35 95       	asr	r19
    2c3e:	27 95       	ror	r18
    2c40:	35 95       	asr	r19
    2c42:	27 95       	ror	r18
    2c44:	2f 5f       	subi	r18, 0xFF	; 255
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	82 9f       	mul	r24, r18
    2c4a:	a0 01       	movw	r20, r0
    2c4c:	83 9f       	mul	r24, r19
    2c4e:	50 0d       	add	r21, r0
    2c50:	92 9f       	mul	r25, r18
    2c52:	50 0d       	add	r21, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	ca 01       	movw	r24, r20
    2c58:	a0 e0       	ldi	r26, 0x00	; 0
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	f7 01       	movw	r30, r14
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
					}
					res = RES_OK;
    2c66:	10 e0       	ldi	r17, 0x00	; 0
    2c68:	6d c0       	rjmp	.+218    	; 0x2d44 <disk_ioctl+0x34a>
			break;

		/* Following commands are never used by FatFs module */

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
    2c6a:	80 91 33 01 	lds	r24, 0x0133
    2c6e:	fa 01       	movw	r30, r20
    2c70:	80 83       	st	Z, r24
			res = RES_OK;
    2c72:	10 e0       	ldi	r17, 0x00	; 0
			break;
    2c74:	67 c0       	rjmp	.+206    	; 0x2d44 <disk_ioctl+0x34a>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	50 e0       	ldi	r21, 0x00	; 0
    2c7a:	ba 01       	movw	r22, r20
    2c7c:	89 e0       	ldi	r24, 0x09	; 9
    2c7e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2c82:	81 11       	cpse	r24, r1
    2c84:	58 c0       	rjmp	.+176    	; 0x2d36 <disk_ioctl+0x33c>
				&& rcvr_datablock(ptr, 16))
    2c86:	60 e1       	ldi	r22, 0x10	; 16
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	c7 01       	movw	r24, r14
    2c8c:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    2c90:	11 e0       	ldi	r17, 0x01	; 1
    2c92:	89 2b       	or	r24, r25
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <disk_ioctl+0x29e>
    2c96:	56 c0       	rjmp	.+172    	; 0x2d44 <disk_ioctl+0x34a>
    2c98:	10 e0       	ldi	r17, 0x00	; 0
    2c9a:	54 c0       	rjmp	.+168    	; 0x2d44 <disk_ioctl+0x34a>
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	50 e0       	ldi	r21, 0x00	; 0
    2ca0:	ba 01       	movw	r22, r20
    2ca2:	8a e0       	ldi	r24, 0x0A	; 10
    2ca4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2ca8:	81 11       	cpse	r24, r1
    2caa:	47 c0       	rjmp	.+142    	; 0x2d3a <disk_ioctl+0x340>
				&& rcvr_datablock(ptr, 16))
    2cac:	60 e1       	ldi	r22, 0x10	; 16
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	c7 01       	movw	r24, r14
    2cb2:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    2cb6:	11 e0       	ldi	r17, 0x01	; 1
    2cb8:	89 2b       	or	r24, r25
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <disk_ioctl+0x2c4>
    2cbc:	43 c0       	rjmp	.+134    	; 0x2d44 <disk_ioctl+0x34a>
    2cbe:	10 e0       	ldi	r17, 0x00	; 0
    2cc0:	41 c0       	rjmp	.+130    	; 0x2d44 <disk_ioctl+0x34a>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	ba 01       	movw	r22, r20
    2cc8:	8a e3       	ldi	r24, 0x3A	; 58
    2cca:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2cce:	81 11       	cpse	r24, r1
    2cd0:	36 c0       	rjmp	.+108    	; 0x2d3e <disk_ioctl+0x344>
    2cd2:	87 01       	movw	r16, r14
    2cd4:	f4 e0       	ldi	r31, 0x04	; 4
    2cd6:	ef 0e       	add	r14, r31
    2cd8:	f1 1c       	adc	r15, r1
				for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    2cda:	8f ef       	ldi	r24, 0xFF	; 255
    2cdc:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	81 93       	st	Z+, r24
    2ce4:	8f 01       	movw	r16, r30
    2ce6:	ee 15       	cp	r30, r14
    2ce8:	ff 05       	cpc	r31, r15
    2cea:	b9 f7       	brne	.-18     	; 0x2cda <disk_ioctl+0x2e0>
				res = RES_OK;
    2cec:	10 e0       	ldi	r17, 0x00	; 0
    2cee:	2a c0       	rjmp	.+84     	; 0x2d44 <disk_ioctl+0x34a>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    2cf0:	40 e0       	ldi	r20, 0x00	; 0
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	ba 01       	movw	r22, r20
    2cf6:	8d e8       	ldi	r24, 0x8D	; 141
    2cf8:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <send_cmd>
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	21 c0       	rjmp	.+66     	; 0x2d42 <disk_ioctl+0x348>
				xchg_spi(0xFF);
    2d00:	8f ef       	ldi	r24, 0xFF	; 255
    2d02:	0e 94 75 12 	call	0x24ea	; 0x24ea <xchg_spi>
				if (rcvr_datablock(ptr, 64))
    2d06:	60 e4       	ldi	r22, 0x40	; 64
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	c7 01       	movw	r24, r14
    2d0c:	0e 94 98 12 	call	0x2530	; 0x2530 <rcvr_datablock>
    2d10:	11 e0       	ldi	r17, 0x01	; 1
    2d12:	89 2b       	or	r24, r25
    2d14:	b9 f0       	breq	.+46     	; 0x2d44 <disk_ioctl+0x34a>
    2d16:	10 e0       	ldi	r17, 0x00	; 0
    2d18:	15 c0       	rjmp	.+42     	; 0x2d44 <disk_ioctl+0x34a>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
    2d1a:	14 e0       	ldi	r17, 0x04	; 4
    2d1c:	13 c0       	rjmp	.+38     	; 0x2d44 <disk_ioctl+0x34a>
	DWORD *dp, st, ed, csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    2d1e:	11 e0       	ldi	r17, 0x01	; 1
    2d20:	11 c0       	rjmp	.+34     	; 0x2d44 <disk_ioctl+0x34a>
    2d22:	11 e0       	ldi	r17, 0x01	; 1
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <disk_ioctl+0x34a>
    2d26:	11 e0       	ldi	r17, 0x01	; 1
    2d28:	0d c0       	rjmp	.+26     	; 0x2d44 <disk_ioctl+0x34a>
    2d2a:	11 e0       	ldi	r17, 0x01	; 1
    2d2c:	0b c0       	rjmp	.+22     	; 0x2d44 <disk_ioctl+0x34a>
    2d2e:	11 e0       	ldi	r17, 0x01	; 1
    2d30:	09 c0       	rjmp	.+18     	; 0x2d44 <disk_ioctl+0x34a>
    2d32:	11 e0       	ldi	r17, 0x01	; 1
    2d34:	07 c0       	rjmp	.+14     	; 0x2d44 <disk_ioctl+0x34a>
    2d36:	11 e0       	ldi	r17, 0x01	; 1
    2d38:	05 c0       	rjmp	.+10     	; 0x2d44 <disk_ioctl+0x34a>
    2d3a:	11 e0       	ldi	r17, 0x01	; 1
    2d3c:	03 c0       	rjmp	.+6      	; 0x2d44 <disk_ioctl+0x34a>
    2d3e:	11 e0       	ldi	r17, 0x01	; 1
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <disk_ioctl+0x34a>
    2d42:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
		}

		deselect();
    2d44:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <deselect>
    2d48:	81 2f       	mov	r24, r17
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <disk_ioctl+0x35c>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD *dp, st, ed, csize;


	if (pdrv) return RES_PARERR;
    2d4c:	84 e0       	ldi	r24, 0x04	; 4
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <disk_ioctl+0x35c>
		case 1:		/* Sub control code (POWER_GET) */
			ptr[1] = (BYTE)power_status();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
    2d50:	84 e0       	ldi	r24, 0x04	; 4
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <disk_ioctl+0x35c>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
    2d54:	83 e0       	ldi	r24, 0x03	; 3

		deselect();
	}

	return res;
}
    2d56:	60 96       	adiw	r28, 0x10	; 16
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	df 91       	pop	r29
    2d64:	cf 91       	pop	r28
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	08 95       	ret

00002d70 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    2d70:	80 91 35 01 	lds	r24, 0x0135
	if (n) Timer1 = --n;
    2d74:	88 23       	and	r24, r24
    2d76:	19 f0       	breq	.+6      	; 0x2d7e <disk_timerproc+0xe>
    2d78:	81 50       	subi	r24, 0x01	; 1
    2d7a:	80 93 35 01 	sts	0x0135, r24
	n = Timer2;
    2d7e:	80 91 34 01 	lds	r24, 0x0134
	if (n) Timer2 = --n;
    2d82:	88 23       	and	r24, r24
    2d84:	19 f0       	breq	.+6      	; 0x2d8c <disk_timerproc+0x1c>
    2d86:	81 50       	subi	r24, 0x01	; 1
    2d88:	80 93 34 01 	sts	0x0134, r24

	s = Stat;
    2d8c:	80 91 00 01 	lds	r24, 0x0100

	if (SOCKWP)				/* Write protected */
    2d90:	1d 9b       	sbis	0x03, 5	; 3
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <disk_timerproc+0x28>
		s |= STA_PROTECT;
    2d94:	84 60       	ori	r24, 0x04	; 4
    2d96:	01 c0       	rjmp	.+2      	; 0x2d9a <disk_timerproc+0x2a>
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    2d98:	8b 7f       	andi	r24, 0xFB	; 251

	if (SOCKINS)			/* Card inserted */
    2d9a:	1c 99       	sbic	0x03, 4	; 3
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <disk_timerproc+0x32>
		s &= ~STA_NODISK;
    2d9e:	8d 7f       	andi	r24, 0xFD	; 253
    2da0:	01 c0       	rjmp	.+2      	; 0x2da4 <disk_timerproc+0x34>
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    2da2:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    2da4:	80 93 00 01 	sts	0x0100, r24
    2da8:	08 95       	ret

00002daa <USART0Init>:
	TxFifo.buff[i] = d;
	cli();
	TxFifo.ct++;
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<< UDRE0) | (1<<RXCIE0);
	sei();
	TxFifo.wi = (i + 1) % sizeof TxFifo.buff;
    2daa:	10 92 c5 00 	sts	0x00C5, r1
    2dae:	80 e1       	ldi	r24, 0x10	; 16
    2db0:	80 93 c4 00 	sts	0x00C4, r24
    2db4:	e2 ec       	ldi	r30, 0xC2	; 194
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	86 60       	ori	r24, 0x06	; 6
    2dbc:	80 83       	st	Z, r24
    2dbe:	e6 e3       	ldi	r30, 0x36	; 54
    2dc0:	f1 e0       	ldi	r31, 0x01	; 1
    2dc2:	15 82       	std	Z+5, r1	; 0x05
    2dc4:	14 82       	std	Z+4, r1	; 0x04
    2dc6:	13 82       	std	Z+3, r1	; 0x03
    2dc8:	12 82       	std	Z+2, r1	; 0x02
    2dca:	11 82       	std	Z+1, r1	; 0x01
    2dcc:	10 82       	st	Z, r1
    2dce:	ec e7       	ldi	r30, 0x7C	; 124
    2dd0:	f1 e0       	ldi	r31, 0x01	; 1
    2dd2:	15 82       	std	Z+5, r1	; 0x05
    2dd4:	14 82       	std	Z+4, r1	; 0x04
    2dd6:	13 82       	std	Z+3, r1	; 0x03
    2dd8:	12 82       	std	Z+2, r1	; 0x02
    2dda:	11 82       	std	Z+1, r1	; 0x01
    2ddc:	10 82       	st	Z, r1
    2dde:	e1 ec       	ldi	r30, 0xC1	; 193
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	88 69       	ori	r24, 0x98	; 152
    2de6:	80 83       	st	Z, r24
    2de8:	08 95       	ret

00002dea <__vector_18>:


/* UART RXC interrupt */

ISR(USART_RX_vect)
{
    2dea:	1f 92       	push	r1
    2dec:	0f 92       	push	r0
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	0f 92       	push	r0
    2df2:	11 24       	eor	r1, r1
    2df4:	2f 93       	push	r18
    2df6:	8f 93       	push	r24
    2df8:	9f 93       	push	r25
    2dfa:	af 93       	push	r26
    2dfc:	bf 93       	push	r27
    2dfe:	ef 93       	push	r30
    2e00:	ff 93       	push	r31
	uint8_t d, n, i;


	d = UDR0;
    2e02:	20 91 c6 00 	lds	r18, 0x00C6
	n = RxFifo.ct;
    2e06:	80 91 3a 01 	lds	r24, 0x013A
    2e0a:	90 91 3b 01 	lds	r25, 0x013B
	if (n < sizeof RxFifo.buff) {
    2e0e:	80 34       	cpi	r24, 0x40	; 64
    2e10:	98 f4       	brcc	.+38     	; 0x2e38 <__vector_18+0x4e>
		RxFifo.ct = ++n;
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	e6 e3       	ldi	r30, 0x36	; 54
    2e18:	f1 e0       	ldi	r31, 0x01	; 1
    2e1a:	95 83       	std	Z+5, r25	; 0x05
    2e1c:	84 83       	std	Z+4, r24	; 0x04
		i = RxFifo.wi;
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	99 27       	eor	r25, r25
		RxFifo.buff[i] = d;
    2e24:	dc 01       	movw	r26, r24
    2e26:	aa 5c       	subi	r26, 0xCA	; 202
    2e28:	be 4f       	sbci	r27, 0xFE	; 254
    2e2a:	16 96       	adiw	r26, 0x06	; 6
    2e2c:	2c 93       	st	X, r18
		RxFifo.wi = (i + 1) % sizeof RxFifo.buff;
    2e2e:	01 96       	adiw	r24, 0x01	; 1
    2e30:	8f 73       	andi	r24, 0x3F	; 63
    2e32:	99 27       	eor	r25, r25
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	80 83       	st	Z, r24
	}
}
    2e38:	ff 91       	pop	r31
    2e3a:	ef 91       	pop	r30
    2e3c:	bf 91       	pop	r27
    2e3e:	af 91       	pop	r26
    2e40:	9f 91       	pop	r25
    2e42:	8f 91       	pop	r24
    2e44:	2f 91       	pop	r18
    2e46:	0f 90       	pop	r0
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	0f 90       	pop	r0
    2e4c:	1f 90       	pop	r1
    2e4e:	18 95       	reti

00002e50 <__vector_19>:


/* UART UDRE interrupt */

ISR(USART_UDRE_vect)
{
    2e50:	1f 92       	push	r1
    2e52:	0f 92       	push	r0
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	0f 92       	push	r0
    2e58:	11 24       	eor	r1, r1
    2e5a:	2f 93       	push	r18
    2e5c:	3f 93       	push	r19
    2e5e:	8f 93       	push	r24
    2e60:	9f 93       	push	r25
    2e62:	af 93       	push	r26
    2e64:	bf 93       	push	r27
    2e66:	ef 93       	push	r30
    2e68:	ff 93       	push	r31
	uint8_t n, i;

	n = TxFifo.ct;
    2e6a:	80 91 80 01 	lds	r24, 0x0180
    2e6e:	90 91 81 01 	lds	r25, 0x0181
	if (n) {
    2e72:	88 23       	and	r24, r24
    2e74:	c9 f0       	breq	.+50     	; 0x2ea8 <__vector_19+0x58>
		TxFifo.ct = --n;
    2e76:	2f ef       	ldi	r18, 0xFF	; 255
    2e78:	28 0f       	add	r18, r24
    2e7a:	82 2f       	mov	r24, r18
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	ec e7       	ldi	r30, 0x7C	; 124
    2e80:	f1 e0       	ldi	r31, 0x01	; 1
    2e82:	95 83       	std	Z+5, r25	; 0x05
    2e84:	84 83       	std	Z+4, r24	; 0x04
		i = TxFifo.ri;
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	99 27       	eor	r25, r25
		UDR0 = TxFifo.buff[i];
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	a4 58       	subi	r26, 0x84	; 132
    2e90:	be 4f       	sbci	r27, 0xFE	; 254
    2e92:	16 96       	adiw	r26, 0x06	; 6
    2e94:	3c 91       	ld	r19, X
    2e96:	30 93 c6 00 	sts	0x00C6, r19
		TxFifo.ri = (i + 1) % sizeof TxFifo.buff;
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	8f 73       	andi	r24, 0x3F	; 63
    2e9e:	99 27       	eor	r25, r25
    2ea0:	93 83       	std	Z+3, r25	; 0x03
    2ea2:	82 83       	std	Z+2, r24	; 0x02
	}
	if (n == 0) UCSR0B = (1<<RXEN0) | (1<<RXCIE0) | (1<<TXEN0);
    2ea4:	21 11       	cpse	r18, r1
    2ea6:	03 c0       	rjmp	.+6      	; 0x2eae <__vector_19+0x5e>
    2ea8:	88 e9       	ldi	r24, 0x98	; 152
    2eaa:	80 93 c1 00 	sts	0x00C1, r24
}
    2eae:	ff 91       	pop	r31
    2eb0:	ef 91       	pop	r30
    2eb2:	bf 91       	pop	r27
    2eb4:	af 91       	pop	r26
    2eb6:	9f 91       	pop	r25
    2eb8:	8f 91       	pop	r24
    2eba:	3f 91       	pop	r19
    2ebc:	2f 91       	pop	r18
    2ebe:	0f 90       	pop	r0
    2ec0:	0f be       	out	0x3f, r0	; 63
    2ec2:	0f 90       	pop	r0
    2ec4:	1f 90       	pop	r1
    2ec6:	18 95       	reti

00002ec8 <USART0SendByte>:

void uart_puts(char * str) {
	while (*str) {
		uart_putc(*str++);
	}
}
    2ec8:	cf 93       	push	r28
    2eca:	c8 2f       	mov	r28, r24
    2ecc:	8a 30       	cpi	r24, 0x0A	; 10
    2ece:	19 f4       	brne	.+6      	; 0x2ed6 <USART0SendByte+0xe>
    2ed0:	8d e0       	ldi	r24, 0x0D	; 13
    2ed2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <USART0SendByte>
    2ed6:	e0 ec       	ldi	r30, 0xC0	; 192
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	90 81       	ld	r25, Z
    2edc:	95 ff       	sbrs	r25, 5
    2ede:	fd cf       	rjmp	.-6      	; 0x2eda <USART0SendByte+0x12>
    2ee0:	c0 93 c6 00 	sts	0x00C6, r28
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	cf 91       	pop	r28
    2eea:	08 95       	ret

00002eec <InitADC>:
    2eec:	ec e7       	ldi	r30, 0x7C	; 124
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	80 64       	ori	r24, 0x40	; 64
    2ef4:	80 83       	st	Z, r24
    2ef6:	ea e7       	ldi	r30, 0x7A	; 122
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	87 68       	ori	r24, 0x87	; 135
    2efe:	80 83       	st	Z, r24
    2f00:	80 81       	ld	r24, Z
    2f02:	88 60       	ori	r24, 0x08	; 8
    2f04:	80 83       	st	Z, r24
    2f06:	80 81       	ld	r24, Z
    2f08:	80 64       	ori	r24, 0x40	; 64
    2f0a:	80 83       	st	Z, r24
    2f0c:	08 95       	ret

00002f0e <__vector_21>:
    2f0e:	1f 92       	push	r1
    2f10:	0f 92       	push	r0
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	0f 92       	push	r0
    2f16:	11 24       	eor	r1, r1
    2f18:	2f 93       	push	r18
    2f1a:	3f 93       	push	r19
    2f1c:	4f 93       	push	r20
    2f1e:	5f 93       	push	r21
    2f20:	6f 93       	push	r22
    2f22:	7f 93       	push	r23
    2f24:	8f 93       	push	r24
    2f26:	9f 93       	push	r25
    2f28:	ef 93       	push	r30
    2f2a:	ff 93       	push	r31
    2f2c:	86 b5       	in	r24, 0x26	; 38
    2f2e:	80 93 20 04 	sts	0x0420, r24
    2f32:	90 91 c9 01 	lds	r25, 0x01C9
    2f36:	98 17       	cp	r25, r24
    2f38:	28 f4       	brcc	.+10     	; 0x2f44 <__vector_21+0x36>
    2f3a:	28 2f       	mov	r18, r24
    2f3c:	29 1b       	sub	r18, r25
    2f3e:	20 93 c8 01 	sts	0x01C8, r18
    2f42:	04 c0       	rjmp	.+8      	; 0x2f4c <__vector_21+0x3e>
    2f44:	28 2f       	mov	r18, r24
    2f46:	29 1b       	sub	r18, r25
    2f48:	20 93 c8 01 	sts	0x01C8, r18
    2f4c:	90 91 c8 01 	lds	r25, 0x01C8
    2f50:	40 91 c4 01 	lds	r20, 0x01C4
    2f54:	50 91 c5 01 	lds	r21, 0x01C5
    2f58:	60 91 c6 01 	lds	r22, 0x01C6
    2f5c:	70 91 c7 01 	lds	r23, 0x01C7
    2f60:	49 0f       	add	r20, r25
    2f62:	51 1d       	adc	r21, r1
    2f64:	61 1d       	adc	r22, r1
    2f66:	71 1d       	adc	r23, r1
    2f68:	40 93 c4 01 	sts	0x01C4, r20
    2f6c:	50 93 c5 01 	sts	0x01C5, r21
    2f70:	60 93 c6 01 	sts	0x01C6, r22
    2f74:	70 93 c7 01 	sts	0x01C7, r23
    2f78:	80 93 c9 01 	sts	0x01C9, r24
    2f7c:	80 91 c2 01 	lds	r24, 0x01C2
    2f80:	90 91 c3 01 	lds	r25, 0x01C3
    2f84:	20 91 78 00 	lds	r18, 0x0078
    2f88:	30 91 79 00 	lds	r19, 0x0079
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	ee 0f       	add	r30, r30
    2f90:	ff 1f       	adc	r31, r31
    2f92:	ef 5d       	subi	r30, 0xDF	; 223
    2f94:	fb 4f       	sbci	r31, 0xFB	; 251
    2f96:	31 83       	std	Z+1, r19	; 0x01
    2f98:	20 83       	st	Z, r18
    2f9a:	01 96       	adiw	r24, 0x01	; 1
    2f9c:	81 15       	cp	r24, r1
    2f9e:	22 e0       	ldi	r18, 0x02	; 2
    2fa0:	92 07       	cpc	r25, r18
    2fa2:	29 f0       	breq	.+10     	; 0x2fae <__vector_21+0xa0>
    2fa4:	90 93 c3 01 	sts	0x01C3, r25
    2fa8:	80 93 c2 01 	sts	0x01C2, r24
    2fac:	04 c0       	rjmp	.+8      	; 0x2fb6 <__vector_21+0xa8>
    2fae:	10 92 c3 01 	sts	0x01C3, r1
    2fb2:	10 92 c2 01 	sts	0x01C2, r1
    2fb6:	ff 91       	pop	r31
    2fb8:	ef 91       	pop	r30
    2fba:	9f 91       	pop	r25
    2fbc:	8f 91       	pop	r24
    2fbe:	7f 91       	pop	r23
    2fc0:	6f 91       	pop	r22
    2fc2:	5f 91       	pop	r21
    2fc4:	4f 91       	pop	r20
    2fc6:	3f 91       	pop	r19
    2fc8:	2f 91       	pop	r18
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	0f 90       	pop	r0
    2fd0:	1f 90       	pop	r1
    2fd2:	18 95       	reti

00002fd4 <timer0_init>:
    2fd4:	85 b5       	in	r24, 0x25	; 37
    2fd6:	83 60       	ori	r24, 0x03	; 3
    2fd8:	85 bd       	out	0x25, r24	; 37
    2fda:	16 bc       	out	0x26, r1	; 38
    2fdc:	08 95       	ret

00002fde <timer2_init>:
    2fde:	e1 eb       	ldi	r30, 0xB1	; 177
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	87 60       	ori	r24, 0x07	; 7
    2fe6:	80 83       	st	Z, r24
    2fe8:	10 92 b2 00 	sts	0x00B2, r1
    2fec:	08 95       	ret

00002fee <__vector_7>:
    2fee:	1f 92       	push	r1
    2ff0:	0f 92       	push	r0
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	2f 93       	push	r18
    2ffa:	3f 93       	push	r19
    2ffc:	4f 93       	push	r20
    2ffe:	5f 93       	push	r21
    3000:	6f 93       	push	r22
    3002:	7f 93       	push	r23
    3004:	8f 93       	push	r24
    3006:	9f 93       	push	r25
    3008:	af 93       	push	r26
    300a:	bf 93       	push	r27
    300c:	ef 93       	push	r30
    300e:	ff 93       	push	r31
    3010:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <disk_timerproc>
    3014:	ff 91       	pop	r31
    3016:	ef 91       	pop	r30
    3018:	bf 91       	pop	r27
    301a:	af 91       	pop	r26
    301c:	9f 91       	pop	r25
    301e:	8f 91       	pop	r24
    3020:	7f 91       	pop	r23
    3022:	6f 91       	pop	r22
    3024:	5f 91       	pop	r21
    3026:	4f 91       	pop	r20
    3028:	3f 91       	pop	r19
    302a:	2f 91       	pop	r18
    302c:	0f 90       	pop	r0
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	0f 90       	pop	r0
    3032:	1f 90       	pop	r1
    3034:	18 95       	reti

00003036 <main>:
    3036:	10 92 c3 01 	sts	0x01C3, r1
    303a:	10 92 c2 01 	sts	0x01C2, r1
    303e:	10 92 c4 01 	sts	0x01C4, r1
    3042:	10 92 c5 01 	sts	0x01C5, r1
    3046:	10 92 c6 01 	sts	0x01C6, r1
    304a:	10 92 c7 01 	sts	0x01C7, r1
    304e:	10 92 c8 01 	sts	0x01C8, r1
    3052:	10 92 c9 01 	sts	0x01C9, r1
    3056:	10 92 20 04 	sts	0x0420, r1
    305a:	8b e9       	ldi	r24, 0x9B	; 155
    305c:	80 93 b3 00 	sts	0x00B3, r24
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	80 93 70 00 	sts	0x0070, r24
    3066:	82 e8       	ldi	r24, 0x82	; 130
    3068:	80 93 b0 00 	sts	0x00B0, r24
    306c:	0e 94 76 17 	call	0x2eec	; 0x2eec <InitADC>
    3070:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <timer0_init>
    3074:	0e 94 ef 17 	call	0x2fde	; 0x2fde <timer2_init>
    3078:	0e 94 d5 16 	call	0x2daa	; 0x2daa <USART0Init>
    307c:	78 94       	sei
    307e:	6a ec       	ldi	r22, 0xCA	; 202
    3080:	71 e0       	ldi	r23, 0x01	; 1
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	0e 94 97 0b 	call	0x172e	; 0x172e <f_mount>
    3088:	81 11       	cpse	r24, r1
    308a:	0e c0       	rjmp	.+28     	; 0x30a8 <main+0x72>
    308c:	48 e0       	ldi	r20, 0x08	; 8
    308e:	6e e1       	ldi	r22, 0x1E	; 30
    3090:	71 e0       	ldi	r23, 0x01	; 1
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	94 e0       	ldi	r25, 0x04	; 4
    3096:	0e 94 ad 0b 	call	0x175a	; 0x175a <f_open>
    309a:	81 11       	cpse	r24, r1
    309c:	05 c0       	rjmp	.+10     	; 0x30a8 <main+0x72>
    309e:	61 e0       	ldi	r22, 0x01	; 1
    30a0:	71 e0       	ldi	r23, 0x01	; 1
    30a2:	83 e4       	ldi	r24, 0x43	; 67
    30a4:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <USART0SendByte>
    30a8:	c0 e0       	ldi	r28, 0x00	; 0
    30aa:	d0 e0       	ldi	r29, 0x00	; 0
    30ac:	0f 2e       	mov	r0, r31
    30ae:	f9 e2       	ldi	r31, 0x29	; 41
    30b0:	ef 2e       	mov	r14, r31
    30b2:	f1 e0       	ldi	r31, 0x01	; 1
    30b4:	ff 2e       	mov	r15, r31
    30b6:	f0 2d       	mov	r31, r0
    30b8:	00 e0       	ldi	r16, 0x00	; 0
    30ba:	14 e0       	ldi	r17, 0x04	; 4
    30bc:	a1 2c       	mov	r10, r1
    30be:	b1 2c       	mov	r11, r1
    30c0:	1c c0       	rjmp	.+56     	; 0x30fa <main+0xc4>
    30c2:	fe 01       	movw	r30, r28
    30c4:	ee 0f       	add	r30, r30
    30c6:	ff 1f       	adc	r31, r31
    30c8:	ef 5d       	subi	r30, 0xDF	; 223
    30ca:	fb 4f       	sbci	r31, 0xFB	; 251
    30cc:	81 81       	ldd	r24, Z+1	; 0x01
    30ce:	8f 93       	push	r24
    30d0:	80 81       	ld	r24, Z
    30d2:	8f 93       	push	r24
    30d4:	ff 92       	push	r15
    30d6:	ef 92       	push	r14
    30d8:	1f 93       	push	r17
    30da:	0f 93       	push	r16
    30dc:	0e 94 2f 10 	call	0x205e	; 0x205e <f_printf>
    30e0:	21 96       	adiw	r28, 0x01	; 1
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	c1 15       	cp	r28, r1
    30f0:	82 e0       	ldi	r24, 0x02	; 2
    30f2:	d8 07       	cpc	r29, r24
    30f4:	11 f4       	brne	.+4      	; 0x30fa <main+0xc4>
    30f6:	ca 2d       	mov	r28, r10
    30f8:	db 2d       	mov	r29, r11
    30fa:	c0 90 c2 01 	lds	r12, 0x01C2
    30fe:	d0 90 c3 01 	lds	r13, 0x01C3
    3102:	cc 15       	cp	r28, r12
    3104:	dd 05       	cpc	r29, r13
    3106:	e9 f6       	brne	.-70     	; 0x30c2 <main+0x8c>
    3108:	c8 01       	movw	r24, r16
    310a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <f_close>
    310e:	e6 01       	movw	r28, r12
    3110:	f4 cf       	rjmp	.-24     	; 0x30fa <main+0xc4>

00003112 <get_fattime>:
	| ((DWORD)3 << 21)
	| ((DWORD)23 << 16)
	| ((DWORD)12 << 11)
	| ((DWORD)0 << 5)
	| ((DWORD)0 >> 1);
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	70 e6       	ldi	r23, 0x60	; 96
    3116:	87 e7       	ldi	r24, 0x77	; 119
    3118:	92 e4       	ldi	r25, 0x42	; 66
    311a:	08 95       	ret

0000311c <__udivmodsi4>:
    311c:	a1 e2       	ldi	r26, 0x21	; 33
    311e:	1a 2e       	mov	r1, r26
    3120:	aa 1b       	sub	r26, r26
    3122:	bb 1b       	sub	r27, r27
    3124:	fd 01       	movw	r30, r26
    3126:	0d c0       	rjmp	.+26     	; 0x3142 <__udivmodsi4_ep>

00003128 <__udivmodsi4_loop>:
    3128:	aa 1f       	adc	r26, r26
    312a:	bb 1f       	adc	r27, r27
    312c:	ee 1f       	adc	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	a2 17       	cp	r26, r18
    3132:	b3 07       	cpc	r27, r19
    3134:	e4 07       	cpc	r30, r20
    3136:	f5 07       	cpc	r31, r21
    3138:	20 f0       	brcs	.+8      	; 0x3142 <__udivmodsi4_ep>
    313a:	a2 1b       	sub	r26, r18
    313c:	b3 0b       	sbc	r27, r19
    313e:	e4 0b       	sbc	r30, r20
    3140:	f5 0b       	sbc	r31, r21

00003142 <__udivmodsi4_ep>:
    3142:	66 1f       	adc	r22, r22
    3144:	77 1f       	adc	r23, r23
    3146:	88 1f       	adc	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	1a 94       	dec	r1
    314c:	69 f7       	brne	.-38     	; 0x3128 <__udivmodsi4_loop>
    314e:	60 95       	com	r22
    3150:	70 95       	com	r23
    3152:	80 95       	com	r24
    3154:	90 95       	com	r25
    3156:	9b 01       	movw	r18, r22
    3158:	ac 01       	movw	r20, r24
    315a:	bd 01       	movw	r22, r26
    315c:	cf 01       	movw	r24, r30
    315e:	08 95       	ret

00003160 <__tablejump2__>:
    3160:	ee 0f       	add	r30, r30
    3162:	ff 1f       	adc	r31, r31
    3164:	05 90       	lpm	r0, Z+
    3166:	f4 91       	lpm	r31, Z
    3168:	e0 2d       	mov	r30, r0
    316a:	09 94       	ijmp

0000316c <__muluhisi3>:
    316c:	0e 94 c1 18 	call	0x3182	; 0x3182 <__umulhisi3>
    3170:	a5 9f       	mul	r26, r21
    3172:	90 0d       	add	r25, r0
    3174:	b4 9f       	mul	r27, r20
    3176:	90 0d       	add	r25, r0
    3178:	a4 9f       	mul	r26, r20
    317a:	80 0d       	add	r24, r0
    317c:	91 1d       	adc	r25, r1
    317e:	11 24       	eor	r1, r1
    3180:	08 95       	ret

00003182 <__umulhisi3>:
    3182:	a2 9f       	mul	r26, r18
    3184:	b0 01       	movw	r22, r0
    3186:	b3 9f       	mul	r27, r19
    3188:	c0 01       	movw	r24, r0
    318a:	a3 9f       	mul	r26, r19
    318c:	70 0d       	add	r23, r0
    318e:	81 1d       	adc	r24, r1
    3190:	11 24       	eor	r1, r1
    3192:	91 1d       	adc	r25, r1
    3194:	b2 9f       	mul	r27, r18
    3196:	70 0d       	add	r23, r0
    3198:	81 1d       	adc	r24, r1
    319a:	11 24       	eor	r1, r1
    319c:	91 1d       	adc	r25, r1
    319e:	08 95       	ret

000031a0 <_exit>:
    31a0:	f8 94       	cli

000031a2 <__stop_program>:
    31a2:	ff cf       	rjmp	.-2      	; 0x31a2 <__stop_program>
